{
  "hash": "6b4083d8e8c6552f4e645155525373a1",
  "result": {
    "markdown": "---\ntitle: \"West Virginia High School Football Blowouts\"\nauthor: \"Derek Willis\"\ndate: \"2023-11-13\"\nformat:\n  html:\n    df-print: paged\n    code-fold: true\nengine: knitr\njupyter: python3\n---\n\n\nIt has been a long time since I covered high school football in any way. The previous century, in fact.\n\nBut when Duncan Slade, the deputy managing editor at Mountain State Spotlight, emailed me in late October to ask for my advice on a story involving West Virginia high school football games, I couldn't say no. It was an interesting story idea and it involved data, too.\n\nState legislators passed a law earlier this year that allowed high school athletes to transfer between high schools without sitting out a year, as previously had been the case. One of the anecdotal effects? More blowout games where one team ran up margins of 40, 50 or even 70 points. The question Mountain State Spotlight wanted to answer was: is this real?\n\nLuckily, there's good data available to help with that. The [WVTailgateCentral website](http://wvtailgatecentral.com/) has game-by-game scores going back to 2009, with the exception of 2017 (the web app's database credentials [don't seem to work for that year](http://wvtailgatecentral.com/hs/fb2017/week_schedule.php?startdate=2017-08-12&enddate=2017-08-20)). I told Duncan that if it were my story, I'd scrape that site for game data and then calculate average margins, and I offered to do just that.\n\nOne view of WVTailgateCentral is that it's an old-school site, but that's good news for would-be scrapers: the uncomplicated HTML that uses a single table and allows you to change the URL so that instead of a week-by-week listing of games you can get [a whole season on a single page](http://www.wvtailgatecentral.com/hs/fb2023/week_schedule.php?startdate=2023-08-01&enddate=2023-11-15). Here's the [scraper](https://github.com/dwillis/wv_football/blob/main/scraper.py) I wrote in Python to retrieve game scores, identify the home state of each team (since this database includes some non-WV games) and calculate the absolute point difference:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport csv\nimport requests\nfrom bs4 import BeautifulSoup\n\nyears = [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018, 2019, 2020, 2021, 2022, 2023]\n\ngames = []\n\ndef state_from_team(team):\n    if \"(KY)\" in team:\n        state = \"KY\"\n    elif \"(OH)\" in team:\n        state = \"OH\"\n    elif \"(MD)\" in team:\n        state = \"MD\"\n    elif \"(VA\" in team:\n        state = \"VA\"\n    elif \"(PA)\" in team:\n        state = \"PA\"\n    elif \"(NC)\" in team:\n        state = \"NC\"\n    elif \"(ON)\" in team:\n        state = \"ON\"\n    elif \"(CN)\" in team:\n        state = \"CN\"\n    elif \"(SC)\" in team:\n        state = \"SC\"\n    elif \"(DC)\" in team:\n        state = \"DC\"\n    elif \"(DE)\" in team:\n        state = \"DE\"\n    elif \"(NY)\" in team:\n        state = \"NY\"\n    elif \"(NY)\" in team:\n        state = \"NY\"\n    elif \"(TN)\" in team:\n        state = \"TN\"\n    elif \"(NJ)\" in team:\n        state = \"NJ\"\n    elif \"(MI)\" in team:\n        state = \"MI\"\n    elif \"(A)\" in team:\n        state = \"PA\"\n    else:\n        state = \"WV\"\n    return state\n\nfor year in years:\n    print(year)\n    url = f\"http://wvtailgatecentral.com/hs/fb{year}/week_schedule.php?startdate={year}-08-01&enddate={year}-12-31\"\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    rows = soup.find('table').find_all('tr')[1:]\n    for row in rows:\n        date = row.find_all('td')[0].text\n        if \"**\" in row.find_all('td')[1].text:\n            home_team = row.find_all('td')[1].text.replace(\" **\", \"\")\n            home_team_score = row.find_all('td')[2].text\n            home_team_state = state_from_team(home_team)\n            visiting_team = row.find_all('td')[3].text\n            visiting_team_score = row.find_all('td')[4].text\n            visiting_team_state = state_from_team(visiting_team)\n        elif \"**\" in row.find_all('td')[3].text:\n            home_team = row.find_all('td')[3].text.replace(\" **\", \"\")\n            home_team_score = row.find_all('td')[4].text\n            home_team_state = state_from_team(home_team)\n            visiting_team = row.find_all('td')[1].text\n            visiting_team_score = row.find_all('td')[2].text\n            visiting_team_state = state_from_team(visiting_team)\n        else:\n            print(\"No home team!\")\n            home_team = row.find_all('td')[1].text.replace(\" **\", \"\")\n            home_team_score = row.find_all('td')[2].text\n            home_team_state = state_from_team(home_team)\n            visiting_team = row.find_all('td')[3].text\n            visiting_team_score = row.find_all('td')[4].text\n            visiting_team_state = state_from_team(visiting_team)\n        score_diff = abs(int(home_team_score) - int(visiting_team_score))\n        games.append([year, date, home_team, home_team_score, home_team_state, visiting_team, visiting_team_score, visiting_team_state, score_diff])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2018\n2019\n2020\n2021\nNo home team!\nNo home team!\nNo home team!\n2022\n2023\n```\n:::\n\n```{.python .cell-code}\nwith open(\"scores.csv\", \"w\") as f:\n    output_file = csv.writer(f)\n    output_file.writerow([\"year\", \"date\", \"home_team\", \"home_team_score\", \"home_team_state\", \"visiting_team\", \"visiting_team_score\", \"visiting_team_state\", \"differential\"])\n    output_file.writerows(games)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n120\n```\n:::\n:::\n\n\nIt's certainly possible to do all of this in Python or R, but I like to mix and match, especially when it comes to scraping, since I prefer Python's tooling. But for quick data exploration and visualization, it's hard to beat R in Quarto notebooks. You can see my [code here](https://github.com/dwillis/wv_football/blob/main/wv_scores.qmd), or [check out the HTML version](https://thescoop.org/wv_football/wv_scores.html). And the answer to the question is yes, there are a lot of blowout games in 2023, more than ever. It's not particularly close, either, but there is a wrinkle in the data: the jump in blowouts really started *last year*, when the transfer rule was still in place. This season's blowouts are, on average, greater and there are more of them (and in particular [more games with 70+ point margins!](https://datawrapper.dwcdn.net/GgR28/1/)), but it's not like it came out of nowhere.\n\nYou should [read the story by Henry Culvyhouse](https://mountainstatespotlight.org/2023/11/09/high-school-football-transfer-rule-blowouts/) that delves into how the state legislature made the change and what some of its biggest backers think now that they've seen the results.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}