<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Derek Willis</title>
<link>https://www.thescoop.org/blog.html</link>
<atom:link href="https://www.thescoop.org/blog.xml" rel="self" type="application/rss+xml"/>
<description>Academic and journalist</description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Mon, 09 Jun 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>How OpenElections Uses LLMs</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/06/09/how-openelections-uses-llms/</link>
  <description><![CDATA[ 





<p>In the 12-plus years that we’ve been turning official precinct election results into data at <a href="https://github.com/openelections">OpenElections</a>, the single biggest problem has been converting pictures of results into CSV files. Many of the precinct results files we get are image PDFs, and for those there are essentially two options: data entry or Optical Character Recognition. The former has some advantages, but not many. While most people are not great at manual repetitive tasks, you can improve with lots of practice, to the point where the results are very accurate. In the past we did pay for data entry services, and while we developed working relationships with two individuals in particular, the results almost always contained some mistakes and the cost could run into the hundreds of dollars pretty quickly. For a volunteer project, it just didn’t make sense.</p>
<p>We also used commercial OCR software, most often Able2Extract, which did pretty well, but had a harder time with PDFs that had markings or were otherwise difficult to parse. Thankfully, most election results PDFs are in one of a small handful of formats, which makes things a bit less complicated, but commercial OCR has too many restrictions.</p>
<p>For parsing image PDFs into CSV files, Google’s Gemini is my model of choice, for two main reasons. First, the results are usually very, very accurate (with a few caveats I’ll detail below), and second, Gemini’s large context window means it’s possible to work with PDF files that can be multiple MBs in size. Here are some examples using image PDFs from Texas counties of how OpenElections uses Gemini for its work.</p>
<section id="limestone-county" class="level3">
<h3 class="anchored" data-anchor-id="limestone-county">Limestone County</h3>
<p>The Limestone County file containing its 2024 general election results isn’t too bad for an image PDF:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/06/09/how-openelections-uses-llms/limestone.png" class="img-fluid figure-img" width="800"></p>
</figure>
</div>
</div>
</div>
<p>It has clear black text on a white background without markings. But two big issues make it hard for most OCR software to deal with: the two-column layout, with results from races on the left and the right; and those annoying dots between the end of candidate values and the vote totals. It’s like a delimited layout within a fixed-width layout. If you use OCR software, generally you have to draw the boxes around areas of PDFs like this in order to make the extraction results usable. <a href="https://github.com/openelections/openelections-sources-tx/blob/master/2024/general/2024%20Limestone%20County%2C%20TX%20precinct-level%20results.pdf">This PDF</a> isn’t too large at 42 pages, but that’s still a fair bit of manual labor to get the results, and even then there would be some cleanup required.</p>
<p>This is where good LLMs should be able to make a difference, because what you want is high-quality OCR results <em>and</em> the ability to provide some domain or business logic to the process without having to do it all yourself. You can see from <a href="https://aistudio.google.com/app/prompts?state=%7B%22ids%22:%5B%221vZq4hi_eCqR58TkuzqPugDcOc2kE1tms%22%5D,%22action%22:%22open%22,%22userId%22:%22112158284796315028405%22,%22resourceKeys%22:%7B%7D%7D&amp;usp=sharing">this Google Gemini session</a> that I didn’t have to provide much in the way of instructions after giving an example of the CSV output and some basic office standardization, just “The results are split into two columns on each page; parse the left column first and then the right column.”</p>
<p>How did Gemini do? Pretty well, almost perfectly. The numbers are accurate, according to some spot checks of candidate totals from <a href="https://results.texas-election.com/county">the Texas Secretary of State website</a>. It did make some formatting mistakes; removing a blank column in some of the Registered Voters and Ballots Cast rows, for example. But that’s a quick fix, and the <a href="https://github.com/openelections/openelections-data-tx/blob/master/2024/counties/20241105__tx__general__limestone__precinct.csv">finished result</a> is exactly what we need. It’s easy to be impressed, but it’s also just 42 pages and had a simple format.</p>
</section>
<section id="live-oak-county" class="level3">
<h3 class="anchored" data-anchor-id="live-oak-county">Live Oak County</h3>
<p>The PDF with results from Live Oak County comes in a common format that features a green background. But Live Oak’s image PDF is a black and white scan with different variations of shading, plus we don’t want the four columns containing percentages. For commercial OCR software, this would be a real problem thanks to the layout alone. Indeed, for electronic PDFs that are produced using the same software, we’ve got <a href="https://github.com/openelections/openelections-data-tx/blob/master/python-parsers/greenbox.py">a Python script that converts the PDF to text and parses it into a CSV file</a>. But this one is different:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/06/09/how-openelections-uses-llms/live_oak.png" class="img-fluid figure-img" width="800"></p>
</figure>
</div>
</div>
</div>
<p>The <a href="https://aistudio.google.com/app/prompts?state=%7B%22ids%22:%5B%221gLcHgzgEkJsJYe8q1FeBjR9vBy55C8gb%22%5D,%22action%22:%22open%22,%22userId%22:%22112158284796315028405%22,%22resourceKeys%22:%7B%7D%7D&amp;usp=sharing">prompt to convert this 90-page image PDF</a> is like the first one: an example tailored to the first set of results and the unusual placement of the registered voters and ballots cast figures. Gemini repeated the earlier mistake of removing a blank column from the Registered Voters and Ballots Cast rows, but otherwise was spot on in its accuracy. Here’s the <a href="https://github.com/openelections/openelections-data-tx/blob/master/2024/counties/20241105__tx__general__live_oak__precinct.csv">fixed CSV result</a>.</p>
</section>
<section id="cameron-county" class="level3">
<h3 class="anchored" data-anchor-id="cameron-county">Cameron County</h3>
<p>One of the areas where LLMs, even Gemini, can struggle with is sustained processes. Converting a few or a few dozen pages is usually pretty simple work for high-performing models, but what about hundreds of pages? <a href="https://github.com/openelections/openelections-sources-tx/blob/master/2024/general/2024%20Cameron%20County%2C%20TX%20precinct-level%20results.pdf">Cameron County’s PDF</a>, all 11.7 MB of it, offers a good challenge, and not just owing to its size:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/06/09/how-openelections-uses-llms/cameron.png" class="img-fluid figure-img" width="800"></p>
</figure>
</div>
</div>
</div>
<p>Notice how the “Precinct 16” is slightly obscured by an actual punch-hole in this document, and the same is true at the bottom of the image with “Overvotes” and “Undervotes”. Both of those issues could trip up commercial OCR engines. Providing an example of the output, as in the Limestone example, should help fill those literal holes, along with further instructions to ignore the <code>VOTE %</code> column entirely. The first attempt at parsing the 653-page PDF eventually “worked” in that it produced a CSV file. But I had to urge Gemini to “continue” multiple times, and it appeared to need more attention starting about halfway through. Most important, the vote figures in the CSV file were close, but not always correct. Back to the drawing board.</p>
<p>The <a href="https://aistudio.google.com/app/prompts?state=%7B%22ids%22:%5B%221-Wiq7tYnEC12-TOckMUja1EyUp_lJ_bQ%22%5D,%22action%22:%22open%22,%22userId%22:%22112158284796315028405%22,%22resourceKeys%22:%7B%7D%7D&amp;usp=sharing">process that generated an accurate CSV file</a> involved splitting the single PDF into multiple parts of about 100 pages each and feeding them one at a time to Gemini. That did mean copying and pasting the output, and one drawback of providing a lot of information in one session was that some of the offices didn’t get quoted properly in the CSV file (to be fair, this probably wouldn’t matter if I were using Gemini’s structured output feature). That meant a little bit of clean-up work, but again, the <a href="https://github.com/openelections/openelections-data-tx/blob/master/2024/counties/20241105__tx__general__cameron__precinct.csv">end result</a> is an accurate precinct results file in about an hour. From a 653-page image PDF, with no data entry.</p>
<p>Could other models do similar work? Probably so, especially for smaller PDFs. But there are couple of other things that make Gemini the first choice for this: its <a href="https://aistudio.google.com">AI Studio</a> UI allows me to turn the temperature down to 0 (less creativity) and, for models where the “thinking mode” is optional, the ability to disable it if the task at hand is pretty straight-forward. In the six weeks since we started working on Texas precinct results, we’ve been able to convert them for more than half of the state’s 254 counties, including many image PDFs like the ones on display here. That pace simply wouldn’t be possible with data entry or traditional OCR software.</p>
<p>Speed isn’t the most important factor here, though: accuracy is, and using LLMs still means a system of checks to ensure that the results are what the originals say they are. One step in that is taken care of by a suite of tests that run every time a new or changed CSV gets pushed to one of our data repositories. Those tests look for some formatting issues, duplicate records and basic math inconsistencies. A second step - for now manual - is verifying that multiple totals derived from the precinct CSV match the numbers in an official cumulative report <a href="https://www.co.live-oak.tx.us/upload/page/1218/2024/Entered%20By%20Bec/official%20cumulative%20results.pdf">like this one from Live Oak County</a>. A better version of that could also involve using LLMs to produce both cumulative and precinct-level data, but that would raise the possibility that a model makes similar mistakes in different documents. If you have ideas, head over to <a href="https://github.com/openelections">our GitHub organization</a> and get involved.</p>


</section>

 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/06/09/how-openelections-uses-llms/</guid>
  <pubDate>Mon, 09 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Faith in Journalism</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/06/03/faith-in-journalism/</link>
  <description><![CDATA[ 





<p>As the students drifted away from the Zoom call one-by-one, one young woman stuck around. This was during the pandemic, and who wanted to be on Zoom more than they already had to be? I was wrapping up a talk about data journalism to a group of them, and there’s a line I use about the importance of data in understanding what’s really important to people and institutions. I usually phrase it like this: “I had a pastor who said, ‘Don’t tell me what you believe. Show me your bank statement, and I’ll tell you what you believe.’”</p>
<p>I love that expression; people will tell you what’s important to them, but if you watch their behavior, and in particular how they spend their time and resources, you’ll get a very good understanding of what their priorities really are. Even if you’re not religious, you can relate.</p>
<p>When the others had left, she asked if I wouldn’t mind one more question. “You mentioned your pastor …” she started before pausing. I don’t recall her exact words, but she continued by telling me that her faith was important to her, and then asked if religious faith was compatible with journalism. It was - is - a very fair question.</p>
<p>At the root, she was asking if she would fit into a newsroom as a person of faith. Would she be forced to hide who she was in order to have professional success? Would her colleagues and editors mock her or sideline her? It was, I had to admit, a possibility. I couldn’t guarantee her that someone would think less of her because of her faith. I hadn’t been terribly open about my own faith around my colleagues, I said, but then I started to mention more of it in situations where it seemed relevant and even in casual conversation. If they thought less of me, I didn’t pick up on it. And maybe I provided a glimpse of what my own faith could mean for them. I encouraged her not to hide her faith, but to employ it as she would in any situation, as intimidating as that might seem.</p>
<p>I’m a Christian. To be more specific, I’m a member of the United Methodist Church, although I was baptized and raised in a Lutheran congregation in Pennsylvania. Like a lot of Americans, for a long time faith was not a particularly important part of my life. To my mother’s great relief, it has become much more of a factor in the past 25 years. We started regularly attending church the Sunday after 9/11 (“seems like a good time to go,” my spouse wisely said) and found the kind of community that has nurtured and challenged us. I sing in my church choir and have served on various boards and committees. I even got to deliver a message once, one of the more nerve-wracking moments of my life (and I was a rhetoric major in college).</p>
<p>But for most of that time, before and after I started to have a more active faith, I didn’t really think much about how it intersected with my professional work. I was interested in how my colleagues covered religion - at my first job, the newspaper had <a href="https://www.courant.com/obituaries/stephen-hale-gushee-hartford-west-hartford-ct/">an Episcopal priest as its religion columnist</a>, and his writing was graceful, subtle and worth reading. But most of the places I worked didn’t pay that much attention to faith, aside from covering popular figures like the Pope, denomination fights or those times when religion was invoked in political campaigns. I didn’t think about it in terms of my own faith.</p>
<p>Like other callings, journalism can be seen by its practitioners as <a href="https://www.cjr.org/faith-journalism">something of a religion itself</a>. But personal religious faith wasn’t much of a topic among my newsrooms colleagues, many of whom were young and either otherwise occupied or didn’t feel comfortable talking about it. They might not have because in many newsrooms, faith can be an uncomfortable subject. Most news organizations are secular, and some insistently so. When they do cover religion, it’s often with an eye towards the abuses committed in its name or the secrecy that often cloaks its rituals. The newsrooms I’ve been a part of weren’t places where we talked about faith a lot. But we did talk a lot about doubt. Doubt - skepticism, really - is such an elemental part of journalism that it has <a href="https://www.poynter.org/reporting-editing/2003/if-your-mother-says-she-loves-you-a-reporters-cautionary-tale/">become one of our sacred texts</a>: “Your mother says she loves you? Better check it out.”</p>
<p>Journalist Jon Ward has written about how <a href="https://www.christianitytoday.com/2022/05/christian-journalist-faith-media-religion-news/">being a political reporter made him a better Christian</a>, and I can see how that would work. My friend <a href="https://www.marshallallen.com/">Marshall Allen</a>, the former ProPublica reporter who <a href="https://www.propublica.org/article/marshall-allen-propublica-health-care-reporter-dies">died a year ago</a>, offered another view. In 2018, Marshall, who was a evangelical missionary for three years, wrote a piece about <a href="https://www.propublica.org/article/from-ministry-to-muckraking-the-biblical-basis-for-investigative-reporting">the Biblical basis for investigative reporting</a>. None of it is hollow or grasping; he describes the Gospel of Luke as a piece of warts-and-all reporting. Of truth-telling.</p>
<p>I’m convinced that being a more involved Christian has made me a better journalist and a better teacher. As Marshall wrote, there is a lot of overlap. It starts with truth, or at least what we imagine the truth to be, and then seeking out the answers that can strengthen or undermine it. There are a lot of things that I was convinced were true when I was a young man that turned out to be, at the very least, more complicated. My early religious instruction was centered around the idea that God was all-powerful and all-knowing and entirely good, and as a teenager I quickly ran into that staple of skeptical thinking: where did evil come from, then? How does it persist? My answers then were too easy. Journalism requires the same kind of process: simple explanations often fall short, and you have to pursue a deeper understanding, accepting that some parts of that understanding can remain out of reach.</p>
<p>For Christians, the ideal is Jesus, but the Bible devotes a lot of text to telling the stories of people who weren’t Jesus: people who followed him, people who he came into contact with, people who tried to argue with him and eventually, to kill him. I’m much more like those other people than I am like the son of God, despite my best efforts. That’s part of what faith means to me: not some pinnacle of perfection but a continual journey with questions, diversions and setbacks. I think of Thomas, the doubting disciple who needs to see the risen Christ before he believes (and gets a lesson in faith for his skepticism). That journey makes me a better journalist, because we’re tasked with telling the stories of people who are flawed, who are on their own journeys. And we have civic responsibilities, moral duties, too.</p>
<p>I was thinking about my own experience with faith as I responded to the young woman. Yes, faith was entirely compatible with doing journalism, I said, because the things that faith demands of us - kindness, humility, the need to seek out and encounter what is beyond us and our understanding - are important qualities in any reporter or editor. But that’s only part of it, and those alone exclude some of the vital parts of faith as I understand it. The more important question she was asking was, “Do I have to compromise my faith to be a good journalist?” I do not doubt that the answer is no, and told her so.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/06/03/faith-in-journalism/</guid>
  <pubDate>Tue, 03 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Vibe Coding for Domain Experts</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/05/24/vibe-coding-for-domain-experts/</link>
  <description><![CDATA[ 





<p>The first thing you should know about me is that I’ve been programming computers for at least two decades. The second (and more important) thing you should know is that I’m not very good at it.</p>
<p>I like to tell people that my programming skills are good enough for journalism, which is to say that I’ve never received any interest from companies that do actual software development, the kind that powers consequential systems and machines. No one should hire me to write code for a power plant or any other system that should not fail. My code is not art, either; the best that can be said about it is that it is functional. I’d be pleased if someone were to say that something I’ve written is like a Toyota Corolla: not much to look at, but it runs.</p>
<p>That’s because many of the things that I do when writing software can be considered one-offs. A lot of the time that means I need to scrape some website or, as <a href="https://jeremybowers.com/">Jeremy Bowers</a> once memorably put it, “turn strings into other strings.” If other people find them useful, great, but that’s not the main goal.</p>
<p>For those kinds of efforts, <a href="https://simonwillison.net/2025/Mar/19/vibe-coding/">vibe coding</a> comes in handy. There are a bunch of ways you can interpret the term, but I like the one Simon Willison mentions in that post: “building software with an LLM without reviewing the code it writes.” Now, I do review some of that code - and always the output of that code and tweak accordingly. But I’m mostly not looking at every line to make sure it’s how I would write it. Web scraping is a great use case for this kind of vibe coding, as is some Tidyverse code to turn some government spreadsheet into a more manageable CSV file. But there’s another case where I think vibe coding makes a ton of sense: where code meets domain expertise.</p>
<p>More than 10 years ago, Geoff Hing and I (mostly Geoff) wrote a Python library called <a href="https://github.com/openelections/clarify">Clarify</a> as part of the OpenElections project I co-founded. It does one thing: parse the XML produced by a popular election results software vendor into Python objects so that we could produce standardized CSV files of official precinct-level election results. Over several hours, and with Geoff doing most of the work, we cobbled together a useful piece of software. And then Geoff went on to <a href="https://www.themarshallproject.org/staff/geoff-hing">bigger and better things</a>, including <a href="https://pycon.blogspot.com/2025/05/2025keynotesqa.html">keynoting PyCon</a> this year!</p>
<p>Thankfully for me, that election software vendor didn’t change things too much over the next few years, and I was able to maintain the library without too much effort. But then they made some changes that broke Clarify in a few ways, and Python 2 basically went away. While I managed to come up with patches, it was never what I’d call a real programming effort. The tests that Geoff had built failed, and at one point I only had a working version on my laptop. Not great!</p>
<p>A number of states and counties still use that software vendor, though, so I needed Clarify. Recently I’ve been converting data from Texas, where more than a dozen counties use that vendor, and found myself with a duct-tape solution that involved a creaky Clarify library and a custom script that I put together over the past few years. Now, I know the XML format of the data. I know, from experience, what the actual results should look like if things work, and I’ve worked with U.S. election data long enough to confidently say that I’m kind of an expert on it. I know what Clarify should produce. And that’s where vibe coding becomes useful.</p>
<p>I fed the GitHub repository for Clarify into Claude 4 and started with a basic prompt:</p>
<blockquote class="blockquote">
<p>Evaluate this code and make any suggested changes so that it runs well on Python 3</p>
</blockquote>
<p>Claude responded:</p>
<blockquote class="blockquote">
<p>I’ll analyze the Clarify codebase and identify the necessary changes to ensure it runs well on Python 3. Looking at the code, I can see it’s already mostly Python 3 compatible, but there are several issues that need to be addressed</p>
</blockquote>
<p>Which, to be fair, is a pretty understated way of confirming what I had suspected about my own abilities. It made several suggestions, and I copied them and updated the files without looking too hard. Then I ran the tests, and it didn’t even get to the actual test methods.</p>
<p>So I put those back into Claude and basically did what it told me, and within a few minutes I had the tests working (and they were more useful in terms of output, too). Then Claude suggested improvements for the main portions of the library based on the test fixes, put the library on a more modern footing with a pyproject.toml file and fixed a bunch of Python 3 compatibility issues. I used it to parse a few of the Texas counties’ results - updating my custom script using the same process - and it worked great. So today I released <a href="https://pypi.org/project/Clarify/">version 0.7.0 of Clarify</a>, which, with apologies to Geoff, is the best version of that library yet.</p>
<p>This only worked because I know what the output is supposed to look like. Being an expert in something means you should be able to describe it really well, to ask specific questions about it and to come up with specific ideas for its improvement. An LLM will have some “ideas” about how code should work, in general, but it won’t be able to know if the objects that code produces fit within the domain of, say, Texas elections. At some point that might happen, but elections are weird. They still require human knowledge.</p>
<p>The key here is that there’s almost no way I would have spent the time to update Clarify without using an LLM for assistance. I would have limped along with a mostly working but flawed library that probably wouldn’t really work for people curious about election data but not as familiar as I am.</p>
<p>So while I agree that <a href="https://simonwillison.net/2025/Mar/11/using-llms-for-code/">LLM-assisted coding is much more than vibe coding</a>, I think there’s real utility in applying the vibe coding approach to areas where you have real domain knowledge. There are risks in doing this, for sure, but my experience has been that my subject expertise can help steer me away from bad outcomes even if I don’t understand everything the code is doing at a fine-grained level.</p>
<p>The most obvious downside of this approach for me is that I don’t improve my software development skills all that much, mostly in small increments. If I spent more of my time releasing software that a lot of people depend on, that’s a real limitation. For a lot of what I do, not as much.</p>
<p>I’ve even begun incorporating this into my teaching: for an assignment in my AI and journalism class this semester, I posted the following assignment:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/05/24/vibe-coding-for-domain-experts/vibe_coding_assignment.png" class="img-fluid figure-img"></p>
<figcaption>Vibe Coding Assignment</figcaption>
</figure>
</div>
<p>The CSV data I provided was of county-level results from the 2024 presidential election in Maryland. Most of the students had little or no experience with using LLMs in this way; they had taken a class in basic HTML &amp; CSS. But all of them were able to create a simple one-page site with some interactivity like a drop-down menu for selecting individual counties. As one student put it:</p>
<blockquote class="blockquote">
<p>I used gemini here and this worked great. Gemini automatically, without my asking, created a pretty strong data visualization showing a bar chart. The bar chart was automatically color coded and correct by the party’s assigned colors. The bar chart included the information for total votes and percent on each individual bar and the same for all the counties in the drop down menu. The page was, mostly, responsive and did pretty much all I wanted right off the bat. That was impressive.</p>
</blockquote>
<p>And another, who definitely was new to coding, added:</p>
<blockquote class="blockquote">
<p>I think that this is an incredibly beneficial thing for data journalists to master and journalists in general; although results should never be taken at face value, this made my understanding of the material more comprehensible.</p>
</blockquote>
<p>All of them had to go back and fix things. Few of them were fully satisfied with the results, but in every case the LLM did the job and gave the student a new way of doing things. Imagine what they could do in an area that they have domain expertise in. That’s the idea I want to get across to them: they may never be expert programmers, but they can still leverage what they do know to make useful things.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/05/24/vibe-coding-for-domain-experts/</guid>
  <pubDate>Sat, 24 May 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>My LLM Extraction Challenge Leaderboard Is Better Now</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/04/10/updated-llm-extraction-leaderboard/</link>
  <description><![CDATA[ 





<p>I had been staring at my <a href="https://thescoop.org/LLM-Extraction-Challenge/">Political Email Extraction Leaderboard</a> since I first published it, and was disappointed by some of the performances I found in extracting committee names from the disclaimers in fundraising messages. Some of the commercial models did worse than I expected, below 90% in some cases, and I was surprised. I should have been more skeptical.</p>
<p>Once I dug into how I was compiling my stats, I found a pretty simple mistake I made: when matching the committee names produced by LLMs to my ground truth training committees, I was doing an exact match without regard to case sensitivity. So “PA Democratic Party” would not have matched “Pa Democratic Party”. There were not a ton of those kinds of scenarios, but there were some, and as a result, the accuracy of most of the models improved, and in a way that made more sense to me.</p>
<p>Here’s what I changed, code-wise:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_csv"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> merged.columns <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_json"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> merged.columns:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the `committee` attributes match</span></span>
<span id="cb1-3">    merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_match"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_csv"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_json"</span>]</span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If columns do not exist, default to no matches</span></span>
<span id="cb1-6">    merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_match"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>to this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_csv"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> merged.columns <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_json"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> merged.columns:</span>
<span id="cb2-2">    y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_csv"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip()</span>
<span id="cb2-3">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_json"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip()</span>
<span id="cb2-4">    merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_match"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_pred</span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-6">    merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"committee_match"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>By converting the committee names entirely to lower case and calling <code>strip()</code> on them, I reduced the number of false negatives in my results. This had some visible results. For example, <a href="https://github.com/dwillis/LLM-Extraction-Challenge/blob/f9d75907e47a67ca4b692c7fd1a102af0f467430/fundraising-emails/summary_all_json.csv#L3">GPT-4o previously sat at a less-than-impressive 79.3 percent accuracy</a> and now sits at a <a href="https://github.com/dwillis/LLM-Extraction-Challenge/blob/main/fundraising-emails/summary_all_json.csv#L3">much more impressive 96.7 percent accuracy rate</a>. This makes sense, given what I understood to be GPT-4o’s capabilities, and I should have caught this problem sooner.</p>
<p>What this means is that the <a href="https://thescoop.org/LLM-Extraction-Challenge/">updated leaderboard</a> is dominated by the commercial models from OpenAI, Anthropic and Google, but Qwen2.5 and Mistral’s Small 3.1 model both scored over 90%, which is impressive in both cases. Check out the new leaders:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/04/10/updated-llm-extraction-leaderboard/updated_leaders.png" class="img-fluid figure-img" width="800"></p>
</figure>
</div>
</div>
</div>
<p>You’ll notice that I’ve added a few other columns, too. Those are the standard classification report outputs from our pal <code>scikit-learn</code>, and they provide a bit more context on each model’s performance. I’ll also be publishing soon individual classification reports for each model that go into further detail on the emails.</p>
<p>The changes to the leaderboard suggest a couple of things to me: most decent-sized models do a pretty solid job with this task, which is what I would have hoped to see. I was a little surprised to see Gemma2 models outperform Gemma3 ones here, and that’s worth digging into further to understand. The results from the Cogito models that I added recently initially puzzled me because the larger ones didn’t do much better; now that I’ve fixed the matching problem Cogito’s 70b model hit 89% accuracy, equivalent to Llama 3.3.</p>
<p>I’ve mostly abandoned testing the initial prompt I developed for this, but also have updated that leaderboard, with results that are broadly similar, but interestingly Llama 3.3 seems to have done <em>better</em> with that prompt than the newer one that I prefer. What do you see here?</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/04/10/updated-llm-extraction-leaderboard/</guid>
  <pubDate>Thu, 10 Apr 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Turning Congressional Job Listings Into Data Using LLM</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/02/28/turning-congressional-job-listings-into-data/</link>
  <description><![CDATA[ 





<p>As a former Hill reporter, some of the best never-published stories revolved around the treatment (usually, mistreatment) of congressional staff. The people who actually make Congress work mostly don’t have a lot of power and are subject to the demands, schedules and whims of the lawmakers who employ them. It’s also tough to get a real understanding of how lawmakers actually understand and value the work that their staff does. Many of them are elected for reasons unrelated to their managerial skills.</p>
<p>Aside from whispered conversations, it’s tough to get much insight into how lawmakers understand what their staff should do. That’s why the House of Representatives job listings matter. They’re one of the few public signals we get about how members think about the staff they hire. But the problem? These listings are scattered across weekly bulletins that arrive by email, buried in text and formatted just inconsistently enough to make structured analysis a pain.</p>
<section id="starting-out-as-a-pdf" class="level3">
<h3 class="anchored" data-anchor-id="starting-out-as-a-pdf">Starting Out as a PDF</h3>
<p>Each week, the House publishes a bulletin with job openings (and also internships). Some are for committee staff, some are for member offices, and they cover everything from entry-level staff assistants to senior policy advisors. Not every office posts openings there, but a good number do. The listings follow a loose format, but with plenty of quirks:</p>
<ul>
<li>Some offices spell out duties in detail; others are vague.</li>
<li>Pay transparency is rare. A few offices mention salary, but most listings leave job seekers guessing.<br>
</li>
<li>Different hiring practices. Some offices want a resume and cover letter, others use an internal portal, and a few ask applicants to email a generic address.</li>
</ul>
<p>Here’s a pretty typical example:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/02/28/turning-congressional-job-listings-into-data/house_job1.png" class="img-fluid figure-img" width="332"></p>
</figure>
</div>
</div>
</div>
<p>If you want to track hiring trends, analyze the kinds of skills offices value, or even see which members are expanding their staff, this blob of text isn’t good enough. You need structured data. - not just a weekly dump of text. That’s where the <a href="https://llm.datasette.io/en/stable/">Python library llm</a>, made by the enthusiastically productive <a href="https://simonwillison.net/">Simon Willison</a>, comes in handy.</p>
<section id="better-structure-through-llm" class="level4">
<h4 class="anchored" data-anchor-id="better-structure-through-llm">Better Structure Through LLM</h4>
<p>To make sense of the job postings, I first dumped out the text of each PDF using the <code>pdftotext</code> command-line utility. It’s a great tool that should be in every journalist’s toolbox. An example of the exported text is <a href="https://github.com/dwillis/house-jobs/blob/master/output/HVAPS_Template_Members_2025_02__24.txt">here</a> Then I consulted my friendly neighborhood Large Language Model (Claude 3.5 in this case) to assist me in writing Python code using the llm library that would parse the job listings and create structured data. I wanted to do a couple of things, but the goal was to have a process that:</p>
<ul>
<li>Splits the raw text into job listings using MEM-XXX-YY pattern.</li>
<li>Runs each listing through an LLM to extract structured fields.</li>
<li>Outputs the data into JSON for analysis.</li>
</ul>
</section>
<section id="splitting-the-text-into-job-listings" class="level4">
<h4 class="anchored" data-anchor-id="splitting-the-text-into-job-listings">Splitting the Text Into Job Listings</h4>
<p>The job bulletins are lengthy, unstructured text files, and some of them would exceed the input limits of an LLM. The first step was to break them into individual listings using <strong>regex-based chunking</strong>, using the MEM-XXX-YY pattern.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_into_job_chunks(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Split text into chunks based on MEM- pattern while keeping each job listing intact."""</span></span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split on MEM- pattern but keep the delimiter</span></span>
<span id="cb1-7">    chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'(?=MEM-)'</span>, text)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove empty chunks and strip whitespace</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [chunk.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chunks <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> chunk.strip()]</span></code></pre></div>
<p>This ensured that each <strong>MEM-XXX-YY</strong> entry remained intact, preserving all details associated with each job.</p>
</section>
<section id="extracting-key-fields-using-google-gemini" class="level4">
<h4 class="anchored" data-anchor-id="extracting-key-fields-using-google-gemini">Extracting Key Fields Using Google Gemini</h4>
<p>Once I had clean job chunks, I passed them through a structured extraction process using <a href="https://ai.google.dev/gemini-api/docs/models/gemini">Google Gemini’s Flash 2.0 model</a>. The llm library makes this very easy, thanks to a plugin that supports Gemini models. Originally I wrote <a href="https://github.com/dwillis/house-jobs/blob/master/parser.py#L35">the prompt to process each listing</a>, but then I asked Gemini to improve my prompt for me. <a href="https://github.com/dwillis/house-jobs/blob/master/parser2.py#L22-L42">It absolutely did</a>, adding not only some formatting instructions but also suggesting I pull out information about equal opportunity hiring statements in the listings:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">command <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""cat temp_chunk.txt | llm --system $'You are an expert in parsing congressional job listings from text files split into chunks. Extract job listings into a structured JSON array where each listing is an object with consistent fields. Handle the following formatting requirements: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            1. Convert any non-ASCII characters </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(including smartquotes, em-dashes, etc.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) to their closest ASCII equivalent </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            2. Normalize bullet points and list formatting into consistent structures </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            3. Maintain hierarchical relationships in nested lists </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            4. Preserve paragraph breaks in description fields </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            5. Format all dates in ISO 8601 format </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(YYYY-MM-DD</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)' </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            -m gemini-2.0-flash-exp -o json_object 1 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            $'Create a JSON array containing objects for each job listing with the following required fields: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - id: Job ID in format "MEM-XXX-YY", where XXX is the number from the listing </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(do not use literally XXX</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">). do not carry over IDs from one chunk to the next. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - position_title: Full position title </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - office: Congressional office or committee name - do not use placeholders </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - location: Primary work location </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - posting_date: Date from filename </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(format: YYYY-MM-DD</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - description: Full job description </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - responsibilities: Array of responsibilities </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - qualifications: Array of required qualifications </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - how_to_apply: Application instructions </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - salary_info: Salary information if provided </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(use null if not specified</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - contact: Contact information for applications </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - equal_opportunity: Equal opportunity statement if present </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(use null if not specified</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb2-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Do not process introductory boilerplate language or subscribe/unsubscribe sections as job listings. Format all text fields as UTF-8 strings, convert bullet points to array elements, and maintain paragraph structure in longer text fields. Remove any formatting characters while preserving the semantic structure of the content.'"""</span></span></code></pre></div>
<p>The prompt provides an example of how I wanted the JSON to look, but Simon has actually made that part better today with his <a href="https://simonwillison.net/2025/Feb/28/llm-schemas/">JSON schemas option for llm</a>. I will be using that going forward.</p>
<p>Oh, and cost? I’m cheap, so I ran this using Gemini’s 1,500 daily API calls on the free tier. Took me a few days. $0.</p>
</section>
<section id="and-now-you-have-the-data" class="level4">
<h4 class="anchored" data-anchor-id="and-now-you-have-the-data">And Now You Have the Data</h4>
<p>Running that script produced structured JSON data of the PDF version I showed above that looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MEM-085-24"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"position_title"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Staff Assistant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"office"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rep. French Hill (AR02)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"location"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Washington D.C."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"posting_date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-03-04"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Office of Rep. French Hill (AR02) seeks to fill the position of staff assistant in the Washington D.C. office.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Primary responsibilities include, but are not limited to, answering phones, processing mail, greeting visitors, processing flag and tour requests, supporting the staff’s day to day activities, various office management tasks, and assisting with long-term projects.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Arkansas ties are preferred."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"responsibilities"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Answering phones"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing mail"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Greeting visitors"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing flag and tour requests"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Supporting the staff’s day to day activities"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Various office management tasks"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assisting with long-term projects"</span></span>
<span id="cb3-16">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"qualifications"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-18">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clear communication skills for verbal and written correspondence"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-19">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A professional demeanor and a positive disposition while interacting with visitors"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ability to creatively problems solve in a fast-paced environment"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-21">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time management skills including the ability to prioritize, and track work status"</span></span>
<span id="cb3-22">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-23">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"how_to_apply"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Applicants should send their resume and cover letter to AR02.Applications@mail.house.gov, with the subject line ‘Staff Assistant’."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-24">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"salary_info"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-25">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"contact"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AR02.Applications@mail.house.gov"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-26">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"equal_opportunity"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">null</span></span>
<span id="cb3-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>There’s a lot of stuff in here, and most of it is still long-ish text. But, now I can treat sections of the job listings individually rather than as a whole. That’s important for several reasons.</p>
</section>
<section id="what-this-data-can-tell-us" class="level4">
<h4 class="anchored" data-anchor-id="what-this-data-can-tell-us">What This Data Can Tell Us</h4>
<p>With this structured data, I can analyze trends in congressional hiring, asking questions such as:</p>
<ul>
<li>Which roles are in demand?</li>
<li>Do members prioritize legislative work or communications?</li>
<li>How transparent are offices about pay?</li>
<li>How have the descriptions of roles changed over time?</li>
</ul>
<p>For job seekers, structured job listings mean better searchability — no more combing through PDFs just to find which offices are hiring. For Hill watchers, these postings offer a unique way to track how members think about staffing. Members might not put out press releases about what kind of staff they value most, but their job postings help tell the story. And with the right tools, we can read between the lines.</p>
<p>The next steps here are to collect all of these listings-as-data, remove duplicates (because many of the listings are posted for weeks) and then make it easier to compare and contrast them. Luckily, llm and other libraries from Simon will help with all of that, and in particular I’m looking forward to using <a href="https://llm.datasette.io/en/stable/embeddings/cli.html">llm’s embeddings functionality</a> to help surface similarities in listings and their features. More to come on that. In the meantime, you can find the original PDFs, text versions and JSON files at <a href="https://github.com/dwillis/house-jobs">this repository</a>. If you want to collaborate on this work or have questions, <a href="https://thescoop.org/help/">I’d love to hear from you!</a></p>


</section>
</section>

 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/02/28/turning-congressional-job-listings-into-data/</guid>
  <pubDate>Fri, 28 Feb 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>LLM Extraction Challenge: Fundraising Emails</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/</link>
  <description><![CDATA[ 





<p>What kind of sicko signs up for political fundraising emails from just about every committee? Oh, right, that’s me.</p>
<p>Sure, there’s a certain masochism to this, but I’m genuinely interested in seeing how campaigns communicate their messages to prospective donors and the distance between what they are willing to say in an email to their supporters compared to other contexts. But, as with nearly every aspect of election data, there’s a catch: the fundraising emails don’t have the same kind of unique identifiers that, say, Federal Election Commission records do. At best, they have <a href="https://www.fec.gov/help-candidates-and-committees/advertising-and-disclaimers/">FEC-mandated disclaimers</a>, but even those aren’t as useful as they could be: they use committee names rather than the unique IDs that campaign finance data relies on.</p>
<p>Here’s where I’ve turned to LLMs to help. Initially, I thought that I’d would be able to use pattern matching to identify and extract disclaimer language from emails, and to a certain degree that’s possible. Many of the emails employ similar language and put the disclaimer near the end of messages, like this one from the Pennsylvania Democratic Party:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/padem_disclaimer.png" class="img-fluid figure-img" width="246"></p>
</figure>
</div>
</div>
</div>
<p>The “Paid for by The” is a good marker for this language, but not every committee uses that exact syntax and you can imagine that there might be fundraising emails where the phrase “paid for by the taxpayers” appears in a different part of the email. The other issue is getting the name from the disclaimer - knowing when to stop, basically. Sometimes that’s easy: the entire disclaimer is “Paid for by [name of committee]” and no other nearby text. Other times the disclaimer language just keeps going:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/cedar_key_disclaimer.png" class="img-fluid figure-img" width="171"></p>
</figure>
</div>
</div>
</div>
<p>This seems like something I could train a library to detect, and that did cross my mind. But mostly I was interested in seeing both how an LLM would handle this task and whether there were differences between various models, given the same data and prompt. So I took 1,000 <a href="https://political-emails.herokuapp.com/">emails</a> from November 2024 (I get anywhere from 3-12k a month, depending on where we are in the election calendar) and identified the committee name from the disclaimer text (along with the name of the sender, which often is only in the text). Then I fed the same emails to multiple LLMs and provided the following instructions:</p>
<blockquote class="blockquote">
<p>Produce a JSON object with the following keys: ‘committee’, which is the name of the committee in the disclaimer that begins with Paid for by but does not include <code>Paid for by</code>, the committee address or the treasurer name. If no committee is present, the value of ‘committee’ should be None. Also add a key called ‘sender’, which is the name of the person, if any, mentioned as the author of the email. If there is no person named, the value is None. Do not include any other text, no yapping.</p>
</blockquote>
<p>I ran that prompt against 20 different models via Ollama, Groq and directly (Anthropic and OpenAI), and then compared the results to my original data that I extracted committee names from, using the naming style present in the email. If you’ve played around with a lot of LLMs, you won’t be surprised by the results - or maybe some of them will surprise you:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Model</th>
<th>Total Records</th>
<th>Committee Matches</th>
<th>Percent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OpenAI 4o</td>
<td>1000</td>
<td>934</td>
<td>93.4%</td>
</tr>
<tr class="even">
<td>Claude 3.5 Sonnet</td>
<td>985</td>
<td>903</td>
<td>91.7%</td>
</tr>
<tr class="odd">
<td>OpenAI 4o November</td>
<td>1000</td>
<td>858</td>
<td>85.8%</td>
</tr>
<tr class="even">
<td>Gemma2</td>
<td>495</td>
<td>403</td>
<td>81.4%</td>
</tr>
<tr class="odd">
<td>Llama 3.3</td>
<td>1000</td>
<td>802</td>
<td>80.2%</td>
</tr>
<tr class="even">
<td>Llama 3.1 8b</td>
<td>507</td>
<td>406</td>
<td>80.1%</td>
</tr>
<tr class="odd">
<td>Phi 4</td>
<td>1000</td>
<td>798</td>
<td>79.8%</td>
</tr>
<tr class="even">
<td>Gemma2 27b</td>
<td>994</td>
<td>790</td>
<td>79.5%</td>
</tr>
<tr class="odd">
<td>Claude 3.5 Haiku</td>
<td>880</td>
<td>654</td>
<td>74.3%</td>
</tr>
<tr class="even">
<td>Mixtral</td>
<td>461</td>
<td>337</td>
<td>73.1%</td>
</tr>
<tr class="odd">
<td>QwQ</td>
<td>996</td>
<td>716</td>
<td>71.9%</td>
</tr>
<tr class="even">
<td>Mistral Small</td>
<td>502</td>
<td>346</td>
<td>68.9%</td>
</tr>
<tr class="odd">
<td>DeepSeek R1 32b</td>
<td>1000</td>
<td>663</td>
<td>66.3%</td>
</tr>
<tr class="even">
<td>Starling LM</td>
<td>270</td>
<td>168</td>
<td>62.2%</td>
</tr>
<tr class="odd">
<td>EXAONE 3.5</td>
<td>960</td>
<td>582</td>
<td>60.6%</td>
</tr>
<tr class="even">
<td>InternLM2</td>
<td>992</td>
<td>574</td>
<td>57.9%</td>
</tr>
<tr class="odd">
<td>Llama 3.2 3b</td>
<td>524</td>
<td>239</td>
<td>45.6%</td>
</tr>
<tr class="even">
<td>DeepSeek R1 8b</td>
<td>781</td>
<td>296</td>
<td>37.9%</td>
</tr>
<tr class="odd">
<td>Phi 3</td>
<td>521</td>
<td>143</td>
<td>27.4%</td>
</tr>
<tr class="even">
<td>Solar Pro</td>
<td>1000</td>
<td>259</td>
<td>25.9%</td>
</tr>
</tbody>
</table>
<p>First, an explainer on what the columns mean: the total records is the number, out of 1,000 emails, where the LLM was able to generate a JSON response without raising an error. The commercial models, plus newer open source ones such as Llama 3.3, DeepSeek’s 32b version and Phi 4, were basically able to do that for all or nearly all of the records. Others struggled to get even half of them.</p>
<p>The number of committee matches represents the number of times when the LLM did produce a valid response that it correctly matched the committee in the training dataset. My own cutoff for “good enough” here is about 80 percent, meaning that in addition to the models I mentioned above, Gemma2 (27b version) gets pretty close.</p>
<p>What stands out to me here is the performance of Llama 3.3 and the drop-off for the small models (honestly, though, shout-out to InternLM2, which did kinda ok!). I recognize that the latter condition is probably open to change given some fine-tuning, of which I performed none. This is zero-shot stuff. My next steps are to do more emails and I’d love some feedback on ways to improve this process.</p>
<p>You can see the training data, the JSON files and the code used to produce them at <a href="https://github.com/dwillis/LLM-Extraction-Challenge">this repository</a>.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/</guid>
  <pubDate>Mon, 27 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The A in AI Stands for Archives</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/</link>
  <description><![CDATA[ 





<p><em>The following is based on a talk I gave at American University on Oct.&nbsp;25, 2024.</em></p>
<p>Since this is about Artificial Intelligence and Large Language Models, let me offer this initial baseline:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/llms.jpg" class="img-fluid figure-img" width="216"></p>
</figure>
</div>
</div>
</div>
<p>I need to emphasize this not just as a journalism educator but as a participant in our shared civic life. There are many, many examples of people using LLMs as reference tools, and even some <a href="https://www.perplexity.ai/">products</a> that explicitly pitch LLMs as facts-as-a-service platforms. Even with the best of intentions and all kinds of guardrails, this is risky business. That’s because fundamentally, what most LLMs do is pretty simple: they predict the next word. That’s a bit of an oversimplification, but the reality is that <a href="https://ig.ft.com/generative-ai/">probabilistic prediction</a> is a huge part of how the “generative” part of generative AI works.</p>
<p>Don’t get me wrong, this isn’t a pitch to avoid using LLMs for journalistic tasks. I teach a whole class experimenting with AI for journalism and I’m convinced that there are a number of very good use cases for applying this technology to the kind of work reporters and editors do. Instead, this is a pitch to look beyond generative AI for its own sake and towards a journalism problem that LLMs could actually help address.</p>
<p>News organizations are sitting on a trove of valuable raw materials: the words, images, audio and video that they produce every day. That’s a huge asset, but mostly those organization treat them as an afterthought. Those materials are locked away in proprietary platforms where the most advanced access is a search button, and maybe the ability to sort the results by date. Search is great, but it’s much less useful if you treat the contents as single things, which in the case of most news organizations means a blob of text. Control-F was state of the art in the previous century, and searching for information is a baseline skill at this point, not a specialty.</p>
<p>“The world has become so complicated, the growth of available information so explosive, that the journalist needs to be a filter as well as a transmitter, an organizer and interpreter as well as one who gathers and delivers facts.” <a href="https://carolinadatadesk.github.io/pmeyer/book/Chapter1.htm">Phil Meyer wrote that in 1973</a>. Think about what has changed about information since that time, and how most news organizations have failed to respond. Most news website search engines are, at best, marginally useful. Others have their best information locked away in inaccessible formats. Can you think of any other industry that treats its crucial materials so carelessly? Can you imagine it succeeding?</p>
<p>There’s so much that news organizations can and should be doing with their own archives that it can seem an insurmountable challenge. How can we begin to solve a problem that ranges from stitching together pieces of stories scattered across the pages of image PDFs to turning those stories into useful products that would help people better understand the places they live and the institutions that impact their lives?</p>
<p>One place to start is to make the materials we have - the stories, images, audio and video - better and more useful for journalists. Set aside for the moment the idea of handing AI over to consumers, since there’s already a lot of competition there, and <a href="https://reutersinstitute.politics.ox.ac.uk/digital-news-report/2024/public-attitudes-towards-use-ai-and-journalism">it’s not clear that news consumers actually want that</a>. I’d like to make the case for internal improvements via LLMs, starting with what I call structured data interviews.</p>
<p>That’s where journalists can make our archives more useful not by having AI generate a summary but by extracting important information from those blobs of text we have. There are plenty of possibilities here, but let me illustrate one of them. Nearly a decade ago, I worked on <a href="https://www.nytimes.com/2015/06/28/upshot/maiden-names-on-the-rise-again.html">a story about maiden names for The New York Times</a> along with Claire Cain Miller. Our question was whether we could find any evidence that women were keeping their names when marrying. There was some survey data on this, and some academic research using college alumni directories, but not a lot of data. I suggested that we use the wedding announcement published by The Times, knowing that those listings were not nearly representative of the American public, <a href="https://github.com/TheUpshot/nyt_weddings">not just because they were at hand</a>, but because they had a consistent format. Here’s <a href="https://www.nytimes.com/1985/10/27/style/susan-robertson-psychologist-weds.html">one from 1985</a> where the bride kept her name:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/wedding85.png" class="img-fluid figure-img" width="390"></p>
</figure>
</div>
</div>
</div>
<p>Here’s part of another, <a href="https://www.nytimes.com/2014/06/22/fashion/weddings/gabriela-herman-tyson-evans.html?unlocked_article_code=1.gE4.FsyD.NKxWBkEm0s_T&amp;smid=url-share">from 2014</a>:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/wedding14.png" class="img-fluid figure-img" width="316"></p>
</figure>
</div>
</div>
</div>
<p>Notice how similarly the two are in format, and that’s important. Nine years ago, I was able to parse these by writing some truly terrible Ruby code and then going through and checking almost all of the results. We <a href="https://www.nytimes.com/2015/06/28/upshot/about-the-maiden-name-analysis.html">limited the data we used to only selected years</a> because I didn’t have enough time to do a larger set. If I were doing this story today, I would use an LLM to extract the information I needed, and I could have done many, many more announcements. Here’s a very simple example using that 2014 announcement: I asked ChatGPT to produce a CSV file with some basic information about the wedding extracted from the text, and I didn’t bother giving it an example. <a href="https://chatgpt.com/share/4335a108-e4ff-4390-9d53-53f4b1380666">It did the job very well</a>, and without hallucinations. When we actually provide the text for an LLM to work on and specific instructions, many of them produce very good results.</p>
<p>You might be tempted to think that this is not much more than a parlor trick, but the implications are real and significant. Imagine if The Times had the detailed personal information contained in these announcements as <em>data</em>, searchable in different ways. Think of the connections it might be able to make faster, or the story ideas that would be possible that simply aren’t now. What if every newsroom that collected and published information like this, maybe about schools or businesses or sports, had that ability? Mostly, they do now, thanks to LLMs.</p>
<p>Extractive AI, as you might call it, has the potential to not just unlock things that news organizations “know” but can’t recall, but to make possible stories that otherwise would require months of time and technical skill to accomplish. And it would help news organizations take advantage of a huge, nearly unmatched resource: their own knowledge of the communities and institutions they cover. At a time when local news organizations have shed most of their institutional knowledge and often struggle to retain talented employees for more than a year or two, imagine what it could mean not just to retain that community expertise but be able to build upon it. Imagine what it could mean to be able to look at major topics informed not just by history but by the knowledge of the habits and patterns that make up hundreds or thousands of decisions and choices, both individual and collective. Imagine news organizations being able to hand a newly-minted reporter a guide to the topics she’ll cover, informed by their own coverage habits but with the ability to respond to questions.</p>
<p>None of these will come to fruition by simply applying AI, of course. We need journalists who can serve as information scientists, testing out processes and evaluating the results. We need journalists comfortable enough with what they know about how LLMs work to make good choices when using them. And we need editors and publishers willing to see not just the newest fad but the persistent value in the information that their reporters and editors collect and publish. <a href="https://thescoop.org/thefix/the-annotated-archive/">We need to value our archives</a> and the people who make use of them.</p>
<p>The good news is that, as a technical matter, much of the path is now clear. There are good, stable solutions to the problems of turning images into text and extracting meaning from that text. There are open source LLMs that are edging closer to what the commercial models can do, making it possible to avoid being locked into a particular platform or vendor. There are people and institutions willing and able to experiment. This mostly isn’t a technical problem anymore. It’s a human problem, and while AI provides assistance, it requires human guidance to understand our shared history.</p>
<p>While I was preparing for the talk at American, I was listening to an audiobook called <a href="https://www.goodreads.com/book/show/204316858-the-barn">“The Barn” by Wright Thompson</a>. It’s a history of the killing of Emmett Till in the Mississippi Delta in August 1955 that focuses on the barn where Till was tortured and murdered. That barn mostly had been written out of the “official history” of the tragedy, and the actual details of the crime are widely misunderstood or unknown, even by most residents of the Delta. The true story was hidden by the killers and, in particular, <a href="https://mississippitoday.org/2024/08/16/the-writer-and-killers-stole-the-story-of-emmett-till-from-his-mother-and-family/">a journalist who wrote a 1956 Look magazine article about the murder</a>. We now know the truth because people wrote things down and preserved them, and because others went looking. The memo that proved the lie about Till’s murder now sits in a university archive.</p>
<p>Archives are at once old and new. They are old because they are the resting place of facts and stories and ideas that only age. New because we can use them to learn more about who we are and how we got here. What people and ideas and truths we’ve clung to. How we might do better.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/</guid>
  <pubDate>Mon, 09 Dec 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>All Foreign Gifts Around Us</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/</link>
  <description><![CDATA[ 





<p>Whenever American federal officials - from the President to members of Congress and executive branch employees - meet with foreign government representatives, they often are offered gifts. Some of them are <a href="https://foreignpolicy.com/2017/04/27/eight-of-the-weirdest-gifts-foreign-dignitaries-gave-the-president/">pretty weird</a>, like crocodile insurance. Others are very pricey, such as gold medallions. Or paintings, like one given to Dwight Eisenhower from Konrad Adenauer, then the chancellor of Germany.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/three_wise_kings.jpg" class="img-fluid figure-img"></p>
<figcaption><em>Adoration of the Three Kings, ca. 1500</em></figcaption>
</figure>
</div>
<p>The reporting on these has mostly been anecdotal, either when those gifts are given during public events, or when they get recorded in a government publication long after the fact. But these foreign gifts really are data.</p>
<p>Lots of government information <em>should</em> be data, but doesn’t come in that format. Often it’s stored inside PDF files, but it’s even worse: what obviously should be structured as clean rows and columns is anything but. That leaves reporters with a series of bad options:</p>
<ul>
<li>Spending a lot of time trying to correctly copy and paste information from one format to another</li>
<li>Literally re-typing stuff that has already been typed!</li>
<li>Limiting reporting to anecdotes, not data</li>
<li>Regular expressions! (<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">Now you have two problems</a>)</li>
</ul>
<p>The worst part is that you can see how this information should be structured. Getting there is another matter.</p>
<p>For example, a page like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/original.png" class="img-fluid figure-img"></p>
<figcaption><em>Original</em></figcaption>
</figure>
</div>
<p>Clearly this is structured information, but the fact that the text wraps over to multiple lines and columns often contain multiple pieces of information is a problem. There is a solution!</p>
<section id="a-large-language-model-solution" class="level2">
<h2 class="anchored" data-anchor-id="a-large-language-model-solution">A Large Language Model Solution</h2>
<p>One thing that most LLMs are pretty good at is taking information in one context and putting it into another one. That includes translation, switching language style/meter/tone and even reproducing original text in another voice (try this with Dr.&nbsp;Seuss!). That ability extends to restructuring data like the file from above. Given the proper prompts and source material, an LLM should be able to produce something like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/extracted_output.png" class="img-fluid figure-img"></p>
<figcaption><em>Extracted</em></figcaption>
</figure>
</div>
<p>That’s a JSON file, which is a common format for storing data on the Web. It’s like a spreadsheet but more flexible.</p>
<p>You <em>can</em> try and upload a PDF directly to an LLM - a lot of them will be able to handle that well - but I encourage you to get as close to a text version of the PDF as possible, preserving the layout as much as you can. There are various ways you can do this; I used a command-line utility called <code>pdftotext</code> to convert a PDF to plain text. A typical command would look like this:</p>
<p><code>pdftotext -layout 2024-03129.pdf</code></p>
<p>That would produce a text file called <code>2024-03129.txt</code> that looks like <a href="https://github.com/dwillis/all-foreign-gifts-around-us/blob/main/text/2024-03129.txt">this</a>.</p>
<p>That text is what you want to provide to an LLM. For this task I chose Claude, specifically the Claude 3 Sonnet model. It costs $20 a month if you want file uploads and other goodies, but you also should be able to paste text into the chat window or API playground. If you have a single PDF, you might want to go that route. If you have multiple PDFs, you probably want to do this programatically using the API. But don’t worry about that yet - we’re just trying to do one file successfully.</p>
</section>
<section id="the-prompt" class="level2">
<h2 class="anchored" data-anchor-id="the-prompt">The Prompt</h2>
<p>Having the original file as text is necessary for this task, but it’s not sufficient. You need to be able to describe to an LLM what you want it to do. That’s where reporters should be able to shine: we may not know the answer, but we know the questions. When you are crafting a prompt, you’re asking a question (even if you don’t phrase it that way).</p>
<p>Most LLMs have two types of prompts: a <code>system</code> prompt and a <code>user</code> prompt. You should think about the former as a set of rules that will apply to everything you want an LLM to do. For example, if you only want it to produce a CSV file, put that in the system prompt. Here’s my system prompt for this task:</p>
<p><code>create only valid JSON objects based on the provided text and example. Never include any additional text or explanation. Always use double-quotes for every key and value. No yapping, no hallucinations.</code></p>
<p>You want to use simple, direct language here, words like “only”, “never” and “always” are good. The final phrase - “no yapping” is something that most LLMs will recognize as an instruction to cut down on wordiness like the narration they often provide. “No hallucinations” may not always work, but it doesn’t hurt to include.</p>
<p>I’m almost ready to describe the specific task, but first I want to talk about the importance of providing examples, especially when restructuring information. Think of it this way: you’re giving it a before example (the original text) and an after example (the structure you want). That will help guide the LLMs work. Example outputs are really, really helpful. Here’s what I provided in my prompt:</p>
<pre><code>example_json = {
                "name_and_title": "name and title of the recipient",
                "gift_description": "the gift",
                "received": "the date received in yyyy-mm-dd format",
                "estimated_value": "the dollar value only, no dollar sign",
                "disposition": "the disposition of the gift, not including 'Disposition-'",
                "foreign_donor": "name and title of foreign donor",
                "circumstances": "why the gift was accepted"
            }</code></pre>
<p>You’ll notice that most of these are descriptive, not literal examples. You should try either approach; this one is a mix of the two. The balance is being general enough that the LLM can recognize the overall pattern and specific enough that it doesn’t give you additional information you don’t want.</p>
<p>Finally, here’s my user prompt:</p>
<p><code>Extract all Tangible Gifts contained in the following text into individual JSON objects based on this example: {example} {text}</code></p>
<p>Each time I insert the example and the text of the PDF I’m working with.</p>
</section>
<section id="it-works-mostly" class="level2">
<h2 class="anchored" data-anchor-id="it-works-mostly">It Works! (Mostly)</h2>
<p>Mostly, this approach worked for me, but sometimes Claude ignored my instructions by giving me introductory text like <code>Here are the JSON objects for the Tangible Gifts extracted from the provided text:</code> before listing the data. I spent time trying to tweak the prompts to get it not to do this, but couldn’t prevent it all the time. In the end, I declared victory and removed the extra text manually. It’s not perfect, but it saved me a LOT of time.</p>
<p>How do I know it (mostly) worked? I conducted spot-checks on every file, comparing the results to originals. Consider this the fact-checking portion of the reporting process. It’s very easy to be so impressed by an LLM’s abilities that you implicitly trust its output. DON’T DO THIS. Trust your reporter instincts, not a machine, and verify.</p>
<p>I ended up doing a couple of more extraction tasks on the JSON it produced so that I could have more granular data (separate names and titles, for example). In all, it took me a few hours and cost about $10 to do this via Claude’s API - most of that was tweaking the prompt to get better results. Here’s what the final product looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/final_output.png" class="img-fluid figure-img"></p>
<figcaption><em>Final output</em></figcaption>
</figure>
</div>
<p>The actual data file is <a href="https://raw.githubusercontent.com/dwillis/all-foreign-gifts-around-us/main/combined_json_with_both_names.json">here</a>. Next year, when the federal government publishes its latest update of these gifts, I can grab that PDF, turn it into text and extract the data. It might take me 10 minutes to clean things up, and then I’ll have even more data. You can see all of the scripts and data <a href="https://github.com/dwillis/all-foreign-gifts-around-us">here</a>.</p>
<p>You may not need a full pipeline like this. You might just need to work on a single PDF or text file. Don’t let that stop you from trying out these tools. Find the process that works for you. Oh, and the title of this post and my repository? Yeah, that’s <a href="https://www.youtube.com/watch?v=2mURti-s0jc">intentional</a>. Consider it my gift to you.</p>


</section>

 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/</guid>
  <pubDate>Sat, 22 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I Mostly Don’t Use AI for Campaign Finance … Yet</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/06/20/ai-campaign-finance/</link>
  <description><![CDATA[ 





<p>If there’s anything that I’ve developed an expertise in in the past 25 years, it’s campaign finance data. And if there’s anything I’ve been really into during the past year, it’s large language models (LLMs). You might think this is a story about how I’ve combined the two.</p>
<p>But it’s not, because mostly I don’t, and I’d like to explain why.</p>
<p>Because most campaign finance data is structured - in rows and columns - some of the tasks that LLMs are most impressive at doing don’t necessarily apply here. I’m thinking of extracting information based on patterns or reasoning, or summarizing text. Yes, LLMs can do math; they are built atop math! But when I had students in my AI class this spring have LLMs do data analysis by uploading structured data and asking systems to do typical tasks such as counting rows or grouping things, most of them struggled to do so consistently.</p>
<p>To be fair, this was done using the Web interfaces to these LLMs, not via APIs where a user has more control. But among the tasks students tried was getting the LLM to count the number of rows that met a certain criteria (filtering, essentially) and some other pretty low-level data analysis tasks. They were not impressed.</p>
<p>To further illustrate this, let me turn to campaign finance data. One of the big challenges at the federal level is the standardization of donors, campaign vendors and the purposes of spending, among other things. There are organizations who do great work on standardizing donors - OpenSecrets is the big name in this field - and there are folks like Adam Bonica at Stanford who write software to standardize donors using machine learning. There’s <em>some</em> artificial intelligence in that, but it’s not what most people think about when they talk about AI these days.</p>
<p>Instead, they might think of a task like this: taking the expenditures of a Federal Election Commission filing like <a href="https://projects.propublica.org/itemizer/filing/1788518/schedule/sb">this one from the North Dakota Republican Party</a> and categorizing the purposes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/20/ai-campaign-finance/nd_gop.png" class="img-fluid figure-img"></p>
<figcaption>North Dakota GOP spending</figcaption>
</figure>
</div>
<p>Standardization is bread-and-butter stuff for data journalism. The mostly true joke is that people who work with data spend 70 percent of their time just getting the data into a shape where you can actually do a reliable analysis (it’s probably more like 80 percent). The late, great, Sara Fritz and Dwight Morris spent months doing this for <a href="https://www.google.com/books/edition/Handbook_of_Campaign_Spending/UcgZAQAAIAAJ?hl=en">their book on spending in the 1990 congressional elections</a>. It was a Herculean effort, so much so that Morris stopped doing it after a couple of elections.</p>
<p>LLMs should be pretty solid at this task, right? Well, maybe. This is much more of a traditional machine learning job in the sense that you’d train a dataset and then use that to help standardize additional records. Tossing some records into an LLM and seeing what happens seems like it might work, so I gave it a try. You can see the results, using ChatGPT’s 4o model, <a href="https://chatgpt.com/share/aab0ab55-e472-4a38-a567-3761fb6bd09e">here</a>. It mostly did not work.</p>
<p>The good news is that ChatGPT will do actual data analysis using common Python tools like pandas if you give it a CSV file. It’ll show you the code it produced to do that, too. All potentially useful stuff, and crucially that kind of start gives it a bit of credibility (or is it authority?) for many users. Until you look at what it’s actually doing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the unique purposes</span></span>
<span id="cb1-2">unique_purposes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purpose'</span>].unique()</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a DataFrame with the unique purposes and a column for standardized names</span></span>
<span id="cb1-5">standardized_purposes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(unique_purposes, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_purpose'</span>])</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For demonstration purposes, we'll standardize the names manually</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In a real-world scenario, this would likely involve more complex logic or a lookup table</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to standardize purpose descriptions</span></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> standardize_purpose(purpose):</span>
<span id="cb1-12">    purpose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> purpose.lower()</span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transfer'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transfer'</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insurance'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Insurance'</span></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'legal'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Legal Consulting'</span></span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'printing'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'postage'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Printing/Postage'</span></span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'payroll'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Payroll'</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Other'</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the standardization function</span></span>
<span id="cb1-27">standardized_purposes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'standardized_purpose'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> standardized_purposes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_purpose'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(standardize_purpose)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the standardized purposes to a new CSV file</span></span>
<span id="cb1-30">output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/mnt/data/standardized_purposes.csv'</span></span>
<span id="cb1-31">standardized_purposes.to_csv(output_path, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ace_tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> tools.display_dataframe_to_user(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standardized Purposes"</span>, dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>standardized_purposes)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb1-36">standardized_purposes.head()</span></code></pre></div>
</div>
<p>Did you catch the “in a real-world scenario” comment? Nothing like a machine downgrading the legitimacy of your work tasks to make you feel good about the future, I say.</p>
<p>This is a little bit of a contrived exercise because had I wanted to do this with a large amount of data I would have needed an approach that goes beyond shoving a CSV file into a Web chat interface. Even so, the choices the demonstration code makes are … interesting. It correctly puts <code>printing</code> and <code>postage</code> together in a category, but absent any human guidance it basically gives up after five categories.</p>
<p>Given a more robust and defined programatic effort, I’m confident that the results would be different. But at that point I’m probably better off training a bunch of data; if I want to incorporate LLMs I guess I could make one that does the job once I’ve told it how to.</p>
<p>I do think there are some potential uses of LLMs in the campaign finance universe that I’d like to explore further. Something involving the text of F99 filings that committees use to explain their reports to the FEC, perhaps. Maybe to help design different approaches to analysis. Or - and this is the idea that I currently favor - taking all of the various things I’ve ever said or written about campaign finance and making it into a useful guide for other folks.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/06/20/ai-campaign-finance/</guid>
  <pubDate>Thu, 20 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Lessons from Teaching a Journalism Class on AI</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/</link>
  <description><![CDATA[ 





<p>I called it my “running with scissors” class, because after I offered to teach a course on using artificial intelligence for journalism, the thought dawned on me that I had very little idea how to actually design and teach such a class.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/scissors.png" class="img-fluid figure-img" width="400"></p>
<figcaption><em>Running with scissors, a terrible image from DALL-E</em></figcaption>
</figure>
</div>
<p>Here’s what I eventually settled on: give students access to various AI services - ChatGPT, Claude, Gemini and other LLMs - and then ask them to apply them to specific journalism-related tasks. These tasks included some of the most fundamental journalism processes, including:</p>
<ul>
<li>coming up with story ideas</li>
<li>trying to figure out what kinds of people to talk to</li>
<li>finding key ideas in a document or report</li>
<li>editing text</li>
<li>generating headlines or social media copy</li>
</ul>
<p>The list of tasks also touched on some jobs that LLMs are pretty good at: extracting structured data from unstructured text, converting one story format to another and describing the elements of an image or video.</p>
<p>For each task, I gave students a template for documenting their work. For example, one task was uploading a document to an LLM and asking it to summarize it in a way that would be useful for finding a story. We had team and individual exercises, but they used the same basic template, and as the semester went on I asked them to use multiple large language models in their tasks. They needed to describe their process in doing so. Here’s an example of a template:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/summary_doc.png" class="img-fluid figure-img"></p>
<figcaption><em>Basic template</em></figcaption>
</figure>
</div>
<p>The key part - the part that was worth the most - was asking them to evaluate the results and reflect on how useful this process was. This got them thinking about their expectations versus the reality of generated text and images, so that they could compare the two. Students may not be experts on how AI works, but they are smart enough to judge output compared to expectations and will learn from their processes. Early on, I also had some students do the same task without any computer technology at all - Team Luddite. Here’s one of the evaluations from a task on generating follow-up story ideas from an existing story:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/sample_eval.png" class="img-fluid figure-img"></p>
<figcaption><em>Sample evaluation</em></figcaption>
</figure>
</div>
<p>These evaluations were key to students gaining an understanding of what LLMs can do (and what they should not be used for). Repeated conversations with LLMs help them to ask better questions, which is kind of the whole point of doing journalism in the first place. Chat interfaces seem “neutral” but the back and forth of the conversation reveals some habits, and knowing those is critical for both asking the right questions and understanding the responses.</p>
<p>Most of the students started out with either a degree of enthusiasm about the abilities of LLMs or a pretty skeptical take on their usefulness. Many of them assumed that the confidence displayed by LLMs in their responses was justified. They all learned to be less deferential in their prompts, which is what I wanted.</p>
<p>The journalism implications of some of these tasks were pretty profound. For example, one assignment had students ask LLMs to examine images and describe their details. Without getting all “Columbo” here, looking for telling items in images is a pretty arduous manual task for humans, and not all of us are very good at it. Accurate assistance for tasks like this at scale would make a lot of things possible for newsrooms, especially smaller newsrooms.</p>
<p>The running with scissors theme was the right one: I repeatedly had to change or add things. One week we used AI to describe the visual elements of videos, noting that doing that meant stripping out any audio. When we met <em>two days later</em>, the tool we used (Google’s Gemini) had changed so that it retained the audio and you could ask questions of it. More than any other class, this one demanded that I keep up because new things are happening all the time, and in particular LLMs are getting new capabilities. When I teach it again next spring, my scissors will likely be a different size (and maybe shape), but there will be a lot of unknowns again.</p>
<p>The major assignments for this class were two guides based on their evaluations: each student picked an existing news organization and wrote a guide describing three ways that organization might use AI in a responsible manner. The second guide, a group project, is a deep dive on a specific task like editing for style or summarizing PDFs. I’ll share more takeaways from those projects in future posts.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/</guid>
  <pubDate>Mon, 03 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Better Way to Process Mississippi Precinct Results</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/</link>
  <description><![CDATA[ 





<p>When it comes to turning official precinct election results into data, there are few states like Mississippi.</p>
<p>The Magnolia State isn’t like New York, where there’s no centralized statewide reporting system for precinct results (not yet, at least). But the 82 counties in Mississippi participate in a frustrating system: they produce a precinct report in the same electronic format, then print out that document, have county election officials sign it and then send it to the Secretary of State in Jackson, where it gets scanned into a PDF and <a href="https://sos.ms.gov/elections/electionresults_aspx/elections_results_2023_countyG.aspx">posted on the SOS site</a>. Here’s what one looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/panola_precinct.png" class="img-fluid figure-img"></p>
<figcaption>Panola results</figcaption>
</figure>
</div>
<p>That means that to turn what obviously are tables into actual data, you need to choose one of two options: data entry or OCR, where software extracts the values. In a better world, the electronic versions get posted somewhere so that OCR isn’t needed, but we don’t live in that world and it’s unlikely we will anytime soon. As part of my work with OpenElections, I’ve mostly relied on data entry, which has its own issues and can cost significant amounts of money. For a state like Mississippi, we’re talking about more than 50,000 rows of data for a statewide general election, which easily will run into four figures (and usually leads to transcription mistakes).</p>
<p>That leaves OCR. But there’s an additional wrinkle with Mississippi’s results reports, and that’s those vertical headers for the names of the precincts. Some OCR software will struggle to handle those, meaning that often you’ll need to restrict the OCR process to portions of each page. That’s on top of just how difficult OCR can be on documents with unusual marks. For Mississippi, our recent process for turning these documents into data has been some OCR and some data entry, and a lot of time. In most cases, it takes months for OpenElections to post a statewide precinct results file.</p>
<p>Today, after less than a month of off-and-on work, OpenElections posted <a href="https://github.com/openelections/openelections-data-ms/blob/master/2023/20231107__ms__general__precinct.csv">a statewide precinct results file from the November 2023 general election</a>. It’s the earliest we’ve done this, and this file is the most accurate one we’ve ever produced. Here’s why: we switched to using Amazon Web Service’s <a href="https://docs.aws.amazon.com/textract/latest/dg/what-is.html">Textract</a>, which identifies and extracts text and numbers from document images like PDFs. There are very good OCR software programs out there, but what Textract does very well is identify tables and extract just those, ignoring information that might make it harder to process the document and produce a clean result. The accuracy of its text extraction is remarkable, even compared to popular software like tesseract.</p>
<p>AWS can be a bit of nightmare to start using - the documentation often appears to be written by people who <em>only</em> use Amazon’s offerings and services like Textract are mostly designed for large-scale bulk processing, which can make demos harder than they need to be. But for the quality of the output, it’s worth the effort. For the Mississippi results, we used Python, and in particular the <a href="https://github.com/aws-samples/amazon-textract-textractor">Textractor library</a> written by the AWS folks. It has a straightforward API and while it assumes that your documents are already located on S3, the cost of having them there is trivial for most jobs.</p>
<p>Here’s one way to approach the Mississippi precinct results: put the 82 PDF files in an S3 bucket (I mirrored them locally just so I could easily compare the original and results). After installing the Textractor library - I used the PDF option -, use Textract’s TABLES feature to have it perform OCR on each document, isolate the tables and then export each document’s table to an Excel file, with each table on a separate sheet in the file. Here’s what that script might look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> textractor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Textractor</span>
<span id="cb1-3"></span>
<span id="cb1-4">extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Textractor(profile_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span>)</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> textractor.data.constants <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TextractFeatures</span>
<span id="cb1-6"></span>
<span id="cb1-7">folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/local/folder"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> root, dirs, files <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.walk(folder_path):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> file_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_name.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".pdf"</span>):</span>
<span id="cb1-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Panola.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yazoo.pdf'</span>]:</span>
<span id="cb1-13">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_name)</span>
<span id="cb1-14">                document <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extractor.start_document_analysis(</span>
<span id="cb1-15">                    file_source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"s3://S3BUCKET/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-16">                    features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[TextractFeatures.TABLES]</span>
<span id="cb1-17">                )</span>
<span id="cb1-18">                document.export_tables_to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>folder_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span></code></pre></div>
</div>
<p>Check that screenshot of results from Panola County from above. Here’s what they look like in Excel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/panola_excel.png" class="img-fluid figure-img"></p>
<figcaption>Panola results in Excel</figcaption>
</figure>
</div>
<p>Now, this isn’t perfect. Those vertically-oriented headers with the precinct names aren’t there; Textract, like most OCR software, just doesn’t deal with them, although they also don’t ruin the OCR job, either. The candidate name and party are slapped together, as they are in the original document. But the table of results is pristine. In processing all 82 counties, I found 3 instances where Textract didn’t get the votes right, and those were due to either a stray mark on the original document or because the PDF’s orientation was uneven. Processing all 82 files took less than an hour, and cost less than $50. Let me repeat that: it cost less than $50 to produce high-quality vote totals for every county in the state.</p>
<p>Textract doesn’t only produce Excel files; you can extract tables as text and work with that data programmatically, too. Since this was the first time I was working with it using the Mississippi files, I wanted to see the results. It worked best for pages where every precinct had a numeric value; for those with “X” - indicating that the contest was not on the ballot in that precinct - Textract sometimes didn’t extract the X but did leave the value blank. But in terms of overall performance I’m sold, and will be using it for similar work going forward.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/</guid>
  <pubDate>Sat, 27 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing Women’s College Volleyball Roster Data</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/12/25/womens-volleyball-roster-data/</link>
  <description><![CDATA[ 





<p>Last year some students of mine at Maryland and I worked to produce a comprehensive set of <a href="https://github.com/Sports-Roster-Data/womens-college-basketball">data on women’s college basketball rosters</a>, and while that process involved a lot of manual effort on top of a base of Python scrapers, it also got me thinking: how hard would it be to extend that system to other sports? As it turns out, it wasn’t that hard, which is why today I’m happy to announce the release of <a href="https://github.com/Sports-Roster-Data/womens-volleyball">comprehensive roster data for women’s college volleyball</a> for the 2023 season.</p>
<p>There are more women playing volleyball than basketball at the college level, thanks to teams that are slightly larger than many basketball teams and the proliferation of teams. We’ve collected more than 920 teams’ rosters, accounting for more than 15,800 players. Texas and Ohio provide the most players per capita, which was somewhat surprising to me given that Texas has so many people. It also has a lot of colleges that play volleyball. Alexa Henry, a graduate student at UMD, spent some time digging into this data and found that Texas is a leading exporter of players, too: even though the state has 49 NCAA volleyball teams, more than 1,630 Texans are on rosters across the nation. At an average of 17 players on each team, Texas players alone could populate nearly 96 entire teams.</p>
<p>The first step in collecting this data was to take the <a href="https://github.com/dwillis/wbb/blob/master/ncaa/rosters.py">Python scrapers</a> I wrote for basketball rosters and point them towards volleyball rosters. Most universities use the same software for all of their teams, so it was mostly a matter of developing <a href="https://github.com/Sports-Roster-Data/womens-volleyball/blob/main/teams.json">a list of team URLs</a>. The first time I ran the <a href="https://github.com/Sports-Roster-Data/womens-volleyball/blob/main/rosters.py">volleyball scrapers</a> they yielded nearly 12,000 players, which I estimated to be about 80 percent of the total number. I made one big change to help retrieve the remainder: incorporating Simon Willison’s excellent <a href="https://shot-scraper.datasette.io/en/stable/">shot-scraper library</a>.</p>
<p>Ostensibly a tool for taking automated screenshots, shot-scraper also (as its name suggests) has a useful ability to scrape websites, and in particular ones where JavaScript makes traditional scraping more annoying. College roster pages are a good example of this, because they often fetch JSON after page load. That doesn’t mean you can’t use the traditional requests + BeautifulSoup pattern, but with shot-scraper you can execute JavaScript against the page, and that comes in very handy.</p>
<p>Here’s an example: the <a href="https://sjsuspartans.com/sports/womens-volleyball/roster">San Jose State roster</a>. It’s a fairly typical example of what college team roster pages look like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/12/25/womens-volleyball-roster-data/san_jose_roster.png" class="img-fluid figure-img"></p>
<figcaption>San Jose State roster</figcaption>
</figure>
</div>
<p>What we want from this page is a JSON array of player objects based on the HTML attributes in the source. Skipping HTML parsing and heading straight to grabbing objects from the DOM makes things easier. Given access to the page, here’s the JavaScript that does it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster__players .roster-card-item'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> el <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb1-2">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-card-item__title-link'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-player-card-profile-field__value'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-player-card-profile-field__value'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-card-item__position'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> hometown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-player-card-profile-field__value--hometown"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">     hs_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-player-card-profile-field__value--school"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> high_school <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hs_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> hs_el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">     ps_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-player-card-profile-field__value--previous_school"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> previous_school <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ps_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> ps_el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> jersey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-card-item__jersey-number"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'href'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">     <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> hometown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> high_school<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> previous_school<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> jersey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> url}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    })</span></code></pre></div>
<script type="text/javascript">
Array.from(document.querySelectorAll('.roster__players .roster-card-item'), el => {
     const id = '';
     const name = el.querySelector('.roster-card-item__title-link').innerText;
     const year = el.querySelectorAll('.roster-player-card-profile-field__value')[1].innerText;
     const height = el.querySelectorAll('.roster-player-card-profile-field__value')[0].innerText;
     const position = el.querySelector('.roster-card-item__position').innerText;
     const hometown = el.querySelector(".roster-player-card-profile-field__value--hometown").innerText;
     hs_el = el.querySelector(".roster-player-card-profile-field__value--school");
     const high_school = hs_el ? hs_el.innerText : '';
     ps_el = el.querySelector(".roster-player-card-profile-field__value--previous_school");
     const previous_school = ps_el ? ps_el.innerText : '';
     const jersey = el.querySelector(".roster-card-item__jersey-number").innerText;
     const url = el.querySelector("a")['href'];
     return {id, name, year, hometown, high_school, previous_school, height, position, jersey, url};
    })
</script>
</div>
<p>That, plus a little post-processing, produces an array that looks like this (this version is truncated):</p>
<pre><code>[{'id': '', 'name': 'Jiana Lawson', 'year': 'Senior', 'hometown': 'Tucson, Ariz.', 'high_school': 'Catalina Foothills HS', 'previous_school': '', 'height': '5′10″', 'position': 'MB', 'jersey': '#1', 'url': 'https://sjsuspartans.com/sports/womens-volleyball/roster/season/2023/player/jiana-lawson', 'team_id': 630, 'team': 'San Jose State', 'season': '2023'}, {'id': '', 'name': 'Brooke Bryant', 'year': 'Junior', 'hometown': 'Irvine, Calif.', 'high_school': 'Santa Margarita HS', 'previous_school': '', 'height': '5′11″', 'position': 'RS', 'jersey': '#2', 'url': 'https://sjsuspartans.com/sports/womens-volleyball/roster/season/2023/player/brooke-bryant', 'team_id': 630, 'team': 'San Jose State', 'season': '2023'}]</code></pre>
<p>The function for San Jose State is <a href="https://github.com/Sports-Roster-Data/womens-volleyball/blob/main/rosters.py#L296-L318">here</a>. It’s not fancy, but it doesn’t need to be. The good news is that shot-scraper can accept pretty much any JavaScript: a ternary operator, string functions, etc. The bad news is that some of these sites have so much JavaScript running on them that it can get a little fussy.</p>
<p>This doesn’t make scraping one-click simple, a task that AI will probably hasten in most cases. But it does reduce the amount of time I spend wrestling with weird HTML and JS interactions, and it has made it possible for me to gather even more teams’ rosters, cutting down on the manual work needed for this effort. It allows me to ask: what other sports can I collect rosters from?</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/12/25/womens-volleyball-roster-data/</guid>
  <pubDate>Mon, 25 Dec 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Using AI to Parse Election Results</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/</link>
  <description><![CDATA[ 





<p>If there’s one state that justifies the need for OpenElections, it’s Mississippi. Unlike some other states that don’t have a centralized election results system, Mississippi does. Each of the state’s 82 counties uses the same form to report official results to the Secretary of State. But that form is quite a thing in terms of organization:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/ms_statewide.png" class="img-fluid figure-img"></p>
<figcaption>Statewide Results</figcaption>
</figure>
</div>
<p>There’s a lot going on here, but the lowlights, from a parsing perspective, start with the counties displayed as vertical column names, followed by the combination of candidate name and party in the same box. Those vertical headers make parsing more complicated; you can extract the text from this file, but very few programs will preserve the layout of those counties. <a href="https://sos.ms.gov/elections/electionresults/2023General/State%20Certified%20Results/2023%20Statewide%20Recapitulation%20Sheet.pdf">This is an electronic PDF</a>, so you can usually export it to a spreadsheet that you’ll then spend time reformatting. Depending on the election, a lot of time.</p>
<p>This is a very good candidate for AI services because we have a consistent (if not totally logical) structure to the document and we know what the output should look like: in this case, a CSV file with one row per candidate results. That means that a parsed file should look something like this:</p>
<pre><code>county,office,district,party,candidate,votes
Adams,Governor,,Dem,Brandon Presley,5782
Adams,Governor,,Rep,Tate Reeves,3516
Adams,Governor,,Ind,Gwendolyn Gray,130
Adams,Lieutenant Governor,,Dem,D. Ryan Grover,5111
Adams,Lieutenant Governor,,Rep,Delbert Hosemann,4101
Adams,Secretary of State,,Dem,Ty Pinkins,5162
Adams,Secretary of State,,Rep,Michael Watson,4058</code></pre>
<p>I first reached for Claude.ai from the folks at Anthropic, mostly because it handed file uploads slightly before OpenAI added that as a ChatGPT feature. It didn’t start out well, though:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/claude_01.png" class="img-fluid figure-img"></p>
<figcaption>What file?</figcaption>
</figure>
</div>
<p>Eventually it told me that the PDF was copyrighted material (it is not, being a government work in the public domain). After I told Claude that, it was happy to do the job.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/claude_02.png" class="img-fluid figure-img"></p>
<figcaption>It’s a start</figcaption>
</figure>
</div>
<p>Well, happy to <em>start</em> the job is more accurate. It’s an annoying thing to deal with a service that takes the instructions but then … doesn’t actually finish the job? Consider it another lesson in prompt editing: I had to tell it to make sure to do all of the counties and candidates. Even so, Claude’s UI means that it spits out the results to the screen, and there seems to be a limit on how much it can produce at one go, so I had to break up the conversion into multiple groups of counties. Still, in the end it worked - at least for the statewide offices I wanted, the ones with a result in every county.</p>
<p>For state legislative elections, Mississippi uses the same county grid format but puts an “X” in a county where the candidate wasn’t actually on the ballot. That means that if a state legislator only represented one county, she’d have one row with some number of votes and 81 with an “X” for the votes. For whatever reason, that confused both Claude and ChatGPT, in the sense that both were not able to produce the kind of file I wanted. Here’s what I asked Claude to do with state senate results:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/claude_03.png" class="img-fluid figure-img"></p>
<figcaption>Looks ok…</figcaption>
</figure>
</div>
<p>Looks ok, but since the example used Adams County, the first “result” shows that, too, even though District 1 is in DeSoto County. This is one of the times when AI-generated results look authoritative but are completely wrong.</p>
<p>I tried ChatGPT-4, which has a couple of features I like when it comes to this sort of task: it narrates its processes and provides a link to a downloadable file for the results (which also has the effect of making the results a surprise):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/chatgpt_01.png" class="img-fluid figure-img"></p>
<figcaption>Narration</figcaption>
</figure>
</div>
<p>Eventually it was able to do better than Claude at parsing state senate results (like Claude, I had to tell it to do all of the candidates), but had issues with state house results: the CSV files it produced looked good but placed results in the wrong counties. Eventually I saved the state house results as an Excel file and reworked that using R. You can see <a href="https://github.com/openelections/openelections-data-ms/blob/master/2023/20231107__ms__general__county.csv">the final result on GitHub</a>. In total, this took me a couple of hours, mostly spent experimenting with the correct prompt wording. Going forward it should take less time to do, and I have some ideas for tackling the state house results, too.</p>
<p>There are tradeoffs here, of course. OpenElections used to sometimes pay folks for data entry services, and some of them were quite good at the job, paying attention to every detail, asking useful questions that helped to understand what we were working with, that sort of thing. AI’s strengths are enough to make that a less attractive option, even if we’re paying $20 a month for a service or using an API. It costs less and takes less time in most cases. There is still a need for human oversight of these processes - ChatGPT’s struggles with state legislative results is the most glaring example - but I suspect even those pitfalls can be lessened or eliminated, and with them the obvious need for people in the loop.</p>
<p>There should still be people in the loop, if only because the raw materials here - those PDFs published by the state - are the result of a human-designed process that has quirks that are much easier for humans to understand. Perhaps in an ideal scenario, the results are produced in a format that software can understand. But that’s not the world we live in, and we’ll need people who can help translate between the human systems and the digital ones.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/</guid>
  <pubDate>Sat, 25 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>West Virginia High School Football Blowouts</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/11/13/wv-football-blowouts/</link>
  <description><![CDATA[ 





<p>It has been a long time since I covered high school football in any way. The previous century, in fact.</p>
<p>But when Duncan Slade, the deputy managing editor at Mountain State Spotlight, emailed me in late October to ask for my advice on a story involving West Virginia high school football games, I couldn’t say no. It was an interesting story idea and it involved data, too.</p>
<p>State legislators passed a law earlier this year that allowed high school athletes to transfer between high schools without sitting out a year, as previously had been the case. One of the anecdotal effects? More blowout games where one team ran up margins of 40, 50 or even 70 points. The question Mountain State Spotlight wanted to answer was: is this real?</p>
<p>Luckily, there’s good data available to help with that. The <a href="http://wvtailgatecentral.com/">WVTailgateCentral website</a> has game-by-game scores going back to 2009, with the exception of 2017 (the web app’s database credentials <a href="http://wvtailgatecentral.com/hs/fb2017/week_schedule.php?startdate=2017-08-12&amp;enddate=2017-08-20">don’t seem to work for that year</a>). I told Duncan that if it were my story, I’d scrape that site for game data and then calculate average margins, and I offered to do just that.</p>
<p>One view of WVTailgateCentral is that it’s an old-school site, but that’s good news for would-be scrapers: the uncomplicated HTML that uses a single table and allows you to change the URL so that instead of a week-by-week listing of games you can get <a href="http://www.wvtailgatecentral.com/hs/fb2023/week_schedule.php?startdate=2023-08-01&amp;enddate=2023-11-15">a whole season on a single page</a>. Here’s the <a href="https://github.com/dwillis/wv_football/blob/main/scraper.py">scraper</a> I wrote in Python to retrieve game scores, identify the home state of each team (since this database includes some non-WV games) and calculate the absolute point difference:</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb1-4"></span>
<span id="cb1-5">years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2010</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2012</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2013</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2014</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2015</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2016</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2018</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>]</span>
<span id="cb1-6"></span>
<span id="cb1-7">games <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> state_from_team(team):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(KY)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-11">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KY"</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(OH)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-13">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OH"</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(MD)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-15">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MD"</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(VA"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-17">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VA"</span></span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(PA)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-19">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PA"</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NC)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-21">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NC"</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(ON)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-23">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ON"</span></span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(CN)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-25">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN"</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(SC)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-27">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SC"</span></span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(DC)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-29">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DC"</span></span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(DE)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-31">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DE"</span></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NY)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-33">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NY"</span></span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NY)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-35">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NY"</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(TN)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-37">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TN"</span></span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NJ)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-39">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NJ"</span></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(MI)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-41">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MI"</span></span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(A)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-43">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PA"</span></span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-45">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WV"</span></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> state</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> years:</span>
<span id="cb1-49">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(year)</span>
<span id="cb1-50">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"http://wvtailgatecentral.com/hs/fb</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/week_schedule.php?startdate=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-08-01&amp;enddate=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-12-31"</span></span>
<span id="cb1-51">    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb1-52">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(r.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb1-53">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table'</span>).find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tr'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb1-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rows:</span>
<span id="cb1-55">        date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb1-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text:</span>
<span id="cb1-57">            home_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" **"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-58">            home_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].text</span>
<span id="cb1-59">            home_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(home_team)</span>
<span id="cb1-60">            visiting_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text</span>
<span id="cb1-61">            visiting_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].text</span>
<span id="cb1-62">            visiting_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(visiting_team)</span>
<span id="cb1-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text:</span>
<span id="cb1-64">            home_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" **"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-65">            home_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].text</span>
<span id="cb1-66">            home_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(home_team)</span>
<span id="cb1-67">            visiting_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text</span>
<span id="cb1-68">            visiting_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].text</span>
<span id="cb1-69">            visiting_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(visiting_team)</span>
<span id="cb1-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-71">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No home team!"</span>)</span>
<span id="cb1-72">            home_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" **"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-73">            home_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].text</span>
<span id="cb1-74">            home_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(home_team)</span>
<span id="cb1-75">            visiting_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text</span>
<span id="cb1-76">            visiting_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].text</span>
<span id="cb1-77">            visiting_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(visiting_team)</span>
<span id="cb1-78">        score_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(home_team_score) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(visiting_team_score))</span>
<span id="cb1-79">        games.append([year, date, home_team, home_team_score, home_team_state, visiting_team, visiting_team_score, visiting_team_state, score_diff])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2009
2010
2011
2012
2013
2014
2015
2016
2018
2019
2020
2021
No home team!
No home team!
No home team!
2022
2023</code></pre>
</div>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scores.csv"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    output_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(f)</span>
<span id="cb3-3">    output_file.writerow([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_team"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_team_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_team_state"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visiting_team"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visiting_team_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visiting_team_state"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"differential"</span>])</span>
<span id="cb3-4">    output_file.writerows(games)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>120</code></pre>
</div>
</div>
<p>It’s certainly possible to do all of this in Python or R, but I like to mix and match, especially when it comes to scraping, since I prefer Python’s tooling. But for quick data exploration and visualization, it’s hard to beat R in Quarto notebooks. You can see my <a href="https://github.com/dwillis/wv_football/blob/main/wv_scores.qmd">code here</a>, or <a href="https://thescoop.org/wv_football/wv_scores.html">check out the HTML version</a>. And the answer to the question is yes, there are a lot of blowout games in 2023, more than ever. It’s not particularly close, either, but there is a wrinkle in the data: the jump in blowouts really started <em>last year</em>, when the transfer rule was still in place. This season’s blowouts are, on average, greater and there are more of them (and in particular <a href="https://datawrapper.dwcdn.net/GgR28/1/">more games with 70+ point margins!</a>), but it’s not like it came out of nowhere.</p>
<p>You should <a href="https://mountainstatespotlight.org/2023/11/09/high-school-football-transfer-rule-blowouts/">read the story by Henry Culvyhouse</a> that delves into how the state legislature made the change and what some of its biggest backers think now that they’ve seen the results.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/11/13/wv-football-blowouts/</guid>
  <pubDate>Mon, 13 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How Newsrooms Should be Talking About AI</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/11/06/how-newsrooms-should-be-talking-about-ai/</link>
  <description><![CDATA[ 





<p>If you’ve heard about news organizations using AI, chances are you’ve heard about some bad choices. Maybe it was CNET publishing AI-written stories with “<a href="https://futurism.com/cnet-ai-errors">very dumb errors</a>”, Gannett publishing some sports stories <a href="https://www.businessinsider.com/gannett-pauses-ai-written-articles-after-social-media-mockery-2023-8">that looked as if they were written by authors unfamiliar with sports</a> or just <a href="https://www.newsguardtech.com/special-reports/newsbots-ai-generated-news-websites-proliferating/">the delight of general content farms</a>.</p>
<p>I’m pretty confident that there are better, smarter uses of AI going on in newsrooms, but mostly we don’t hear about those. Maybe there’s a lesson in that.</p>
<p>Newsrooms need to be investigating AI systems, both as a reporting assignment and for their utility in the service of doing journalism. But before they adopt or implement AI systems to produce material for readers and viewers, they should consider looking inward first. That’s where AI can have a real impact that serves audiences and the newsrooms that depend on them. Let’s work on building internal systems.</p>
<p>It’s ironic that many newsrooms have exactly the materials that AI companies want: lots of original material describing people, places and events. The kind of things used to train and enhance language models. What if, before news organizations use AI systems to write the latest news and sports stories, they used AI technology to better understand the institutions and people they cover? What if news organizations used AI to better prepare their journalists to ask better questions?</p>
<p>The idea here isn’t new, just the technology. Newsrooms have been bringing knives to gun fights for a long time now by failing not only to use the newest hardware and software for journalism but also by <a href="https://thescoop.org/thefix/better-tools/">not building better tools</a> to do it. A reporter starting out in an unfamiliar place covering a new beat today has access to more information than her counterpart did 25 years ago, but most of it is useless without knowing where to start and what questions to ask.</p>
<p>It turns out that large language models - what we mean these days when we talk about the engines of AI services - are pretty good at helping with that. Imagine being able to give that new reporter a way to learn from the news organization’s archives that is more than the traditional “Here’s some information, I hope you find something interesting!” method. Call them “reporter-in-the-loop” systems, because that’s what they are: AI guided by a journalist rather than simply consumed by the public. And not only by organizing the information newsrooms already have, but by suggesting areas where they haven’t paid enough attention.</p>
<p>The additional benefit of this approach is that by encountering and interrogating AI systems in a way that doesn’t involve instant publishing, reporters will get better at understanding them and using them. There will always be the temptation to by an off-the-shelf product or service that will plug AI into a newsroom. But let’s not take short-term gain (and it may not be much of one, given our track record) over the development of truly useful AI systems guided by humans.</p>
<p>The goal for newsrooms should not be using AI as a replacement for reporting and editing but as an enhancer of those tasks. We should be solving reporting capacity problems, not substituting code for reporting wholesale. Less sexy? Maybe. But we’re valuing the wrong thing here by not looking at how AI can help newsrooms improve the ways they understand and tell the stories of their communities. That’s where the biggest impact will be right now, because that’s where newsrooms, especially smaller ones, are struggling. Most AI-generated stories right now are ephemeral; we signal their value by choosing to produce them without people involved. Let’s put AI to work on making our reporters and editors better, and better stories will come.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/11/06/how-newsrooms-should-be-talking-about-ai/</guid>
  <pubDate>Mon, 06 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What Was That?</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/10/17/third-and-six/</link>
  <description><![CDATA[ 





<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cfbfastR))</span>
<span id="cb1-3"></span>
<span id="cb1-4">pbp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_cfb_pbp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seasons =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>))</span>
<span id="cb1-5"></span>
<span id="cb1-6">big_ten <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Maryland'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wisconsin'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ohio State'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Michigan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Michigan State'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Penn State'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rutgers'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Northwestern'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iowa'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minnesota'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nebraska'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Indiana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Illinois'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Purdue'</span>)</span></code></pre></div>
</details>
</div>
<p>If you were at Secu stadium on Oct.&nbsp;14 for the Maryland-Illinois game and saw the Terrapins run the ball on third and six from the Illinois 29-yard line late in the game, you might have had the question I did: “Why didn’t Maryland pass?”</p>
<p>It turns out that running the ball in that situation isn’t the strangest thing for Maryland under Mike Locksley. It may not have been a successful call, but it wasn’t totally unexpected, either. While the Terps aren’t a one-dimensional offensive team, since the start of the 2019 season they have run the ball on third and six more than all but two Big Ten teams (Nebraska and Northwestern).</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">third_and_six <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pbp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(down <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, distance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-2">third_and_six_runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>))</span>
<span id="cb2-3"></span>
<span id="cb2-4">runs_by_team <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(pos_team)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span>
<span id="cb2-5"></span>
<span id="cb2-6">runs_by_team_big_ten <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(pos_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> big_ten) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(pos_team)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span></code></pre></div>
</details>
</div>
<p>The most common call in that specific game situation is to pass the ball, according to an analysis of play-by-play data from college football games for the past five seasons. Slightly more than one in five times, the offensive team runs the ball, but that doesn’t apply equally to every team. Programs that emphasize the ground game such as the military academies run much more often in that situation than most other teams. Crucially, running doesn’t seem crazy when you consider the outcomes: when choosing to run on third-and-six, nearly 40% of the time a team gains at least six yards, including plays that result in a touchdown.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(third_and_six_runs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(third_and_six)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2103855</code></pre>
</div>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">third_and_six_rush_success <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span>
<span id="cb5-2"></span>
<span id="cb5-3">third_and_six_rush_success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3934817</code></pre>
</div>
</div>
<p>But has that strategy worked for Maryland? Under Locksley, the Terps have passed the ball on two of every three plays when facing third-and-six, which means they run more often than the average team. And while pass plays in that situation have tended to gain more yardage, when they do run they average nearly six yards. In 16 rushing attempts from that third-down situation, the Terps have gained at least six yards <em>half the time</em>, including a 12-yard gain from Roman Hemby earlier in the Illinois game. That’s not a huge number of plays, but it puts Maryland among the top 30 teams that have succeeded the most by running on third-and-six since 2018. I’ve limited my results to teams that have run the ball on third-and-six at least 10 times over this period.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">runs_by_team_success <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(pos_team)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(success))</span>
<span id="cb7-2"></span>
<span id="cb7-3">runs_by_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(runs_by_team_success) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent =</span> success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(percent)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(pos_team)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 114 × 4
   pos_team          total success percent
   &lt;chr&gt;             &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;
 1 Kentucky             12      10    83.3
 2 Coastal Carolina     18      13    72.2
 3 Old Dominion         14      10    71.4
 4 Utah                 15      10    66.7
 5 Oregon State         12       8    66.7
 6 South Florida        20      12    60  
 7 Fresno State         10       6    60  
 8 North Carolina       17      10    58.8
 9 Appalachian State    14       8    57.1
10 UCLA                 14       8    57.1
# … with 104 more rows</code></pre>
</div>
</div>
<p>Maryland’s success running on third-and-six isn’t quite that of Kentucky, which has done it 10 of 12 times, or even Charlotte (8 of 14 times), who the Terps have beaten twice in a row. But they’ve succeeded more often than Michigan, Notre Dame and Georgia, to name three Power 5 teams. Still, history would lean towards calling a pass play. Was there something about this particular opponent and situation that made a run more likely?</p>
<p>Let’s look at Illinois. Over the past five seasons, the Illini have been pretty good at stopping third-and-six rushes short of a first down, accomplishing that two out of every three attempts.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">def_rush <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span>
<span id="cb10-6"></span>
<span id="cb10-7">def_rush_success <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(success))</span>
<span id="cb10-13"></span>
<span id="cb10-14">def_rush <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(def_rush_success) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(def_pos_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> big_ten) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent =</span> success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(percent)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(def_pos_team)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 4
   def_pos_team total success percent
   &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;
 1 Ohio State      13       6    46.2
 2 Purdue          11       5    45.5
 3 Indiana         15       6    40  
 4 Maryland        10       4    40  
 5 Wisconsin       14       5    35.7
 6 Illinois        18       6    33.3
 7 Penn State      12       4    33.3
 8 Iowa            18       5    27.8
 9 Northwestern    13       3    23.1
10 Minnesota       10       2    20  
11 Michigan        15       2    13.3</code></pre>
</div>
</div>
<p>But this season has been a different story for a struggling team. How different? Antwain Littleton II’s loss of one yard on third-and-six was the first time in four attempts that Illinois didn’t give up a first down.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">def_rush_2023 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>), season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span>
<span id="cb13-6"></span>
<span id="cb13-7">def_rush_success_2023 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>), season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(success))</span>
<span id="cb13-13"></span>
<span id="cb13-14">def_rush_2023 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(def_rush_success_2023) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent =</span> success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(percent)) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(def_pos_team)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 125 × 4
   def_pos_team      total success percent
   &lt;chr&gt;             &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;
 1 Baylor                4       4     100
 2 Akron                 3       3     100
 3 Cal Poly              3       3     100
 4 Bucknell              2       2     100
 5 Duquesne              2       2     100
 6 Georgia Tech          2       2     100
 7 Northern Colorado     2       2     100
 8 Texas Southern        2       2     100
 9 Vanderbilt            2       2     100
10 Weber State           2       2     100
# … with 115 more rows</code></pre>
</div>
</div>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>), season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, def_pos_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Illinois'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(year, pos_team, def_pos_team, period, down, distance, play_type, play_text)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>────────────────────────────────────────────────────────────── cfbfastR 1.9.0 ──</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
   year pos_team def_pos_team period  down distance play_type play_text         
  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;         &lt;int&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;             
1  2023 Maryland Illinois          4     3        6 Rush      Antwain Littleton…</code></pre>
</div>
</div>



 ]]></description>
  <category>maryland football</category>
  <category>wtf</category>
  <guid>https://www.thescoop.org/archives/2023/10/17/third-and-six/</guid>
  <pubDate>Tue, 17 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching News Apps with Codespaces - The Results</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/05/27/teaching-news-apps-with-codespaces-results/</link>
  <description><![CDATA[ 





<p>The News Applications course I teach at Maryland has two big projects: building a bot/notification system of some kind and a more “traditional” news app that involves browsing, searching and displaying data. Since the students had been working in GitHub’s Codespaces this semester, we didn’t have to worry about final deployment issues, which can be both annoying and non-trivial. Plus, I could spin up a version of their work pretty much anytime, which was helpful for providing feedback.</p>
<p>It’s tough to compare the final news app projects to those from the previous year’s class, in part because of that environmental difference, but also because the 2022 version was the first time out for me teaching that course. Presumably I’ve gotten a bit better at doing that. What I can say is that removing the barrier posed by setting up and maintaining working virtual environments yielded a lot of benefits, and I won’t be going back.</p>
<p>I’d like to show some of the final projects (screenshots only, since these aren’t deployed anywhere) to illustrate what’s possible in a semester-long course when you don’t have to spend as much time on configuration and installation issues. In each case, the student in question gave me permission to display these screenshots. A couple of things they have in common: all of these were built using Python’s handy Flask library, along with some JavaScript. Most of them involve loading data from some external source, although one of them does text extraction from PDFs scraped using Selenium. One of the advantages of using Codespaces has been that I can see and run those setup and loading tasks; I don’t just see the final result.</p>
<p>The first is an app that displays information about sites with <a href="https://www.epa.gov/pfas/pfas-explained">PFAS contamination</a> - long-lasting chemicals whose components can take years to break down. Amanda Hernandez, who graduated in May, made this app that allows users to find places on a map and bring up details, or to search a table presented using the DataTables JS library.</p>
<p><img src="https://www.thescoop.org/archives/2023/05/27/teaching-news-apps-with-codespaces-results/pfas_homepage.png" class="img-fluid"></p>
<p>While News Apps isn’t a design course - and I’m not the person to teach one - we do look at the work done by newsrooms like ProPublica and others for some basic guidelines. Many of the students come into the class having taken design-related courses previously, too.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/05/27/teaching-news-apps-with-codespaces-results/</guid>
  <pubDate>Sat, 27 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching News Apps with Codespaces</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/03/22/teaching-newsapps-with-codespaces/</link>
  <description><![CDATA[ 





<p>The first version of my News Application Development class at Maryland got off to a rough start.</p>
<p>Not because of the students; I had seven intrepid undergraduates and grad students take the leap into a class that we previously hadn’t offered and I had never taught. They were up for it, if not exactly certain what actually was going to happen in our class. As this was the first brand-new class that I had developed at Maryland, I wasn’t totally certain, either.</p>
<p>What I did know was that I wanted students to spend a lot of time on the command line working in Python to acquire public data and build things from it. To do that, I had to make sure that each of them would be able to do similar work on their own laptops, which meant an early session of class was titled “Install Party!”.</p>
<p>Friends, it was not a party. Or maybe it started out as one and then, well, <a href="https://www.youtube.com/watch?v=jJ9H-uT64Wo">the Slickee Boys can take it from here</a>.</p>
<p>I am, for better or worse, an Apple computer person and have been for awhile. Our college has both PCs and Macs, although students mostly have access to the latter if they need to use a computer other than their own. But really, students have been taught since high school (maybe before) to just use their own computers. Pandemic restrictions only reinforced that. More to the point, they are taught specific programs and <a href="https://www.thescoop.org/archives/2013/10/01/the-natives-arent-restless-enough/">mostly not encouraged to explore the limits of the machine that plays a big role in their lives</a>. To a certain extent, that’s not a bad thing to do; the software we use to teach data journalism, RStudio, is itself mostly a GUI experience.</p>
<p>For many of my students, installing languages and libraries was a new and uncomfortable experience. That’s not the hard part; students are mostly interested in new things. The hard part is the lack of consistency across their laptops. They not only ran into problems installing and setting up Python, they ran into <em>different</em> problems. Some of them were platform-related: we had a couple of Windows users. Most of the Mac users had never before installed XCode or its command-line tools and didn’t understand the purpose or know what to expect. The Windows users had it worst; I had forgotten most of what I used to know about doing web development work in that environment.</p>
<p>For the most part, we figured it out eventually. But that cost us both time and, I’m sure, some level of enthusiasm. Who wants to start out a new thing by flailing around for awhile? One student ended up installing a Linux subsystem to make things easier, which definitely resolved a lot of problems but is not something I’d realistically be able to insist upon. One of the lowest points was not being able to understand why something wasn’t working for a student when it was on my laptop. “Works for me” is a statement of failure for teachers.</p>
<p>This technical tax also has some more pernicious effects. Some number of students show up at the University of Maryland armed with a solid ChromeBook, which is what they were told they would need in high school. I can understand why; it’s a basic laptop that teenagers can use on common tasks that doesn’t cost a ton of money. School districts can and do provide them. But let’s be honest here: showing up to journalism school with a ChromeBook is like bringing a knife to a gun fight: there are many things you can do, but your range of options (and ultimately, effectiveness) are limited. And let’s be even more honest: the same students who are showing up with ChromeBooks most likely are those who cannot afford more expensive hardware. Don’t think for a moment that they can’t look around the classroom and see that situation, and wonder how they’re going to keep up.</p>
<p>There’s a larger argument to be made about colleges providing students with options for getting the equipment they need to take the classes they want and to succeed in them, but here’s my stop-gap solution. This semester’s News Apps class had no install party, even with twice as many students. There has been very little class time spent on making sure that things are configured properly. We all use <a href="https://github.com/features/codespaces">GitHub’s Codespaces</a>.</p>
<p>I will try not to turn this into a lovesong to this product, but honestly it has solved many of the problems that I encountered last year. More importantly, it has solved a lot of my students’ problems in the sense that they can focus the bulk of their time trying to learn how to do things as opposed to how to prepare to do things. Codespaces is a virtual machine in a browser that gives you a terminal, the ability to install, configure and run most things you’d need to for web development and related tasks, including running web servers so you can see the results of your work. As it’s a GitHub joint, it works off repositories and is already setup so that users can push and pull their work. I’ve even gotten RStudio to run using the RStudio Server version. And it’s not just a terminal; they get a code editor and a file manager, so they aren’t left staring at a shell wondering what this even is.</p>
<p><img src="https://www.thescoop.org/archives/2023/03/22/teaching-newsapps-with-codespaces/rstudio_codespaces.png" class="img-fluid"></p>
<p>Here’s how it works: educators can get access to Codespaces for their students - up to 180 hours a month, which so far has been more than sufficient to the task - by setting up a GitHub Classroom account for your course. You use GitHub Classroom to create assignments; when students accept them, a repository is created in a GitHub organization you setup.</p>
<p>You can customize the virtual machine that students get, with the default being a typical Linux distribution, and you can have it come with certain packages already installed. For the purposes of working in Python, the default setup gets you access to <code>pip</code>, <code>pipx</code>, <code>pipenv</code> and probably other package managers.</p>
<p>When I spoke about how our class is using Codespaces at <a href="https://www.ire.org/training/conferences/nicar-2023/">NICAR</a> a few weeks ago, it was to a room full of educators for whom the benefits are pretty clear: everybody can work from the same setup, you can control the environment and even run students’ code in a Codespace of your own. It’s definitely handy for instructors.</p>
<p>But more and more, I see this as much an equity issue. Codespaces doesn’t guarantee a good outcome - you can still write terrible code or neglect to install required libraries. But, relatively-speaking, equality of opportunity? That’s a big deal for journalism students who mostly have never written software. Some students come into classes like this already convinced that they aren’t good at this work, and setup problems - especially when others don’t have them - only reinforce that idea. Let’s not do that. Old-timers like me can wax nostalgic about how difficult things used to be and all the hoops we had to jump through to make even basic stuff work. That’s good material for a NICAR dinner. Our students deserve better, and we can provide it.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/03/22/teaching-newsapps-with-codespaces/</guid>
  <pubDate>Wed, 22 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching Journalism with ChatGPT</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/02/11/teaching-journalism-with-chatgpt/</link>
  <description><![CDATA[ 





<p><em>You’ll want to read Jeremy Littau’s piece titled “<a href="https://jeremylittau.substack.com/p/whos-afraid-of-chatgpt">Who’s Afraid of ChatGPT?</a>” for a more foundational view on this topic.</em></p>
<p>At first glance, the idea that one of my students could take an assignment from my Data Journalism class - say, summarizing data using R and the Tidyverse - and ask an AI chatbot to provide the answer (or something that gets close to it) should be slightly terrifying.</p>
<p>Need to know the proper syntax for creating a dumbbell chart using ggplot? What about the code to scrape tabular data from a government website? Ask your online pal.</p>
<p>What’s my job, exactly?</p>
<p>I tell people that I teach data journalism skills to students, and that’s true. But the real story is, inevitably, more complicated. One time during a classroom exercise involving actual data, a student asked whether the answer she got was “correct”, knowing that the data was missing some values and structured in a way that made answering the question difficult.</p>
<p>“What is truth?” I half-jokingly replied.</p>
<p>If you use ChatGPT and similar services, at some point you’ll probably end up with the same reaction.</p>
<p>So yes, I do teach R and Python and SQL, but there are other people who teach those subjects who know more about them than I do. We have entire departments filled with smart people who study how to use these tools and who use them far more extensively than I do. I teach about tools <em>for journalism</em>, and that’s where the emphasis needs to be.</p>
<p>Those tools make it possible to do more rigorous journalism, to go from the anecdotal to the systematic. But they do not do these things by themselves. Good journalism adds context, identifies and explains priorities and significance. Teaching data journalism isn’t just, to borrow a phrase from <a href="https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1740-9713.2012.00605.x">Amanda Cox</a>: “Here’s some data; hope you find something interesting!” We start with a question and ask more, refining our inquiry based on what we discover. We analyze and describe. If AI tools can help with that process, I want my students to know how.</p>
<p>My policy, at least for now, is this: I want my students to use ChatGPT and other AI services to help them solve specific problems, and I want to know about it when they do. Here’s what I put in my syllabi:</p>
<blockquote class="blockquote">
<p>The basic rule is: if you use it, you must disclose that you did so in that assignment’s submission, and include any prompts you provided to the tool. Sources matter.</p>
</blockquote>
<p>If I’m asking students to find some meaning in data, maybe a pattern or outlier that’s newsworthy, and they have an idea of how to do that but spend an hour struggling to get the precise syntax correct, that’s probably not going to be a great learning experience. Some of them might be energized by the challenge, I suppose, but is that the point? If they can find assistance in finishing a task so they can actually answer the question, that’s the important part to me.</p>
<p>There are always ways to misuse tools and risks involved in any process that provides efficiency at the expense of step-by-step work. That’s not new, but AI can make the risks greater because there’s an implied authority that we bestow (a whole other, if related, problem). AI systems are and will be problematic and potentially harmful, like any human-designed system. We are still early in figuring out the harms. That’s an argument for engaging them as journalists, not for shying away.</p>
<p>If this seems like soft-headed mollycoddling, I would submit to you that the many hours I spent trying to wrangle data from electronic PDFs before <a href="https://tabula.technology/">Tabula</a> came along were not exactly instructive. I learned that there are dozens of ways to lock data inside a PDF prison. It makes for a slightly funny story at conferences, but I would have done better things with my time - maybe better stories - had I had a better tool.</p>
<p>The bit about disclosing the prompts is key for journalism students. One of my hobbyhorses is that we don’t do a good enough job of teaching student journalists how to ask good questions. Partly that’s because we focus a lot of attention on the final product, typically a story, and partly it’s because it’s both easier and consistent to have students complete the same kinds of assignments. We also overestimate the quality of our ideas a lot, and don’t interrogate them as much as we should.</p>
<p>I want to know what my students are asking from ChatGPT and other AI products, not just because the prompts and the answers are related, but because precise questions are more likely to yield specific answers. I’d like to know if my students are getting better at asking questions.</p>
<p>If my students can learn to use AI systems with creativity, curiosity and skepticism, they’re going to be better journalists. If they can ask better questions and have more experience and confidence in evaluating the results, they’re going to be better journalists.</p>
<p>What’s my job, exactly? I teach data journalism skills to students. If I end up spending more time developing that questioning skill, I suspect that’s going to make a bigger difference in the long run.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/02/11/teaching-journalism-with-chatgpt/</guid>
  <pubDate>Sat, 11 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What is Happening in Morgantown?</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/01/04/what-is-happening-in-morgantown/</link>
  <description><![CDATA[ 





<p>When <a href="https://mountainstatespotlight.org/author/ken-ward/">Ken Ward Jr.</a> and I got to teach an investigative reporting class at West Virginia University in the fall of 2019, one of the regular assignments we had was to give students some state government report to read and ask them to generate newsworthy questions from it.</p>
<p>This exercise started out pretty rough. Even though questions are the backbone of journalism, there aren’t many journalism classes that assign them specifically. Usually the assignment is to write a story based on an event or interviews, and the assumption is that in doing that students will come up with relevant and interesting questions. But if you’re not covering a beat or an expert on a topic, investigative story ideas don’t just appear from thin air. They almost always derive from good questions.</p>
<p>At first, the questions we got were ok; often they were definitional, which makes sense since we were introducing new subjects and findings nearly every week. “What does X mean?” or “Why is Y important?” These aren’t bad questions, but they also indicate an introductory level of understanding of the subject. For a lot of journalism assignments, including investigative work, that’s a necessary step. The problem was that many of them focused on things that weren’t the most important thing.</p>
<p>Here’s an example: one of the reports we had students read was from the West Virginia Board of Registered Nurses (see a more recent example <a href="https://www.wvlegislature.gov/legisdocs/reports/agency/R02_FY_2022_15836.pdf">here</a>) showing, among other things, the number of registered nurses by county and specialty. The table looks like this:</p>
<p><img src="https://www.thescoop.org/archives/2023/01/04/what-is-happening-in-morgantown/wv_nurses.png" class="img-fluid"> The specialties are listed across the top, each letter corresponding to a value like “Cardiology” or “Pediatrics”. The letter “J” stands for “Maternal-Obstetrics”. Most of the questions we got were ones such as “Why do Cabell, Kanawha and Monongalia have so many more nurses?” which has a quick answer - they have more people living there. Look at the data longer, though, and you start to ask other, better questions, like: “How many WV counties have literally zero maternal/OBGYN nurses living there?” More than half the state’s counties have none, although there are maternal nurses living in other states who work in West Virginia. Or “What’s it like to be the only maternal health nurse in the whole county?” These are better questions that could lead to great stories.</p>
<p>In order to make this exercise more relevant to our WVU students, we looked at <a href="https://police.wvu.edu/clery-act/campus-safety/crime-log">campus police incident reports</a>. The information is not exactly in a useful format; it requires that people visit the site repeatedly and also “scrolls off” earlier reports after 90 days or so. In other words, a perfect candidate for scraping. So that’s what I did, <a href="https://github.com/dwillis/wvu-projects/tree/master/crime-log">writing some Python code to grab the latest reports</a> and then using GitHub Actions to automate that process every day. The result is <a href="https://github.com/dwillis/wvu-projects/blob/master/crime-log/crime_log.csv">a CSV file</a> with more than 13,000 rows.</p>
<p>Not many of us want to look at huge CSV files a lot, which is why we have other software to help us do that. The best software for this purpose is one that allows, even encourages, users to ask questions of the data. That’s what <a href="https://datasette.io/">Datasette</a> is great at. So after updating the CSV file with the latest WVU crime incident reports, I have GitHub Actions build out <a href="https://wvu-crime-log.fly.dev/wvu/crimelog">a Datasette instance</a> to display it.</p>
<p>That brings me back to the title of this post: What is happening in Morgantown? Seems like a pretty basic question, but where it comes from is asking other questions of this data, and specifically grouping by and counting the number of reports. I start by grouping the reports by year (I’ve been collecting this data since the fall of 2019, so that year doesn’t have full data). Looking at <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year">those yearly totals</a>, you can see 2020 stand out, which, given COVID, seems logical.</p>
<p>I’ve been looking at this data since 2019, and when you do that you start to get an idea of what the ebb and flow of it <em>should</em> look like. So when you see rare events, your brain might notice them. But that’s not the only way to find out if something has changed. Throughout the pandemic we heard a lot about students’ mental health struggles. Does that show up at all in campus police incidents? At the most extreme end we could look at references to suicide. It turns out that there are several incident titles that contain the word “suicide”, so let’s look at those.</p>
<p>One of Datasette’s key features is to allow you to execute arbitrary SQL statements, such as performing wildcard searches. Here are <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;title__contains=SUICIDE&amp;_sort_desc=datetime">the results of searching for where <code>title</code> contains “SUICIDE”, grouped by year</a>. There were nearly twice as many reports of attempted or threatened suicide recorded by WVU police in 2022 than in 2021. Nearly twice as many.</p>
<p>Which leads to these questions: what is happening in Morgantown? Is there an actual increase in suicidal behavior? Is this better reporting by police? An increased awareness of suicide leading to more willingness to report it? Something else entirely? I hope that someone in Morgantown is asking them.</p>
<p>A less extreme but very common incident on and around college campuses is a violation of alcohol laws. In West Virginia, these are known as “ABCC Violations”. Focusing on those, once again grouping by year, we can see that <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;_sort_desc=datetime&amp;_facet=title&amp;title=ABCC+VIOLATION&amp;_facet=outcome">there were more violations reported in 2021 than in 2022</a>. Interesting, perhaps, but let’s bring in report outcomes - the disposition of each incident. The two most common outcomes are “Clear by Citation” and “Clear by Warning”. If we drill down into the first, we can see a huge change between 2021 and 2022: the number of ABCC violations that ended in citations <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;_sort_desc=datetime&amp;_facet=title&amp;title=ABCC+VIOLATION&amp;_facet=outcome&amp;outcome=Clear+by+Citation">dropped to just 31 last year, compared to 136 the previous year</a>. Warnings, meanwhile, <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;_sort_desc=datetime&amp;_facet=title&amp;title=ABCC+VIOLATION&amp;_facet=outcome&amp;outcome=Clear+by+Warning">were higher in 2022</a>. What changed? Was this an announced policy?</p>
<p>Good data exploration might provide some answers, but at a minimum it should produce more questions. Some of those might turn out to be pretty good stories.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/01/04/what-is-happening-in-morgantown/</guid>
  <pubDate>Wed, 04 Jan 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
