<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Derek Willis</title>
<link>https://www.thescoop.org/blog.html</link>
<atom:link href="https://www.thescoop.org/blog.xml" rel="self" type="application/rss+xml"/>
<description>Academic and journalist</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Mon, 27 Jan 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>LLM Extraction Challenge: Fundraising Emails</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/</link>
  <description><![CDATA[ 





<p>What kind of sicko signs up for political fundraising emails from just about every committee? Oh, right, that’s me.</p>
<p>Sure, there’s a certain masochism to this, but I’m genuinely interested in seeing how campaigns communicate their messages to prospective donors and the distance between what they are willing to say in an email to their supporters compared to other contexts. But, as with nearly every aspect of election data, there’s a catch: the fundraising emails don’t have the same kind of unique identifiers that, say, Federal Election Commission records do. At best, they have <a href="https://www.fec.gov/help-candidates-and-committees/advertising-and-disclaimers/">FEC-mandated disclaimers</a>, but even those aren’t as useful as they could be: they use committee names rather than the unique IDs that campaign finance data relies on.</p>
<p>Here’s where I’ve turned to LLMs to help. Initially, I thought that I’d would be able to use pattern matching to identify and extract disclaimer language from emails, and to a certain degree that’s possible. Many of the emails employ similar language and put the disclaimer near the end of messages, like this one from the Pennsylvania Democratic Party:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/padem_disclaimer.png" class="img-fluid figure-img" width="246"></p>
</figure>
</div>
</div>
</div>
<p>The “Paid for by The” is a good marker for this language, but not every committee uses that exact syntax and you can imagine that there might be fundraising emails where the phrase “paid for by the taxpayers” appears in a different part of the email. The other issue is getting the name from the disclaimer - knowing when to stop, basically. Sometimes that’s easy: the entire disclaimer is “Paid for by [name of committee]” and no other nearby text. Other times the disclaimer language just keeps going:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/cedar_key_disclaimer.png" class="img-fluid figure-img" width="171"></p>
</figure>
</div>
</div>
</div>
<p>This seems like something I could train a library to detect, and that did cross my mind. But mostly I was interested in seeing both how an LLM would handle this task and whether there were differences between various models, given the same data and prompt. So I took 1,000 <a href="https://political-emails.herokuapp.com/">emails</a> from November 2024 (I get anywhere from 3-12k a month, depending on where we are in the election calendar) and identified the committee name from the disclaimer text (along with the name of the sender, which often is only in the text). Then I fed the same emails to multiple LLMs and provided the following instructions:</p>
<blockquote class="blockquote">
<p>Produce a JSON object with the following keys: ‘committee’, which is the name of the committee in the disclaimer that begins with Paid for by but does not include <code>Paid for by</code>, the committee address or the treasurer name. If no committee is present, the value of ‘committee’ should be None. Also add a key called ‘sender’, which is the name of the person, if any, mentioned as the author of the email. If there is no person named, the value is None. Do not include any other text, no yapping.</p>
</blockquote>
<p>I ran that prompt against 20 different models via Ollama, Groq and directly (Anthropic and OpenAI), and then compared the results to my original data that I extracted committee names from, using the naming style present in the email. If you’ve played around with a lot of LLMs, you won’t be surprised by the results - or maybe some of them will surprise you:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Model</th>
<th>Total Records</th>
<th>Committee Matches</th>
<th>Percent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OpenAI 4o</td>
<td>1000</td>
<td>934</td>
<td>93.4%</td>
</tr>
<tr class="even">
<td>Claude 3.5 Sonnet</td>
<td>985</td>
<td>903</td>
<td>91.7%</td>
</tr>
<tr class="odd">
<td>OpenAI 4o November</td>
<td>1000</td>
<td>858</td>
<td>85.8%</td>
</tr>
<tr class="even">
<td>Gemma2</td>
<td>495</td>
<td>403</td>
<td>81.4%</td>
</tr>
<tr class="odd">
<td>Llama 3.3</td>
<td>1000</td>
<td>802</td>
<td>80.2%</td>
</tr>
<tr class="even">
<td>Llama 3.1 8b</td>
<td>507</td>
<td>406</td>
<td>80.1%</td>
</tr>
<tr class="odd">
<td>Phi 4</td>
<td>1000</td>
<td>798</td>
<td>79.8%</td>
</tr>
<tr class="even">
<td>Gemma2 27b</td>
<td>994</td>
<td>790</td>
<td>79.5%</td>
</tr>
<tr class="odd">
<td>Claude 3.5 Haiku</td>
<td>880</td>
<td>654</td>
<td>74.3%</td>
</tr>
<tr class="even">
<td>Mixtral</td>
<td>461</td>
<td>337</td>
<td>73.1%</td>
</tr>
<tr class="odd">
<td>QwQ</td>
<td>996</td>
<td>716</td>
<td>71.9%</td>
</tr>
<tr class="even">
<td>Mistral Small</td>
<td>502</td>
<td>346</td>
<td>68.9%</td>
</tr>
<tr class="odd">
<td>DeepSeek R1 32b</td>
<td>1000</td>
<td>663</td>
<td>66.3%</td>
</tr>
<tr class="even">
<td>Starling LM</td>
<td>270</td>
<td>168</td>
<td>62.2%</td>
</tr>
<tr class="odd">
<td>EXAONE 3.5</td>
<td>960</td>
<td>582</td>
<td>60.6%</td>
</tr>
<tr class="even">
<td>InternLM2</td>
<td>992</td>
<td>574</td>
<td>57.9%</td>
</tr>
<tr class="odd">
<td>Llama 3.2 3b</td>
<td>524</td>
<td>239</td>
<td>45.6%</td>
</tr>
<tr class="even">
<td>DeepSeek R1 8b</td>
<td>781</td>
<td>296</td>
<td>37.9%</td>
</tr>
<tr class="odd">
<td>Phi 3</td>
<td>521</td>
<td>143</td>
<td>27.4%</td>
</tr>
<tr class="even">
<td>Solar Pro</td>
<td>1000</td>
<td>259</td>
<td>25.9%</td>
</tr>
</tbody>
</table>
<p>First, an explainer on what the columns mean: the total records is the number, out of 1,000 emails, where the LLM was able to generate a JSON response without raising an error. The commercial models, plus newer open source ones such as Llama 3.3, DeepSeek’s 32b version and Phi 4, were basically able to do that for all or nearly all of the records. Others struggled to get even half of them.</p>
<p>The number of committee matches represents the number of times when the LLM did produce a valid response that it correctly matched the committee in the training dataset. My own cutoff for “good enough” here is about 80 percent, meaning that in addition to the models I mentioned above, Gemma2 (27b version) gets pretty close.</p>
<p>What stands out to me here is the performance of Llama 3.3 and the drop-off for the small models (honestly, though, shout-out to InternLM2, which did kinda ok!). I recognize that the latter condition is probably open to change given some fine-tuning, of which I performed none. This is zero-shot stuff. My next steps are to do more emails and I’d love some feedback on ways to improve this process.</p>
<p>You can see the training data, the JSON files and the code used to produce them at <a href="https://github.com/dwillis/LLM-Extraction-Challenge">this repository</a>.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2025/01/27/llm-extraction-challenge-fundraising-emails/</guid>
  <pubDate>Mon, 27 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The A in AI Stands for Archives</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/</link>
  <description><![CDATA[ 





<p><em>The following is based on a talk I gave at American University on Oct.&nbsp;25, 2024.</em></p>
<p>Since this is about Artificial Intelligence and Large Language Models, let me offer this initial baseline:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/llms.jpg" class="img-fluid figure-img" width="216"></p>
</figure>
</div>
</div>
</div>
<p>I need to emphasize this not just as a journalism educator but as a participant in our shared civic life. There are many, many examples of people using LLMs as reference tools, and even some <a href="https://www.perplexity.ai/">products</a> that explicitly pitch LLMs as facts-as-a-service platforms. Even with the best of intentions and all kinds of guardrails, this is risky business. That’s because fundamentally, what most LLMs do is pretty simple: they predict the next word. That’s a bit of an oversimplification, but the reality is that <a href="https://ig.ft.com/generative-ai/">probabilistic prediction</a> is a huge part of how the “generative” part of generative AI works.</p>
<p>Don’t get me wrong, this isn’t a pitch to avoid using LLMs for journalistic tasks. I teach a whole class experimenting with AI for journalism and I’m convinced that there are a number of very good use cases for applying this technology to the kind of work reporters and editors do. Instead, this is a pitch to look beyond generative AI for its own sake and towards a journalism problem that LLMs could actually help address.</p>
<p>News organizations are sitting on a trove of valuable raw materials: the words, images, audio and video that they produce every day. That’s a huge asset, but mostly those organization treat them as an afterthought. Those materials are locked away in proprietary platforms where the most advanced access is a search button, and maybe the ability to sort the results by date. Search is great, but it’s much less useful if you treat the contents as single things, which in the case of most news organizations means a blob of text. Control-F was state of the art in the previous century, and searching for information is a baseline skill at this point, not a specialty.</p>
<p>“The world has become so complicated, the growth of available information so explosive, that the journalist needs to be a filter as well as a transmitter, an organizer and interpreter as well as one who gathers and delivers facts.” <a href="https://carolinadatadesk.github.io/pmeyer/book/Chapter1.htm">Phil Meyer wrote that in 1973</a>. Think about what has changed about information since that time, and how most news organizations have failed to respond. Most news website search engines are, at best, marginally useful. Others have their best information locked away in inaccessible formats. Can you think of any other industry that treats its crucial materials so carelessly? Can you imagine it succeeding?</p>
<p>There’s so much that news organizations can and should be doing with their own archives that it can seem an insurmountable challenge. How can we begin to solve a problem that ranges from stitching together pieces of stories scattered across the pages of image PDFs to turning those stories into useful products that would help people better understand the places they live and the institutions that impact their lives?</p>
<p>One place to start is to make the materials we have - the stories, images, audio and video - better and more useful for journalists. Set aside for the moment the idea of handing AI over to consumers, since there’s already a lot of competition there, and <a href="https://reutersinstitute.politics.ox.ac.uk/digital-news-report/2024/public-attitudes-towards-use-ai-and-journalism">it’s not clear that news consumers actually want that</a>. I’d like to make the case for internal improvements via LLMs, starting with what I call structured data interviews.</p>
<p>That’s where journalists can make our archives more useful not by having AI generate a summary but by extracting important information from those blobs of text we have. There are plenty of possibilities here, but let me illustrate one of them. Nearly a decade ago, I worked on <a href="https://www.nytimes.com/2015/06/28/upshot/maiden-names-on-the-rise-again.html">a story about maiden names for The New York Times</a> along with Claire Cain Miller. Our question was whether we could find any evidence that women were keeping their names when marrying. There was some survey data on this, and some academic research using college alumni directories, but not a lot of data. I suggested that we use the wedding announcement published by The Times, knowing that those listings were not nearly representative of the American public, <a href="https://github.com/TheUpshot/nyt_weddings">not just because they were at hand</a>, but because they had a consistent format. Here’s <a href="https://www.nytimes.com/1985/10/27/style/susan-robertson-psychologist-weds.html">one from 1985</a> where the bride kept her name:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/wedding85.png" class="img-fluid figure-img" width="390"></p>
</figure>
</div>
</div>
</div>
<p>Here’s part of another, <a href="https://www.nytimes.com/2014/06/22/fashion/weddings/gabriela-herman-tyson-evans.html?unlocked_article_code=1.gE4.FsyD.NKxWBkEm0s_T&amp;smid=url-share">from 2014</a>:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/wedding14.png" class="img-fluid figure-img" width="316"></p>
</figure>
</div>
</div>
</div>
<p>Notice how similarly the two are in format, and that’s important. Nine years ago, I was able to parse these by writing some truly terrible Ruby code and then going through and checking almost all of the results. We <a href="https://www.nytimes.com/2015/06/28/upshot/about-the-maiden-name-analysis.html">limited the data we used to only selected years</a> because I didn’t have enough time to do a larger set. If I were doing this story today, I would use an LLM to extract the information I needed, and I could have done many, many more announcements. Here’s a very simple example using that 2014 announcement: I asked ChatGPT to produce a CSV file with some basic information about the wedding extracted from the text, and I didn’t bother giving it an example. <a href="https://chatgpt.com/share/4335a108-e4ff-4390-9d53-53f4b1380666">It did the job very well</a>, and without hallucinations. When we actually provide the text for an LLM to work on and specific instructions, many of them produce very good results.</p>
<p>You might be tempted to think that this is not much more than a parlor trick, but the implications are real and significant. Imagine if The Times had the detailed personal information contained in these announcements as <em>data</em>, searchable in different ways. Think of the connections it might be able to make faster, or the story ideas that would be possible that simply aren’t now. What if every newsroom that collected and published information like this, maybe about schools or businesses or sports, had that ability? Mostly, they do now, thanks to LLMs.</p>
<p>Extractive AI, as you might call it, has the potential to not just unlock things that news organizations “know” but can’t recall, but to make possible stories that otherwise would require months of time and technical skill to accomplish. And it would help news organizations take advantage of a huge, nearly unmatched resource: their own knowledge of the communities and institutions they cover. At a time when local news organizations have shed most of their institutional knowledge and often struggle to retain talented employees for more than a year or two, imagine what it could mean not just to retain that community expertise but be able to build upon it. Imagine what it could mean to be able to look at major topics informed not just by history but by the knowledge of the habits and patterns that make up hundreds or thousands of decisions and choices, both individual and collective. Imagine news organizations being able to hand a newly-minted reporter a guide to the topics she’ll cover, informed by their own coverage habits but with the ability to respond to questions.</p>
<p>None of these will come to fruition by simply applying AI, of course. We need journalists who can serve as information scientists, testing out processes and evaluating the results. We need journalists comfortable enough with what they know about how LLMs work to make good choices when using them. And we need editors and publishers willing to see not just the newest fad but the persistent value in the information that their reporters and editors collect and publish. <a href="https://thescoop.org/thefix/the-annotated-archive/">We need to value our archives</a> and the people who make use of them.</p>
<p>The good news is that, as a technical matter, much of the path is now clear. There are good, stable solutions to the problems of turning images into text and extracting meaning from that text. There are open source LLMs that are edging closer to what the commercial models can do, making it possible to avoid being locked into a particular platform or vendor. There are people and institutions willing and able to experiment. This mostly isn’t a technical problem anymore. It’s a human problem, and while AI provides assistance, it requires human guidance to understand our shared history.</p>
<p>While I was preparing for the talk at American, I was listening to an audiobook called <a href="https://www.goodreads.com/book/show/204316858-the-barn">“The Barn” by Wright Thompson</a>. It’s a history of the killing of Emmett Till in the Mississippi Delta in August 1955 that focuses on the barn where Till was tortured and murdered. That barn mostly had been written out of the “official history” of the tragedy, and the actual details of the crime are widely misunderstood or unknown, even by most residents of the Delta. The true story was hidden by the killers and, in particular, <a href="https://mississippitoday.org/2024/08/16/the-writer-and-killers-stole-the-story-of-emmett-till-from-his-mother-and-family/">a journalist who wrote a 1956 Look magazine article about the murder</a>. We now know the truth because people wrote things down and preserved them, and because others went looking. The memo that proved the lie about Till’s murder now sits in a university archive.</p>
<p>Archives are at once old and new. They are old because they are the resting place of facts and stories and ideas that only age. New because we can use them to learn more about who we are and how we got here. What people and ideas and truths we’ve clung to. How we might do better.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/12/09/ai-is-for-archives/</guid>
  <pubDate>Mon, 09 Dec 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>All Foreign Gifts Around Us</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/</link>
  <description><![CDATA[ 





<p>Whenever American federal officials - from the President to members of Congress and executive branch employees - meet with foreign government representatives, they often are offered gifts. Some of them are <a href="https://foreignpolicy.com/2017/04/27/eight-of-the-weirdest-gifts-foreign-dignitaries-gave-the-president/">pretty weird</a>, like crocodile insurance. Others are very pricey, such as gold medallions. Or paintings, like one given to Dwight Eisenhower from Konrad Adenauer, then the chancellor of Germany.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/three_wise_kings.jpg" class="img-fluid figure-img"></p>
<figcaption><em>Adoration of the Three Kings, ca. 1500</em></figcaption>
</figure>
</div>
<p>The reporting on these has mostly been anecdotal, either when those gifts are given during public events, or when they get recorded in a government publication long after the fact. But these foreign gifts really are data.</p>
<p>Lots of government information <em>should</em> be data, but doesn’t come in that format. Often it’s stored inside PDF files, but it’s even worse: what obviously should be structured as clean rows and columns is anything but. That leaves reporters with a series of bad options:</p>
<ul>
<li>Spending a lot of time trying to correctly copy and paste information from one format to another</li>
<li>Literally re-typing stuff that has already been typed!</li>
<li>Limiting reporting to anecdotes, not data</li>
<li>Regular expressions! (<a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/">Now you have two problems</a>)</li>
</ul>
<p>The worst part is that you can see how this information should be structured. Getting there is another matter.</p>
<p>For example, a page like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/original.png" class="img-fluid figure-img"></p>
<figcaption><em>Original</em></figcaption>
</figure>
</div>
<p>Clearly this is structured information, but the fact that the text wraps over to multiple lines and columns often contain multiple pieces of information is a problem. There is a solution!</p>
<section id="a-large-language-model-solution" class="level2">
<h2 class="anchored" data-anchor-id="a-large-language-model-solution">A Large Language Model Solution</h2>
<p>One thing that most LLMs are pretty good at is taking information in one context and putting it into another one. That includes translation, switching language style/meter/tone and even reproducing original text in another voice (try this with Dr.&nbsp;Seuss!). That ability extends to restructuring data like the file from above. Given the proper prompts and source material, an LLM should be able to produce something like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/extracted_output.png" class="img-fluid figure-img"></p>
<figcaption><em>Extracted</em></figcaption>
</figure>
</div>
<p>That’s a JSON file, which is a common format for storing data on the Web. It’s like a spreadsheet but more flexible.</p>
<p>You <em>can</em> try and upload a PDF directly to an LLM - a lot of them will be able to handle that well - but I encourage you to get as close to a text version of the PDF as possible, preserving the layout as much as you can. There are various ways you can do this; I used a command-line utility called <code>pdftotext</code> to convert a PDF to plain text. A typical command would look like this:</p>
<p><code>pdftotext -layout 2024-03129.pdf</code></p>
<p>That would produce a text file called <code>2024-03129.txt</code> that looks like <a href="https://github.com/dwillis/all-foreign-gifts-around-us/blob/main/text/2024-03129.txt">this</a>.</p>
<p>That text is what you want to provide to an LLM. For this task I chose Claude, specifically the Claude 3 Sonnet model. It costs $20 a month if you want file uploads and other goodies, but you also should be able to paste text into the chat window or API playground. If you have a single PDF, you might want to go that route. If you have multiple PDFs, you probably want to do this programatically using the API. But don’t worry about that yet - we’re just trying to do one file successfully.</p>
</section>
<section id="the-prompt" class="level2">
<h2 class="anchored" data-anchor-id="the-prompt">The Prompt</h2>
<p>Having the original file as text is necessary for this task, but it’s not sufficient. You need to be able to describe to an LLM what you want it to do. That’s where reporters should be able to shine: we may not know the answer, but we know the questions. When you are crafting a prompt, you’re asking a question (even if you don’t phrase it that way).</p>
<p>Most LLMs have two types of prompts: a <code>system</code> prompt and a <code>user</code> prompt. You should think about the former as a set of rules that will apply to everything you want an LLM to do. For example, if you only want it to produce a CSV file, put that in the system prompt. Here’s my system prompt for this task:</p>
<p><code>create only valid JSON objects based on the provided text and example. Never include any additional text or explanation. Always use double-quotes for every key and value. No yapping, no hallucinations.</code></p>
<p>You want to use simple, direct language here, words like “only”, “never” and “always” are good. The final phrase - “no yapping” is something that most LLMs will recognize as an instruction to cut down on wordiness like the narration they often provide. “No hallucinations” may not always work, but it doesn’t hurt to include.</p>
<p>I’m almost ready to describe the specific task, but first I want to talk about the importance of providing examples, especially when restructuring information. Think of it this way: you’re giving it a before example (the original text) and an after example (the structure you want). That will help guide the LLMs work. Example outputs are really, really helpful. Here’s what I provided in my prompt:</p>
<pre><code>example_json = {
                "name_and_title": "name and title of the recipient",
                "gift_description": "the gift",
                "received": "the date received in yyyy-mm-dd format",
                "estimated_value": "the dollar value only, no dollar sign",
                "disposition": "the disposition of the gift, not including 'Disposition-'",
                "foreign_donor": "name and title of foreign donor",
                "circumstances": "why the gift was accepted"
            }</code></pre>
<p>You’ll notice that most of these are descriptive, not literal examples. You should try either approach; this one is a mix of the two. The balance is being general enough that the LLM can recognize the overall pattern and specific enough that it doesn’t give you additional information you don’t want.</p>
<p>Finally, here’s my user prompt:</p>
<p><code>Extract all Tangible Gifts contained in the following text into individual JSON objects based on this example: {example} {text}</code></p>
<p>Each time I insert the example and the text of the PDF I’m working with.</p>
</section>
<section id="it-works-mostly" class="level2">
<h2 class="anchored" data-anchor-id="it-works-mostly">It Works! (Mostly)</h2>
<p>Mostly, this approach worked for me, but sometimes Claude ignored my instructions by giving me introductory text like <code>Here are the JSON objects for the Tangible Gifts extracted from the provided text:</code> before listing the data. I spent time trying to tweak the prompts to get it not to do this, but couldn’t prevent it all the time. In the end, I declared victory and removed the extra text manually. It’s not perfect, but it saved me a LOT of time.</p>
<p>How do I know it (mostly) worked? I conducted spot-checks on every file, comparing the results to originals. Consider this the fact-checking portion of the reporting process. It’s very easy to be so impressed by an LLM’s abilities that you implicitly trust its output. DON’T DO THIS. Trust your reporter instincts, not a machine, and verify.</p>
<p>I ended up doing a couple of more extraction tasks on the JSON it produced so that I could have more granular data (separate names and titles, for example). In all, it took me a few hours and cost about $10 to do this via Claude’s API - most of that was tweaking the prompt to get better results. Here’s what the final product looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/final_output.png" class="img-fluid figure-img"></p>
<figcaption><em>Final output</em></figcaption>
</figure>
</div>
<p>The actual data file is <a href="https://raw.githubusercontent.com/dwillis/all-foreign-gifts-around-us/main/combined_json_with_both_names.json">here</a>. Next year, when the federal government publishes its latest update of these gifts, I can grab that PDF, turn it into text and extract the data. It might take me 10 minutes to clean things up, and then I’ll have even more data. You can see all of the scripts and data <a href="https://github.com/dwillis/all-foreign-gifts-around-us">here</a>.</p>
<p>You may not need a full pipeline like this. You might just need to work on a single PDF or text file. Don’t let that stop you from trying out these tools. Find the process that works for you. Oh, and the title of this post and my repository? Yeah, that’s <a href="https://www.youtube.com/watch?v=2mURti-s0jc">intentional</a>. Consider it my gift to you.</p>


</section>

 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/06/22/all-foreign-gifts-around-us/</guid>
  <pubDate>Sat, 22 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I Mostly Don’t Use AI for Campaign Finance … Yet</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/06/20/ai-campaign-finance/</link>
  <description><![CDATA[ 





<p>If there’s anything that I’ve developed an expertise in in the past 25 years, it’s campaign finance data. And if there’s anything I’ve been really into during the past year, it’s large language models (LLMs). You might think this is a story about how I’ve combined the two.</p>
<p>But it’s not, because mostly I don’t, and I’d like to explain why.</p>
<p>Because most campaign finance data is structured - in rows and columns - some of the tasks that LLMs are most impressive at doing don’t necessarily apply here. I’m thinking of extracting information based on patterns or reasoning, or summarizing text. Yes, LLMs can do math; they are built atop math! But when I had students in my AI class this spring have LLMs do data analysis by uploading structured data and asking systems to do typical tasks such as counting rows or grouping things, most of them struggled to do so consistently.</p>
<p>To be fair, this was done using the Web interfaces to these LLMs, not via APIs where a user has more control. But among the tasks students tried was getting the LLM to count the number of rows that met a certain criteria (filtering, essentially) and some other pretty low-level data analysis tasks. They were not impressed.</p>
<p>To further illustrate this, let me turn to campaign finance data. One of the big challenges at the federal level is the standardization of donors, campaign vendors and the purposes of spending, among other things. There are organizations who do great work on standardizing donors - OpenSecrets is the big name in this field - and there are folks like Adam Bonica at Stanford who write software to standardize donors using machine learning. There’s <em>some</em> artificial intelligence in that, but it’s not what most people think about when they talk about AI these days.</p>
<p>Instead, they might think of a task like this: taking the expenditures of a Federal Election Commission filing like <a href="https://projects.propublica.org/itemizer/filing/1788518/schedule/sb">this one from the North Dakota Republican Party</a> and categorizing the purposes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/20/ai-campaign-finance/nd_gop.png" class="img-fluid figure-img"></p>
<figcaption>North Dakota GOP spending</figcaption>
</figure>
</div>
<p>Standardization is bread-and-butter stuff for data journalism. The mostly true joke is that people who work with data spend 70 percent of their time just getting the data into a shape where you can actually do a reliable analysis (it’s probably more like 80 percent). The late, great, Sara Fritz and Dwight Morris spent months doing this for <a href="https://www.google.com/books/edition/Handbook_of_Campaign_Spending/UcgZAQAAIAAJ?hl=en">their book on spending in the 1990 congressional elections</a>. It was a Herculean effort, so much so that Morris stopped doing it after a couple of elections.</p>
<p>LLMs should be pretty solid at this task, right? Well, maybe. This is much more of a traditional machine learning job in the sense that you’d train a dataset and then use that to help standardize additional records. Tossing some records into an LLM and seeing what happens seems like it might work, so I gave it a try. You can see the results, using ChatGPT’s 4o model, <a href="https://chatgpt.com/share/aab0ab55-e472-4a38-a567-3761fb6bd09e">here</a>. It mostly did not work.</p>
<p>The good news is that ChatGPT will do actual data analysis using common Python tools like pandas if you give it a CSV file. It’ll show you the code it produced to do that, too. All potentially useful stuff, and crucially that kind of start gives it a bit of credibility (or is it authority?) for many users. Until you look at what it’s actually doing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the unique purposes</span></span>
<span id="cb1-2">unique_purposes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purpose'</span>].unique()</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a DataFrame with the unique purposes and a column for standardized names</span></span>
<span id="cb1-5">standardized_purposes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(unique_purposes, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_purpose'</span>])</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For demonstration purposes, we'll standardize the names manually</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In a real-world scenario, this would likely involve more complex logic or a lookup table</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to standardize purpose descriptions</span></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> standardize_purpose(purpose):</span>
<span id="cb1-12">    purpose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> purpose.lower()</span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transfer'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transfer'</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insurance'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Insurance'</span></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'legal'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Legal Consulting'</span></span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'printing'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'postage'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Printing/Postage'</span></span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'payroll'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purpose:</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Payroll'</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Other'</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the standardization function</span></span>
<span id="cb1-27">standardized_purposes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'standardized_purpose'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> standardized_purposes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_purpose'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(standardize_purpose)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the standardized purposes to a new CSV file</span></span>
<span id="cb1-30">output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/mnt/data/standardized_purposes.csv'</span></span>
<span id="cb1-31">standardized_purposes.to_csv(output_path, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ace_tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> tools.display_dataframe_to_user(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standardized Purposes"</span>, dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>standardized_purposes)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb1-36">standardized_purposes.head()</span></code></pre></div>
</div>
<p>Did you catch the “in a real-world scenario” comment? Nothing like a machine downgrading the legitimacy of your work tasks to make you feel good about the future, I say.</p>
<p>This is a little bit of a contrived exercise because had I wanted to do this with a large amount of data I would have needed an approach that goes beyond shoving a CSV file into a Web chat interface. Even so, the choices the demonstration code makes are … interesting. It correctly puts <code>printing</code> and <code>postage</code> together in a category, but absent any human guidance it basically gives up after five categories.</p>
<p>Given a more robust and defined programatic effort, I’m confident that the results would be different. But at that point I’m probably better off training a bunch of data; if I want to incorporate LLMs I guess I could make one that does the job once I’ve told it how to.</p>
<p>I do think there are some potential uses of LLMs in the campaign finance universe that I’d like to explore further. Something involving the text of F99 filings that committees use to explain their reports to the FEC, perhaps. Maybe to help design different approaches to analysis. Or - and this is the idea that I currently favor - taking all of the various things I’ve ever said or written about campaign finance and making it into a useful guide for other folks.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/06/20/ai-campaign-finance/</guid>
  <pubDate>Thu, 20 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Lessons from Teaching a Journalism Class on AI</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/</link>
  <description><![CDATA[ 





<p>I called it my “running with scissors” class, because after I offered to teach a course on using artificial intelligence for journalism, the thought dawned on me that I had very little idea how to actually design and teach such a class.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/scissors.png" class="img-fluid figure-img" width="400"></p>
<figcaption><em>Running with scissors, a terrible image from DALL-E</em></figcaption>
</figure>
</div>
<p>Here’s what I eventually settled on: give students access to various AI services - ChatGPT, Claude, Gemini and other LLMs - and then ask them to apply them to specific journalism-related tasks. These tasks included some of the most fundamental journalism processes, including:</p>
<ul>
<li>coming up with story ideas</li>
<li>trying to figure out what kinds of people to talk to</li>
<li>finding key ideas in a document or report</li>
<li>editing text</li>
<li>generating headlines or social media copy</li>
</ul>
<p>The list of tasks also touched on some jobs that LLMs are pretty good at: extracting structured data from unstructured text, converting one story format to another and describing the elements of an image or video.</p>
<p>For each task, I gave students a template for documenting their work. For example, one task was uploading a document to an LLM and asking it to summarize it in a way that would be useful for finding a story. We had team and individual exercises, but they used the same basic template, and as the semester went on I asked them to use multiple large language models in their tasks. They needed to describe their process in doing so. Here’s an example of a template:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/summary_doc.png" class="img-fluid figure-img"></p>
<figcaption><em>Basic template</em></figcaption>
</figure>
</div>
<p>The key part - the part that was worth the most - was asking them to evaluate the results and reflect on how useful this process was. This got them thinking about their expectations versus the reality of generated text and images, so that they could compare the two. Students may not be experts on how AI works, but they are smart enough to judge output compared to expectations and will learn from their processes. Early on, I also had some students do the same task without any computer technology at all - Team Luddite. Here’s one of the evaluations from a task on generating follow-up story ideas from an existing story:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/sample_eval.png" class="img-fluid figure-img"></p>
<figcaption><em>Sample evaluation</em></figcaption>
</figure>
</div>
<p>These evaluations were key to students gaining an understanding of what LLMs can do (and what they should not be used for). Repeated conversations with LLMs help them to ask better questions, which is kind of the whole point of doing journalism in the first place. Chat interfaces seem “neutral” but the back and forth of the conversation reveals some habits, and knowing those is critical for both asking the right questions and understanding the responses.</p>
<p>Most of the students started out with either a degree of enthusiasm about the abilities of LLMs or a pretty skeptical take on their usefulness. Many of them assumed that the confidence displayed by LLMs in their responses was justified. They all learned to be less deferential in their prompts, which is what I wanted.</p>
<p>The journalism implications of some of these tasks were pretty profound. For example, one assignment had students ask LLMs to examine images and describe their details. Without getting all “Columbo” here, looking for telling items in images is a pretty arduous manual task for humans, and not all of us are very good at it. Accurate assistance for tasks like this at scale would make a lot of things possible for newsrooms, especially smaller newsrooms.</p>
<p>The running with scissors theme was the right one: I repeatedly had to change or add things. One week we used AI to describe the visual elements of videos, noting that doing that meant stripping out any audio. When we met <em>two days later</em>, the tool we used (Google’s Gemini) had changed so that it retained the audio and you could ask questions of it. More than any other class, this one demanded that I keep up because new things are happening all the time, and in particular LLMs are getting new capabilities. When I teach it again next spring, my scissors will likely be a different size (and maybe shape), but there will be a lot of unknowns again.</p>
<p>The major assignments for this class were two guides based on their evaluations: each student picked an existing news organization and wrote a guide describing three ways that organization might use AI in a responsible manner. The second guide, a group project, is a deep dive on a specific task like editing for style or summarizing PDFs. I’ll share more takeaways from those projects in future posts.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/06/03/lessons-from-teaching-journalism-class-ai/</guid>
  <pubDate>Mon, 03 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Better Way to Process Mississippi Precinct Results</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/</link>
  <description><![CDATA[ 





<p>When it comes to turning official precinct election results into data, there are few states like Mississippi.</p>
<p>The Magnolia State isn’t like New York, where there’s no centralized statewide reporting system for precinct results (not yet, at least). But the 82 counties in Mississippi participate in a frustrating system: they produce a precinct report in the same electronic format, then print out that document, have county election officials sign it and then send it to the Secretary of State in Jackson, where it gets scanned into a PDF and <a href="https://sos.ms.gov/elections/electionresults_aspx/elections_results_2023_countyG.aspx">posted on the SOS site</a>. Here’s what one looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/panola_precinct.png" class="img-fluid figure-img"></p>
<figcaption>Panola results</figcaption>
</figure>
</div>
<p>That means that to turn what obviously are tables into actual data, you need to choose one of two options: data entry or OCR, where software extracts the values. In a better world, the electronic versions get posted somewhere so that OCR isn’t needed, but we don’t live in that world and it’s unlikely we will anytime soon. As part of my work with OpenElections, I’ve mostly relied on data entry, which has its own issues and can cost significant amounts of money. For a state like Mississippi, we’re talking about more than 50,000 rows of data for a statewide general election, which easily will run into four figures (and usually leads to transcription mistakes).</p>
<p>That leaves OCR. But there’s an additional wrinkle with Mississippi’s results reports, and that’s those vertical headers for the names of the precincts. Some OCR software will struggle to handle those, meaning that often you’ll need to restrict the OCR process to portions of each page. That’s on top of just how difficult OCR can be on documents with unusual marks. For Mississippi, our recent process for turning these documents into data has been some OCR and some data entry, and a lot of time. In most cases, it takes months for OpenElections to post a statewide precinct results file.</p>
<p>Today, after less than a month of off-and-on work, OpenElections posted <a href="https://github.com/openelections/openelections-data-ms/blob/master/2023/20231107__ms__general__precinct.csv">a statewide precinct results file from the November 2023 general election</a>. It’s the earliest we’ve done this, and this file is the most accurate one we’ve ever produced. Here’s why: we switched to using Amazon Web Service’s <a href="https://docs.aws.amazon.com/textract/latest/dg/what-is.html">Textract</a>, which identifies and extracts text and numbers from document images like PDFs. There are very good OCR software programs out there, but what Textract does very well is identify tables and extract just those, ignoring information that might make it harder to process the document and produce a clean result. The accuracy of its text extraction is remarkable, even compared to popular software like tesseract.</p>
<p>AWS can be a bit of nightmare to start using - the documentation often appears to be written by people who <em>only</em> use Amazon’s offerings and services like Textract are mostly designed for large-scale bulk processing, which can make demos harder than they need to be. But for the quality of the output, it’s worth the effort. For the Mississippi results, we used Python, and in particular the <a href="https://github.com/aws-samples/amazon-textract-textractor">Textractor library</a> written by the AWS folks. It has a straightforward API and while it assumes that your documents are already located on S3, the cost of having them there is trivial for most jobs.</p>
<p>Here’s one way to approach the Mississippi precinct results: put the 82 PDF files in an S3 bucket (I mirrored them locally just so I could easily compare the original and results). After installing the Textractor library - I used the PDF option -, use Textract’s TABLES feature to have it perform OCR on each document, isolate the tables and then export each document’s table to an Excel file, with each table on a separate sheet in the file. Here’s what that script might look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> textractor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Textractor</span>
<span id="cb1-3"></span>
<span id="cb1-4">extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Textractor(profile_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span>)</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> textractor.data.constants <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TextractFeatures</span>
<span id="cb1-6"></span>
<span id="cb1-7">folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/local/folder"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> root, dirs, files <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.walk(folder_path):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> file_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_name.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".pdf"</span>):</span>
<span id="cb1-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Panola.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yazoo.pdf'</span>]:</span>
<span id="cb1-13">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_name)</span>
<span id="cb1-14">                document <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extractor.start_document_analysis(</span>
<span id="cb1-15">                    file_source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"s3://S3BUCKET/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-16">                    features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[TextractFeatures.TABLES]</span>
<span id="cb1-17">                )</span>
<span id="cb1-18">                document.export_tables_to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>folder_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span></code></pre></div>
</div>
<p>Check that screenshot of results from Panola County from above. Here’s what they look like in Excel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/panola_excel.png" class="img-fluid figure-img"></p>
<figcaption>Panola results in Excel</figcaption>
</figure>
</div>
<p>Now, this isn’t perfect. Those vertically-oriented headers with the precinct names aren’t there; Textract, like most OCR software, just doesn’t deal with them, although they also don’t ruin the OCR job, either. The candidate name and party are slapped together, as they are in the original document. But the table of results is pristine. In processing all 82 counties, I found 3 instances where Textract didn’t get the votes right, and those were due to either a stray mark on the original document or because the PDF’s orientation was uneven. Processing all 82 files took less than an hour, and cost less than $50. Let me repeat that: it cost less than $50 to produce high-quality vote totals for every county in the state.</p>
<p>Textract doesn’t only produce Excel files; you can extract tables as text and work with that data programmatically, too. Since this was the first time I was working with it using the Mississippi files, I wanted to see the results. It worked best for pages where every precinct had a numeric value; for those with “X” - indicating that the contest was not on the ballot in that precinct - Textract sometimes didn’t extract the X but did leave the value blank. But in terms of overall performance I’m sold, and will be using it for similar work going forward.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2024/01/27/a-better-way-to-process-mississippi-precinct-results/</guid>
  <pubDate>Sat, 27 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing Women’s College Volleyball Roster Data</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/12/25/womens-volleyball-roster-data/</link>
  <description><![CDATA[ 





<p>Last year some students of mine at Maryland and I worked to produce a comprehensive set of <a href="https://github.com/Sports-Roster-Data/womens-college-basketball">data on women’s college basketball rosters</a>, and while that process involved a lot of manual effort on top of a base of Python scrapers, it also got me thinking: how hard would it be to extend that system to other sports? As it turns out, it wasn’t that hard, which is why today I’m happy to announce the release of <a href="https://github.com/Sports-Roster-Data/womens-volleyball">comprehensive roster data for women’s college volleyball</a> for the 2023 season.</p>
<p>There are more women playing volleyball than basketball at the college level, thanks to teams that are slightly larger than many basketball teams and the proliferation of teams. We’ve collected more than 920 teams’ rosters, accounting for more than 15,800 players. Texas and Ohio provide the most players per capita, which was somewhat surprising to me given that Texas has so many people. It also has a lot of colleges that play volleyball. Alexa Henry, a graduate student at UMD, spent some time digging into this data and found that Texas is a leading exporter of players, too: even though the state has 49 NCAA volleyball teams, more than 1,630 Texans are on rosters across the nation. At an average of 17 players on each team, Texas players alone could populate nearly 96 entire teams.</p>
<p>The first step in collecting this data was to take the <a href="https://github.com/dwillis/wbb/blob/master/ncaa/rosters.py">Python scrapers</a> I wrote for basketball rosters and point them towards volleyball rosters. Most universities use the same software for all of their teams, so it was mostly a matter of developing <a href="https://github.com/Sports-Roster-Data/womens-volleyball/blob/main/teams.json">a list of team URLs</a>. The first time I ran the <a href="https://github.com/Sports-Roster-Data/womens-volleyball/blob/main/rosters.py">volleyball scrapers</a> they yielded nearly 12,000 players, which I estimated to be about 80 percent of the total number. I made one big change to help retrieve the remainder: incorporating Simon Willison’s excellent <a href="https://shot-scraper.datasette.io/en/stable/">shot-scraper library</a>.</p>
<p>Ostensibly a tool for taking automated screenshots, shot-scraper also (as its name suggests) has a useful ability to scrape websites, and in particular ones where JavaScript makes traditional scraping more annoying. College roster pages are a good example of this, because they often fetch JSON after page load. That doesn’t mean you can’t use the traditional requests + BeautifulSoup pattern, but with shot-scraper you can execute JavaScript against the page, and that comes in very handy.</p>
<p>Here’s an example: the <a href="https://sjsuspartans.com/sports/womens-volleyball/roster">San Jose State roster</a>. It’s a fairly typical example of what college team roster pages look like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/12/25/womens-volleyball-roster-data/san_jose_roster.png" class="img-fluid figure-img"></p>
<figcaption>San Jose State roster</figcaption>
</figure>
</div>
<p>What we want from this page is a JSON array of player objects based on the HTML attributes in the source. Skipping HTML parsing and heading straight to grabbing objects from the DOM makes things easier. Given access to the page, here’s the JavaScript that does it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster__players .roster-card-item'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> el <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb1-2">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-card-item__title-link'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-player-card-profile-field__value'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-player-card-profile-field__value'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.roster-card-item__position'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> hometown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-player-card-profile-field__value--hometown"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">     hs_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-player-card-profile-field__value--school"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> high_school <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hs_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> hs_el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">     ps_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-player-card-profile-field__value--previous_school"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> previous_school <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ps_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> ps_el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> jersey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".roster-card-item__jersey-number"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'href'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">     <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> hometown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> high_school<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> previous_school<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> jersey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> url}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    })</span></code></pre></div>
<script type="text/javascript">
Array.from(document.querySelectorAll('.roster__players .roster-card-item'), el => {
     const id = '';
     const name = el.querySelector('.roster-card-item__title-link').innerText;
     const year = el.querySelectorAll('.roster-player-card-profile-field__value')[1].innerText;
     const height = el.querySelectorAll('.roster-player-card-profile-field__value')[0].innerText;
     const position = el.querySelector('.roster-card-item__position').innerText;
     const hometown = el.querySelector(".roster-player-card-profile-field__value--hometown").innerText;
     hs_el = el.querySelector(".roster-player-card-profile-field__value--school");
     const high_school = hs_el ? hs_el.innerText : '';
     ps_el = el.querySelector(".roster-player-card-profile-field__value--previous_school");
     const previous_school = ps_el ? ps_el.innerText : '';
     const jersey = el.querySelector(".roster-card-item__jersey-number").innerText;
     const url = el.querySelector("a")['href'];
     return {id, name, year, hometown, high_school, previous_school, height, position, jersey, url};
    })
</script>
</div>
<p>That, plus a little post-processing, produces an array that looks like this (this version is truncated):</p>
<pre><code>[{'id': '', 'name': 'Jiana Lawson', 'year': 'Senior', 'hometown': 'Tucson, Ariz.', 'high_school': 'Catalina Foothills HS', 'previous_school': '', 'height': '5′10″', 'position': 'MB', 'jersey': '#1', 'url': 'https://sjsuspartans.com/sports/womens-volleyball/roster/season/2023/player/jiana-lawson', 'team_id': 630, 'team': 'San Jose State', 'season': '2023'}, {'id': '', 'name': 'Brooke Bryant', 'year': 'Junior', 'hometown': 'Irvine, Calif.', 'high_school': 'Santa Margarita HS', 'previous_school': '', 'height': '5′11″', 'position': 'RS', 'jersey': '#2', 'url': 'https://sjsuspartans.com/sports/womens-volleyball/roster/season/2023/player/brooke-bryant', 'team_id': 630, 'team': 'San Jose State', 'season': '2023'}]</code></pre>
<p>The function for San Jose State is <a href="https://github.com/Sports-Roster-Data/womens-volleyball/blob/main/rosters.py#L296-L318">here</a>. It’s not fancy, but it doesn’t need to be. The good news is that shot-scraper can accept pretty much any JavaScript: a ternary operator, string functions, etc. The bad news is that some of these sites have so much JavaScript running on them that it can get a little fussy.</p>
<p>This doesn’t make scraping one-click simple, a task that AI will probably hasten in most cases. But it does reduce the amount of time I spend wrestling with weird HTML and JS interactions, and it has made it possible for me to gather even more teams’ rosters, cutting down on the manual work needed for this effort. It allows me to ask: what other sports can I collect rosters from?</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/12/25/womens-volleyball-roster-data/</guid>
  <pubDate>Mon, 25 Dec 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Using AI to Parse Election Results</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/</link>
  <description><![CDATA[ 





<p>If there’s one state that justifies the need for OpenElections, it’s Mississippi. Unlike some other states that don’t have a centralized election results system, Mississippi does. Each of the state’s 82 counties uses the same form to report official results to the Secretary of State. But that form is quite a thing in terms of organization:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/ms_statewide.png" class="img-fluid figure-img"></p>
<figcaption>Statewide Results</figcaption>
</figure>
</div>
<p>There’s a lot going on here, but the lowlights, from a parsing perspective, start with the counties displayed as vertical column names, followed by the combination of candidate name and party in the same box. Those vertical headers make parsing more complicated; you can extract the text from this file, but very few programs will preserve the layout of those counties. <a href="https://sos.ms.gov/elections/electionresults/2023General/State%20Certified%20Results/2023%20Statewide%20Recapitulation%20Sheet.pdf">This is an electronic PDF</a>, so you can usually export it to a spreadsheet that you’ll then spend time reformatting. Depending on the election, a lot of time.</p>
<p>This is a very good candidate for AI services because we have a consistent (if not totally logical) structure to the document and we know what the output should look like: in this case, a CSV file with one row per candidate results. That means that a parsed file should look something like this:</p>
<pre><code>county,office,district,party,candidate,votes
Adams,Governor,,Dem,Brandon Presley,5782
Adams,Governor,,Rep,Tate Reeves,3516
Adams,Governor,,Ind,Gwendolyn Gray,130
Adams,Lieutenant Governor,,Dem,D. Ryan Grover,5111
Adams,Lieutenant Governor,,Rep,Delbert Hosemann,4101
Adams,Secretary of State,,Dem,Ty Pinkins,5162
Adams,Secretary of State,,Rep,Michael Watson,4058</code></pre>
<p>I first reached for Claude.ai from the folks at Anthropic, mostly because it handed file uploads slightly before OpenAI added that as a ChatGPT feature. It didn’t start out well, though:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/claude_01.png" class="img-fluid figure-img"></p>
<figcaption>What file?</figcaption>
</figure>
</div>
<p>Eventually it told me that the PDF was copyrighted material (it is not, being a government work in the public domain). After I told Claude that, it was happy to do the job.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/claude_02.png" class="img-fluid figure-img"></p>
<figcaption>It’s a start</figcaption>
</figure>
</div>
<p>Well, happy to <em>start</em> the job is more accurate. It’s an annoying thing to deal with a service that takes the instructions but then … doesn’t actually finish the job? Consider it another lesson in prompt editing: I had to tell it to make sure to do all of the counties and candidates. Even so, Claude’s UI means that it spits out the results to the screen, and there seems to be a limit on how much it can produce at one go, so I had to break up the conversion into multiple groups of counties. Still, in the end it worked - at least for the statewide offices I wanted, the ones with a result in every county.</p>
<p>For state legislative elections, Mississippi uses the same county grid format but puts an “X” in a county where the candidate wasn’t actually on the ballot. That means that if a state legislator only represented one county, she’d have one row with some number of votes and 81 with an “X” for the votes. For whatever reason, that confused both Claude and ChatGPT, in the sense that both were not able to produce the kind of file I wanted. Here’s what I asked Claude to do with state senate results:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/claude_03.png" class="img-fluid figure-img"></p>
<figcaption>Looks ok…</figcaption>
</figure>
</div>
<p>Looks ok, but since the example used Adams County, the first “result” shows that, too, even though District 1 is in DeSoto County. This is one of the times when AI-generated results look authoritative but are completely wrong.</p>
<p>I tried ChatGPT-4, which has a couple of features I like when it comes to this sort of task: it narrates its processes and provides a link to a downloadable file for the results (which also has the effect of making the results a surprise):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/chatgpt_01.png" class="img-fluid figure-img"></p>
<figcaption>Narration</figcaption>
</figure>
</div>
<p>Eventually it was able to do better than Claude at parsing state senate results (like Claude, I had to tell it to do all of the candidates), but had issues with state house results: the CSV files it produced looked good but placed results in the wrong counties. Eventually I saved the state house results as an Excel file and reworked that using R. You can see <a href="https://github.com/openelections/openelections-data-ms/blob/master/2023/20231107__ms__general__county.csv">the final result on GitHub</a>. In total, this took me a couple of hours, mostly spent experimenting with the correct prompt wording. Going forward it should take less time to do, and I have some ideas for tackling the state house results, too.</p>
<p>There are tradeoffs here, of course. OpenElections used to sometimes pay folks for data entry services, and some of them were quite good at the job, paying attention to every detail, asking useful questions that helped to understand what we were working with, that sort of thing. AI’s strengths are enough to make that a less attractive option, even if we’re paying $20 a month for a service or using an API. It costs less and takes less time in most cases. There is still a need for human oversight of these processes - ChatGPT’s struggles with state legislative results is the most glaring example - but I suspect even those pitfalls can be lessened or eliminated, and with them the obvious need for people in the loop.</p>
<p>There should still be people in the loop, if only because the raw materials here - those PDFs published by the state - are the result of a human-designed process that has quirks that are much easier for humans to understand. Perhaps in an ideal scenario, the results are produced in a format that software can understand. But that’s not the world we live in, and we’ll need people who can help translate between the human systems and the digital ones.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/11/25/using-ai-to-parse-election-results/</guid>
  <pubDate>Sat, 25 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>West Virginia High School Football Blowouts</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/11/13/wv-football-blowouts/</link>
  <description><![CDATA[ 





<p>It has been a long time since I covered high school football in any way. The previous century, in fact.</p>
<p>But when Duncan Slade, the deputy managing editor at Mountain State Spotlight, emailed me in late October to ask for my advice on a story involving West Virginia high school football games, I couldn’t say no. It was an interesting story idea and it involved data, too.</p>
<p>State legislators passed a law earlier this year that allowed high school athletes to transfer between high schools without sitting out a year, as previously had been the case. One of the anecdotal effects? More blowout games where one team ran up margins of 40, 50 or even 70 points. The question Mountain State Spotlight wanted to answer was: is this real?</p>
<p>Luckily, there’s good data available to help with that. The <a href="http://wvtailgatecentral.com/">WVTailgateCentral website</a> has game-by-game scores going back to 2009, with the exception of 2017 (the web app’s database credentials <a href="http://wvtailgatecentral.com/hs/fb2017/week_schedule.php?startdate=2017-08-12&amp;enddate=2017-08-20">don’t seem to work for that year</a>). I told Duncan that if it were my story, I’d scrape that site for game data and then calculate average margins, and I offered to do just that.</p>
<p>One view of WVTailgateCentral is that it’s an old-school site, but that’s good news for would-be scrapers: the uncomplicated HTML that uses a single table and allows you to change the URL so that instead of a week-by-week listing of games you can get <a href="http://www.wvtailgatecentral.com/hs/fb2023/week_schedule.php?startdate=2023-08-01&amp;enddate=2023-11-15">a whole season on a single page</a>. Here’s the <a href="https://github.com/dwillis/wv_football/blob/main/scraper.py">scraper</a> I wrote in Python to retrieve game scores, identify the home state of each team (since this database includes some non-WV games) and calculate the absolute point difference:</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb1-4"></span>
<span id="cb1-5">years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2010</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2012</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2013</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2014</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2015</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2016</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2018</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>]</span>
<span id="cb1-6"></span>
<span id="cb1-7">games <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> state_from_team(team):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(KY)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-11">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KY"</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(OH)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-13">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OH"</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(MD)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-15">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MD"</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(VA"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-17">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VA"</span></span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(PA)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-19">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PA"</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NC)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-21">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NC"</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(ON)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-23">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ON"</span></span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(CN)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-25">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN"</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(SC)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-27">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SC"</span></span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(DC)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-29">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DC"</span></span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(DE)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-31">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DE"</span></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NY)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-33">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NY"</span></span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NY)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-35">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NY"</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(TN)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-37">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TN"</span></span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(NJ)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-39">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NJ"</span></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(MI)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-41">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MI"</span></span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(A)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> team:</span>
<span id="cb1-43">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PA"</span></span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-45">        state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WV"</span></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> state</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> years:</span>
<span id="cb1-49">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(year)</span>
<span id="cb1-50">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"http://wvtailgatecentral.com/hs/fb</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/week_schedule.php?startdate=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-08-01&amp;enddate=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-12-31"</span></span>
<span id="cb1-51">    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb1-52">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(r.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb1-53">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table'</span>).find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tr'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb1-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rows:</span>
<span id="cb1-55">        date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb1-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text:</span>
<span id="cb1-57">            home_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" **"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-58">            home_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].text</span>
<span id="cb1-59">            home_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(home_team)</span>
<span id="cb1-60">            visiting_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text</span>
<span id="cb1-61">            visiting_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].text</span>
<span id="cb1-62">            visiting_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(visiting_team)</span>
<span id="cb1-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text:</span>
<span id="cb1-64">            home_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" **"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-65">            home_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].text</span>
<span id="cb1-66">            home_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(home_team)</span>
<span id="cb1-67">            visiting_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text</span>
<span id="cb1-68">            visiting_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].text</span>
<span id="cb1-69">            visiting_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(visiting_team)</span>
<span id="cb1-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-71">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No home team!"</span>)</span>
<span id="cb1-72">            home_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" **"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-73">            home_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].text</span>
<span id="cb1-74">            home_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(home_team)</span>
<span id="cb1-75">            visiting_team <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].text</span>
<span id="cb1-76">            visiting_team_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'td'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].text</span>
<span id="cb1-77">            visiting_team_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state_from_team(visiting_team)</span>
<span id="cb1-78">        score_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(home_team_score) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(visiting_team_score))</span>
<span id="cb1-79">        games.append([year, date, home_team, home_team_score, home_team_state, visiting_team, visiting_team_score, visiting_team_state, score_diff])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2009
2010
2011
2012
2013
2014
2015
2016
2018
2019
2020
2021
No home team!
No home team!
No home team!
2022
2023</code></pre>
</div>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scores.csv"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    output_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(f)</span>
<span id="cb3-3">    output_file.writerow([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_team"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_team_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_team_state"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visiting_team"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visiting_team_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visiting_team_state"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"differential"</span>])</span>
<span id="cb3-4">    output_file.writerows(games)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>120</code></pre>
</div>
</div>
<p>It’s certainly possible to do all of this in Python or R, but I like to mix and match, especially when it comes to scraping, since I prefer Python’s tooling. But for quick data exploration and visualization, it’s hard to beat R in Quarto notebooks. You can see my <a href="https://github.com/dwillis/wv_football/blob/main/wv_scores.qmd">code here</a>, or <a href="https://thescoop.org/wv_football/wv_scores.html">check out the HTML version</a>. And the answer to the question is yes, there are a lot of blowout games in 2023, more than ever. It’s not particularly close, either, but there is a wrinkle in the data: the jump in blowouts really started <em>last year</em>, when the transfer rule was still in place. This season’s blowouts are, on average, greater and there are more of them (and in particular <a href="https://datawrapper.dwcdn.net/GgR28/1/">more games with 70+ point margins!</a>), but it’s not like it came out of nowhere.</p>
<p>You should <a href="https://mountainstatespotlight.org/2023/11/09/high-school-football-transfer-rule-blowouts/">read the story by Henry Culvyhouse</a> that delves into how the state legislature made the change and what some of its biggest backers think now that they’ve seen the results.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/11/13/wv-football-blowouts/</guid>
  <pubDate>Mon, 13 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How Newsrooms Should be Talking About AI</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/11/06/how-newsrooms-should-be-talking-about-ai/</link>
  <description><![CDATA[ 





<p>If you’ve heard about news organizations using AI, chances are you’ve heard about some bad choices. Maybe it was CNET publishing AI-written stories with “<a href="https://futurism.com/cnet-ai-errors">very dumb errors</a>”, Gannett publishing some sports stories <a href="https://www.businessinsider.com/gannett-pauses-ai-written-articles-after-social-media-mockery-2023-8">that looked as if they were written by authors unfamiliar with sports</a> or just <a href="https://www.newsguardtech.com/special-reports/newsbots-ai-generated-news-websites-proliferating/">the delight of general content farms</a>.</p>
<p>I’m pretty confident that there are better, smarter uses of AI going on in newsrooms, but mostly we don’t hear about those. Maybe there’s a lesson in that.</p>
<p>Newsrooms need to be investigating AI systems, both as a reporting assignment and for their utility in the service of doing journalism. But before they adopt or implement AI systems to produce material for readers and viewers, they should consider looking inward first. That’s where AI can have a real impact that serves audiences and the newsrooms that depend on them. Let’s work on building internal systems.</p>
<p>It’s ironic that many newsrooms have exactly the materials that AI companies want: lots of original material describing people, places and events. The kind of things used to train and enhance language models. What if, before news organizations use AI systems to write the latest news and sports stories, they used AI technology to better understand the institutions and people they cover? What if news organizations used AI to better prepare their journalists to ask better questions?</p>
<p>The idea here isn’t new, just the technology. Newsrooms have been bringing knives to gun fights for a long time now by failing not only to use the newest hardware and software for journalism but also by <a href="https://thescoop.org/thefix/better-tools/">not building better tools</a> to do it. A reporter starting out in an unfamiliar place covering a new beat today has access to more information than her counterpart did 25 years ago, but most of it is useless without knowing where to start and what questions to ask.</p>
<p>It turns out that large language models - what we mean these days when we talk about the engines of AI services - are pretty good at helping with that. Imagine being able to give that new reporter a way to learn from the news organization’s archives that is more than the traditional “Here’s some information, I hope you find something interesting!” method. Call them “reporter-in-the-loop” systems, because that’s what they are: AI guided by a journalist rather than simply consumed by the public. And not only by organizing the information newsrooms already have, but by suggesting areas where they haven’t paid enough attention.</p>
<p>The additional benefit of this approach is that by encountering and interrogating AI systems in a way that doesn’t involve instant publishing, reporters will get better at understanding them and using them. There will always be the temptation to by an off-the-shelf product or service that will plug AI into a newsroom. But let’s not take short-term gain (and it may not be much of one, given our track record) over the development of truly useful AI systems guided by humans.</p>
<p>The goal for newsrooms should not be using AI as a replacement for reporting and editing but as an enhancer of those tasks. We should be solving reporting capacity problems, not substituting code for reporting wholesale. Less sexy? Maybe. But we’re valuing the wrong thing here by not looking at how AI can help newsrooms improve the ways they understand and tell the stories of their communities. That’s where the biggest impact will be right now, because that’s where newsrooms, especially smaller ones, are struggling. Most AI-generated stories right now are ephemeral; we signal their value by choosing to produce them without people involved. Let’s put AI to work on making our reporters and editors better, and better stories will come.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/11/06/how-newsrooms-should-be-talking-about-ai/</guid>
  <pubDate>Mon, 06 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What Was That?</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/10/17/third-and-six/</link>
  <description><![CDATA[ 





<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cfbfastR))</span>
<span id="cb1-3"></span>
<span id="cb1-4">pbp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_cfb_pbp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seasons =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>))</span>
<span id="cb1-5"></span>
<span id="cb1-6">big_ten <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Maryland'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wisconsin'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ohio State'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Michigan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Michigan State'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Penn State'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rutgers'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Northwestern'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iowa'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minnesota'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nebraska'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Indiana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Illinois'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Purdue'</span>)</span></code></pre></div>
</details>
</div>
<p>If you were at Secu stadium on Oct.&nbsp;14 for the Maryland-Illinois game and saw the Terrapins run the ball on third and six from the Illinois 29-yard line late in the game, you might have had the question I did: “Why didn’t Maryland pass?”</p>
<p>It turns out that running the ball in that situation isn’t the strangest thing for Maryland under Mike Locksley. It may not have been a successful call, but it wasn’t totally unexpected, either. While the Terps aren’t a one-dimensional offensive team, since the start of the 2019 season they have run the ball on third and six more than all but two Big Ten teams (Nebraska and Northwestern).</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">third_and_six <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pbp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(down <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, distance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-2">third_and_six_runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>))</span>
<span id="cb2-3"></span>
<span id="cb2-4">runs_by_team <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(pos_team)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span>
<span id="cb2-5"></span>
<span id="cb2-6">runs_by_team_big_ten <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(pos_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> big_ten) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(pos_team)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span></code></pre></div>
</details>
</div>
<p>The most common call in that specific game situation is to pass the ball, according to an analysis of play-by-play data from college football games for the past five seasons. Slightly more than one in five times, the offensive team runs the ball, but that doesn’t apply equally to every team. Programs that emphasize the ground game such as the military academies run much more often in that situation than most other teams. Crucially, running doesn’t seem crazy when you consider the outcomes: when choosing to run on third-and-six, nearly 40% of the time a team gains at least six yards, including plays that result in a touchdown.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(third_and_six_runs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(third_and_six)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2103855</code></pre>
</div>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">third_and_six_rush_success <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span>
<span id="cb5-2"></span>
<span id="cb5-3">third_and_six_rush_success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3934817</code></pre>
</div>
</div>
<p>But has that strategy worked for Maryland? Under Locksley, the Terps have passed the ball on two of every three plays when facing third-and-six, which means they run more often than the average team. And while pass plays in that situation have tended to gain more yardage, when they do run they average nearly six yards. In 16 rushing attempts from that third-down situation, the Terps have gained at least six yards <em>half the time</em>, including a 12-yard gain from Roman Hemby earlier in the Illinois game. That’s not a huge number of plays, but it puts Maryland among the top 30 teams that have succeeded the most by running on third-and-six since 2018. I’ve limited my results to teams that have run the ball on third-and-six at least 10 times over this period.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">runs_by_team_success <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six_runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(pos_team)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(success))</span>
<span id="cb7-2"></span>
<span id="cb7-3">runs_by_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(runs_by_team_success) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent =</span> success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(percent)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(pos_team)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 114 × 4
   pos_team          total success percent
   &lt;chr&gt;             &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;
 1 Kentucky             12      10    83.3
 2 Coastal Carolina     18      13    72.2
 3 Old Dominion         14      10    71.4
 4 Utah                 15      10    66.7
 5 Oregon State         12       8    66.7
 6 South Florida        20      12    60  
 7 Fresno State         10       6    60  
 8 North Carolina       17      10    58.8
 9 Appalachian State    14       8    57.1
10 UCLA                 14       8    57.1
# … with 104 more rows</code></pre>
</div>
</div>
<p>Maryland’s success running on third-and-six isn’t quite that of Kentucky, which has done it 10 of 12 times, or even Charlotte (8 of 14 times), who the Terps have beaten twice in a row. But they’ve succeeded more often than Michigan, Notre Dame and Georgia, to name three Power 5 teams. Still, history would lean towards calling a pass play. Was there something about this particular opponent and situation that made a run more likely?</p>
<p>Let’s look at Illinois. Over the past five seasons, the Illini have been pretty good at stopping third-and-six rushes short of a first down, accomplishing that two out of every three attempts.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">def_rush <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span>
<span id="cb10-6"></span>
<span id="cb10-7">def_rush_success <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(success))</span>
<span id="cb10-13"></span>
<span id="cb10-14">def_rush <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(def_rush_success) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(def_pos_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> big_ten) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent =</span> success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(percent)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(def_pos_team)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 4
   def_pos_team total success percent
   &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;
 1 Ohio State      13       6    46.2
 2 Purdue          11       5    45.5
 3 Indiana         15       6    40  
 4 Maryland        10       4    40  
 5 Wisconsin       14       5    35.7
 6 Illinois        18       6    33.3
 7 Penn State      12       4    33.3
 8 Iowa            18       5    27.8
 9 Northwestern    13       3    23.1
10 Minnesota       10       2    20  
11 Michigan        15       2    13.3</code></pre>
</div>
</div>
<p>But this season has been a different story for a struggling team. How different? Antwain Littleton II’s loss of one yard on third-and-six was the first time in four attempts that Illinois didn’t give up a first down.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">def_rush_2023 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>), season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total))</span>
<span id="cb13-6"></span>
<span id="cb13-7">def_rush_success_2023 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>), season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(def_pos_team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(success))</span>
<span id="cb13-13"></span>
<span id="cb13-14">def_rush_2023 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(def_rush_success_2023) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent =</span> success<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(percent)) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(def_pos_team)`</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 125 × 4
   def_pos_team      total success percent
   &lt;chr&gt;             &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;
 1 Baylor                4       4     100
 2 Akron                 3       3     100
 3 Cal Poly              3       3     100
 4 Bucknell              2       2     100
 5 Duquesne              2       2     100
 6 Georgia Tech          2       2     100
 7 Northern Colorado     2       2     100
 8 Texas Southern        2       2     100
 9 Vanderbilt            2       2     100
10 Weber State           2       2     100
# … with 115 more rows</code></pre>
</div>
</div>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">third_and_six <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(play_type, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rush"</span>), season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(yards_gained <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, def_pos_team <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Illinois'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(year, pos_team, def_pos_team, period, down, distance, play_type, play_text)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>────────────────────────────────────────────────────────────── cfbfastR 1.9.0 ──</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
   year pos_team def_pos_team period  down distance play_type play_text         
  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;         &lt;int&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;             
1  2023 Maryland Illinois          4     3        6 Rush      Antwain Littleton…</code></pre>
</div>
</div>



 ]]></description>
  <category>maryland football</category>
  <category>wtf</category>
  <guid>https://www.thescoop.org/archives/2023/10/17/third-and-six/</guid>
  <pubDate>Tue, 17 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching News Apps with Codespaces - The Results</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/05/27/teaching-news-apps-with-codespaces-results/</link>
  <description><![CDATA[ 





<p>The News Applications course I teach at Maryland has two big projects: building a bot/notification system of some kind and a more “traditional” news app that involves browsing, searching and displaying data. Since the students had been working in GitHub’s Codespaces this semester, we didn’t have to worry about final deployment issues, which can be both annoying and non-trivial. Plus, I could spin up a version of their work pretty much anytime, which was helpful for providing feedback.</p>
<p>It’s tough to compare the final news app projects to those from the previous year’s class, in part because of that environmental difference, but also because the 2022 version was the first time out for me teaching that course. Presumably I’ve gotten a bit better at doing that. What I can say is that removing the barrier posed by setting up and maintaining working virtual environments yielded a lot of benefits, and I won’t be going back.</p>
<p>I’d like to show some of the final projects (screenshots only, since these aren’t deployed anywhere) to illustrate what’s possible in a semester-long course when you don’t have to spend as much time on configuration and installation issues. In each case, the student in question gave me permission to display these screenshots. A couple of things they have in common: all of these were built using Python’s handy Flask library, along with some JavaScript. Most of them involve loading data from some external source, although one of them does text extraction from PDFs scraped using Selenium. One of the advantages of using Codespaces has been that I can see and run those setup and loading tasks; I don’t just see the final result.</p>
<p>The first is an app that displays information about sites with <a href="https://www.epa.gov/pfas/pfas-explained">PFAS contamination</a> - long-lasting chemicals whose components can take years to break down. Amanda Hernandez, who graduated in May, made this app that allows users to find places on a map and bring up details, or to search a table presented using the DataTables JS library.</p>
<p><img src="https://www.thescoop.org/archives/2023/05/27/teaching-news-apps-with-codespaces-results/pfas_homepage.png" class="img-fluid"></p>
<p>While News Apps isn’t a design course - and I’m not the person to teach one - we do look at the work done by newsrooms like ProPublica and others for some basic guidelines. Many of the students come into the class having taken design-related courses previously, too.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/05/27/teaching-news-apps-with-codespaces-results/</guid>
  <pubDate>Sat, 27 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching News Apps with Codespaces</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/03/22/teaching-newsapps-with-codespaces/</link>
  <description><![CDATA[ 





<p>The first version of my News Application Development class at Maryland got off to a rough start.</p>
<p>Not because of the students; I had seven intrepid undergraduates and grad students take the leap into a class that we previously hadn’t offered and I had never taught. They were up for it, if not exactly certain what actually was going to happen in our class. As this was the first brand-new class that I had developed at Maryland, I wasn’t totally certain, either.</p>
<p>What I did know was that I wanted students to spend a lot of time on the command line working in Python to acquire public data and build things from it. To do that, I had to make sure that each of them would be able to do similar work on their own laptops, which meant an early session of class was titled “Install Party!”.</p>
<p>Friends, it was not a party. Or maybe it started out as one and then, well, <a href="https://www.youtube.com/watch?v=jJ9H-uT64Wo">the Slickee Boys can take it from here</a>.</p>
<p>I am, for better or worse, an Apple computer person and have been for awhile. Our college has both PCs and Macs, although students mostly have access to the latter if they need to use a computer other than their own. But really, students have been taught since high school (maybe before) to just use their own computers. Pandemic restrictions only reinforced that. More to the point, they are taught specific programs and <a href="https://www.thescoop.org/archives/2013/10/01/the-natives-arent-restless-enough/">mostly not encouraged to explore the limits of the machine that plays a big role in their lives</a>. To a certain extent, that’s not a bad thing to do; the software we use to teach data journalism, RStudio, is itself mostly a GUI experience.</p>
<p>For many of my students, installing languages and libraries was a new and uncomfortable experience. That’s not the hard part; students are mostly interested in new things. The hard part is the lack of consistency across their laptops. They not only ran into problems installing and setting up Python, they ran into <em>different</em> problems. Some of them were platform-related: we had a couple of Windows users. Most of the Mac users had never before installed XCode or its command-line tools and didn’t understand the purpose or know what to expect. The Windows users had it worst; I had forgotten most of what I used to know about doing web development work in that environment.</p>
<p>For the most part, we figured it out eventually. But that cost us both time and, I’m sure, some level of enthusiasm. Who wants to start out a new thing by flailing around for awhile? One student ended up installing a Linux subsystem to make things easier, which definitely resolved a lot of problems but is not something I’d realistically be able to insist upon. One of the lowest points was not being able to understand why something wasn’t working for a student when it was on my laptop. “Works for me” is a statement of failure for teachers.</p>
<p>This technical tax also has some more pernicious effects. Some number of students show up at the University of Maryland armed with a solid ChromeBook, which is what they were told they would need in high school. I can understand why; it’s a basic laptop that teenagers can use on common tasks that doesn’t cost a ton of money. School districts can and do provide them. But let’s be honest here: showing up to journalism school with a ChromeBook is like bringing a knife to a gun fight: there are many things you can do, but your range of options (and ultimately, effectiveness) are limited. And let’s be even more honest: the same students who are showing up with ChromeBooks most likely are those who cannot afford more expensive hardware. Don’t think for a moment that they can’t look around the classroom and see that situation, and wonder how they’re going to keep up.</p>
<p>There’s a larger argument to be made about colleges providing students with options for getting the equipment they need to take the classes they want and to succeed in them, but here’s my stop-gap solution. This semester’s News Apps class had no install party, even with twice as many students. There has been very little class time spent on making sure that things are configured properly. We all use <a href="https://github.com/features/codespaces">GitHub’s Codespaces</a>.</p>
<p>I will try not to turn this into a lovesong to this product, but honestly it has solved many of the problems that I encountered last year. More importantly, it has solved a lot of my students’ problems in the sense that they can focus the bulk of their time trying to learn how to do things as opposed to how to prepare to do things. Codespaces is a virtual machine in a browser that gives you a terminal, the ability to install, configure and run most things you’d need to for web development and related tasks, including running web servers so you can see the results of your work. As it’s a GitHub joint, it works off repositories and is already setup so that users can push and pull their work. I’ve even gotten RStudio to run using the RStudio Server version. And it’s not just a terminal; they get a code editor and a file manager, so they aren’t left staring at a shell wondering what this even is.</p>
<p><img src="https://www.thescoop.org/archives/2023/03/22/teaching-newsapps-with-codespaces/rstudio_codespaces.png" class="img-fluid"></p>
<p>Here’s how it works: educators can get access to Codespaces for their students - up to 180 hours a month, which so far has been more than sufficient to the task - by setting up a GitHub Classroom account for your course. You use GitHub Classroom to create assignments; when students accept them, a repository is created in a GitHub organization you setup.</p>
<p>You can customize the virtual machine that students get, with the default being a typical Linux distribution, and you can have it come with certain packages already installed. For the purposes of working in Python, the default setup gets you access to <code>pip</code>, <code>pipx</code>, <code>pipenv</code> and probably other package managers.</p>
<p>When I spoke about how our class is using Codespaces at <a href="https://www.ire.org/training/conferences/nicar-2023/">NICAR</a> a few weeks ago, it was to a room full of educators for whom the benefits are pretty clear: everybody can work from the same setup, you can control the environment and even run students’ code in a Codespace of your own. It’s definitely handy for instructors.</p>
<p>But more and more, I see this as much an equity issue. Codespaces doesn’t guarantee a good outcome - you can still write terrible code or neglect to install required libraries. But, relatively-speaking, equality of opportunity? That’s a big deal for journalism students who mostly have never written software. Some students come into classes like this already convinced that they aren’t good at this work, and setup problems - especially when others don’t have them - only reinforce that idea. Let’s not do that. Old-timers like me can wax nostalgic about how difficult things used to be and all the hoops we had to jump through to make even basic stuff work. That’s good material for a NICAR dinner. Our students deserve better, and we can provide it.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/03/22/teaching-newsapps-with-codespaces/</guid>
  <pubDate>Wed, 22 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Teaching Journalism with ChatGPT</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/02/11/teaching-journalism-with-chatgpt/</link>
  <description><![CDATA[ 





<p><em>You’ll want to read Jeremy Littau’s piece titled “<a href="https://jeremylittau.substack.com/p/whos-afraid-of-chatgpt">Who’s Afraid of ChatGPT?</a>” for a more foundational view on this topic.</em></p>
<p>At first glance, the idea that one of my students could take an assignment from my Data Journalism class - say, summarizing data using R and the Tidyverse - and ask an AI chatbot to provide the answer (or something that gets close to it) should be slightly terrifying.</p>
<p>Need to know the proper syntax for creating a dumbbell chart using ggplot? What about the code to scrape tabular data from a government website? Ask your online pal.</p>
<p>What’s my job, exactly?</p>
<p>I tell people that I teach data journalism skills to students, and that’s true. But the real story is, inevitably, more complicated. One time during a classroom exercise involving actual data, a student asked whether the answer she got was “correct”, knowing that the data was missing some values and structured in a way that made answering the question difficult.</p>
<p>“What is truth?” I half-jokingly replied.</p>
<p>If you use ChatGPT and similar services, at some point you’ll probably end up with the same reaction.</p>
<p>So yes, I do teach R and Python and SQL, but there are other people who teach those subjects who know more about them than I do. We have entire departments filled with smart people who study how to use these tools and who use them far more extensively than I do. I teach about tools <em>for journalism</em>, and that’s where the emphasis needs to be.</p>
<p>Those tools make it possible to do more rigorous journalism, to go from the anecdotal to the systematic. But they do not do these things by themselves. Good journalism adds context, identifies and explains priorities and significance. Teaching data journalism isn’t just, to borrow a phrase from <a href="https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1740-9713.2012.00605.x">Amanda Cox</a>: “Here’s some data; hope you find something interesting!” We start with a question and ask more, refining our inquiry based on what we discover. We analyze and describe. If AI tools can help with that process, I want my students to know how.</p>
<p>My policy, at least for now, is this: I want my students to use ChatGPT and other AI services to help them solve specific problems, and I want to know about it when they do. Here’s what I put in my syllabi:</p>
<blockquote class="blockquote">
<p>The basic rule is: if you use it, you must disclose that you did so in that assignment’s submission, and include any prompts you provided to the tool. Sources matter.</p>
</blockquote>
<p>If I’m asking students to find some meaning in data, maybe a pattern or outlier that’s newsworthy, and they have an idea of how to do that but spend an hour struggling to get the precise syntax correct, that’s probably not going to be a great learning experience. Some of them might be energized by the challenge, I suppose, but is that the point? If they can find assistance in finishing a task so they can actually answer the question, that’s the important part to me.</p>
<p>There are always ways to misuse tools and risks involved in any process that provides efficiency at the expense of step-by-step work. That’s not new, but AI can make the risks greater because there’s an implied authority that we bestow (a whole other, if related, problem). AI systems are and will be problematic and potentially harmful, like any human-designed system. We are still early in figuring out the harms. That’s an argument for engaging them as journalists, not for shying away.</p>
<p>If this seems like soft-headed mollycoddling, I would submit to you that the many hours I spent trying to wrangle data from electronic PDFs before <a href="https://tabula.technology/">Tabula</a> came along were not exactly instructive. I learned that there are dozens of ways to lock data inside a PDF prison. It makes for a slightly funny story at conferences, but I would have done better things with my time - maybe better stories - had I had a better tool.</p>
<p>The bit about disclosing the prompts is key for journalism students. One of my hobbyhorses is that we don’t do a good enough job of teaching student journalists how to ask good questions. Partly that’s because we focus a lot of attention on the final product, typically a story, and partly it’s because it’s both easier and consistent to have students complete the same kinds of assignments. We also overestimate the quality of our ideas a lot, and don’t interrogate them as much as we should.</p>
<p>I want to know what my students are asking from ChatGPT and other AI products, not just because the prompts and the answers are related, but because precise questions are more likely to yield specific answers. I’d like to know if my students are getting better at asking questions.</p>
<p>If my students can learn to use AI systems with creativity, curiosity and skepticism, they’re going to be better journalists. If they can ask better questions and have more experience and confidence in evaluating the results, they’re going to be better journalists.</p>
<p>What’s my job, exactly? I teach data journalism skills to students. If I end up spending more time developing that questioning skill, I suspect that’s going to make a bigger difference in the long run.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/02/11/teaching-journalism-with-chatgpt/</guid>
  <pubDate>Sat, 11 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What is Happening in Morgantown?</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2023/01/04/what-is-happening-in-morgantown/</link>
  <description><![CDATA[ 





<p>When <a href="https://mountainstatespotlight.org/author/ken-ward/">Ken Ward Jr.</a> and I got to teach an investigative reporting class at West Virginia University in the fall of 2019, one of the regular assignments we had was to give students some state government report to read and ask them to generate newsworthy questions from it.</p>
<p>This exercise started out pretty rough. Even though questions are the backbone of journalism, there aren’t many journalism classes that assign them specifically. Usually the assignment is to write a story based on an event or interviews, and the assumption is that in doing that students will come up with relevant and interesting questions. But if you’re not covering a beat or an expert on a topic, investigative story ideas don’t just appear from thin air. They almost always derive from good questions.</p>
<p>At first, the questions we got were ok; often they were definitional, which makes sense since we were introducing new subjects and findings nearly every week. “What does X mean?” or “Why is Y important?” These aren’t bad questions, but they also indicate an introductory level of understanding of the subject. For a lot of journalism assignments, including investigative work, that’s a necessary step. The problem was that many of them focused on things that weren’t the most important thing.</p>
<p>Here’s an example: one of the reports we had students read was from the West Virginia Board of Registered Nurses (see a more recent example <a href="https://www.wvlegislature.gov/legisdocs/reports/agency/R02_FY_2022_15836.pdf">here</a>) showing, among other things, the number of registered nurses by county and specialty. The table looks like this:</p>
<p><img src="https://www.thescoop.org/archives/2023/01/04/what-is-happening-in-morgantown/wv_nurses.png" class="img-fluid"> The specialties are listed across the top, each letter corresponding to a value like “Cardiology” or “Pediatrics”. The letter “J” stands for “Maternal-Obstetrics”. Most of the questions we got were ones such as “Why do Cabell, Kanawha and Monongalia have so many more nurses?” which has a quick answer - they have more people living there. Look at the data longer, though, and you start to ask other, better questions, like: “How many WV counties have literally zero maternal/OBGYN nurses living there?” More than half the state’s counties have none, although there are maternal nurses living in other states who work in West Virginia. Or “What’s it like to be the only maternal health nurse in the whole county?” These are better questions that could lead to great stories.</p>
<p>In order to make this exercise more relevant to our WVU students, we looked at <a href="https://police.wvu.edu/clery-act/campus-safety/crime-log">campus police incident reports</a>. The information is not exactly in a useful format; it requires that people visit the site repeatedly and also “scrolls off” earlier reports after 90 days or so. In other words, a perfect candidate for scraping. So that’s what I did, <a href="https://github.com/dwillis/wvu-projects/tree/master/crime-log">writing some Python code to grab the latest reports</a> and then using GitHub Actions to automate that process every day. The result is <a href="https://github.com/dwillis/wvu-projects/blob/master/crime-log/crime_log.csv">a CSV file</a> with more than 13,000 rows.</p>
<p>Not many of us want to look at huge CSV files a lot, which is why we have other software to help us do that. The best software for this purpose is one that allows, even encourages, users to ask questions of the data. That’s what <a href="https://datasette.io/">Datasette</a> is great at. So after updating the CSV file with the latest WVU crime incident reports, I have GitHub Actions build out <a href="https://wvu-crime-log.fly.dev/wvu/crimelog">a Datasette instance</a> to display it.</p>
<p>That brings me back to the title of this post: What is happening in Morgantown? Seems like a pretty basic question, but where it comes from is asking other questions of this data, and specifically grouping by and counting the number of reports. I start by grouping the reports by year (I’ve been collecting this data since the fall of 2019, so that year doesn’t have full data). Looking at <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year">those yearly totals</a>, you can see 2020 stand out, which, given COVID, seems logical.</p>
<p>I’ve been looking at this data since 2019, and when you do that you start to get an idea of what the ebb and flow of it <em>should</em> look like. So when you see rare events, your brain might notice them. But that’s not the only way to find out if something has changed. Throughout the pandemic we heard a lot about students’ mental health struggles. Does that show up at all in campus police incidents? At the most extreme end we could look at references to suicide. It turns out that there are several incident titles that contain the word “suicide”, so let’s look at those.</p>
<p>One of Datasette’s key features is to allow you to execute arbitrary SQL statements, such as performing wildcard searches. Here are <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;title__contains=SUICIDE&amp;_sort_desc=datetime">the results of searching for where <code>title</code> contains “SUICIDE”, grouped by year</a>. There were nearly twice as many reports of attempted or threatened suicide recorded by WVU police in 2022 than in 2021. Nearly twice as many.</p>
<p>Which leads to these questions: what is happening in Morgantown? Is there an actual increase in suicidal behavior? Is this better reporting by police? An increased awareness of suicide leading to more willingness to report it? Something else entirely? I hope that someone in Morgantown is asking them.</p>
<p>A less extreme but very common incident on and around college campuses is a violation of alcohol laws. In West Virginia, these are known as “ABCC Violations”. Focusing on those, once again grouping by year, we can see that <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;_sort_desc=datetime&amp;_facet=title&amp;title=ABCC+VIOLATION&amp;_facet=outcome">there were more violations reported in 2021 than in 2022</a>. Interesting, perhaps, but let’s bring in report outcomes - the disposition of each incident. The two most common outcomes are “Clear by Citation” and “Clear by Warning”. If we drill down into the first, we can see a huge change between 2021 and 2022: the number of ABCC violations that ended in citations <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;_sort_desc=datetime&amp;_facet=title&amp;title=ABCC+VIOLATION&amp;_facet=outcome&amp;outcome=Clear+by+Citation">dropped to just 31 last year, compared to 136 the previous year</a>. Warnings, meanwhile, <a href="https://wvu-crime-log.fly.dev/wvu/crimelog?_facet=year&amp;_sort_desc=datetime&amp;_facet=title&amp;title=ABCC+VIOLATION&amp;_facet=outcome&amp;outcome=Clear+by+Warning">were higher in 2022</a>. What changed? Was this an announced policy?</p>
<p>Good data exploration might provide some answers, but at a minimum it should produce more questions. Some of those might turn out to be pretty good stories.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2023/01/04/what-is-happening-in-morgantown/</guid>
  <pubDate>Wed, 04 Jan 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome Back</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2022/12/31/welcome-back/</link>
  <description><![CDATA[ 





<p>It feels like a good time to start writing again, but this isn’t a totally fresh start. As I’ve tried to de-emphasize the time and attention that I’ve given to Twitter over the past few years, I realized that I still have things that I want to talk about. I don’t have a newsletter, or a podcast. But since 1998 or so, I have had a blog, and that’s what I’m coming back to. Thanks to <a href="https://dansinker.com/">Dan Sinker</a> for the push I needed to get this going again.</p>
<p>I’ve rebuilt this site to combine what used to be “here” on thescoop.org and some of what had been sitting around in other places. There are and will be more personal posts here, but the focus will be on what I like to write about: the combination of data, journalism and learning. Since joining the faculty at <a href="https://merrill.umd.edu/">Merrill College</a>, I’ve had so many questions and discussions with my colleagues near and far about teaching: what works and doesn’t, and what we could try. So there will be a fair bit of that here.</p>
<p>The move to academia also has given me a bit more freedom in terms of what I can say about this profession and how it is changing. I’ve spent the past year learning R and with this rebuild I’m able to share code in a way that hopefully is more useful, too.</p>
<p>So what to expect here? Hopefully fewer rants than I churned out a decade or more ago, and more nuance. Some more R (and Python) code, and descriptions of experiments we’re trying out at Maryland. I’ve included a bunch of posts from 2002 onward that I think represent the best (or sometimes worst) of what I’d like to do here. There’s always my optimistically-named series <a href="https://www.thescoop.org/thefix/">“The Fix”</a>. I’m still trying to figure out whether or how to do comments, but you can always email me or find me elsewhere online (Mastodon, while mostly lurking on Twitter these days).</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2022/12/31/welcome-back/</guid>
  <pubDate>Sat, 31 Dec 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The More Important Problem</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2019/03/09/the-more-important-problem/</link>
  <description><![CDATA[ 





<p>The first indication that I did not approach this <a href="http://thescoop.org/archives/2019/02/24/making-the-best-nicar-listserv/">NICAR-L improvement project</a> in the right way should have been when I posted on GitHub a CSV file with metadata from 16 years’ of posts to the listserv. Not long after, I got a message saying that maybe I should take it down because it disclosed individuals’ email addresses.</p>
<p>“Huh,” I thought. “Why would it be a problem for journalists’ emails to be public?” I asked myself, a guy who has been on the listserv for more than 20 years whose worst experience on it consists of people I respect dunking on me in a way that I wouldn’t object to. The social and professional risk of posting on the listserv is low for me, but not for everyone. The Internet, by and large, has been a pretty safe place for me, but not for everyone.</p>
<p>If I needed any reinforcement of that initial indication, it came when I looked at the small group of people who showed up at <a href="https://www.ire.org/events-and-training/event/3433/4362/">the conference session</a> to talk about ways to improve the listserv experience. The folks who came – all good, smart people – had this much in common: they were, like me, white guys. I had billed the session as an attempt to explore technical solutions that would make the listserv more useful for its expanding community of users. Maybe even a chance to restore the listserv’s culture to what it had been in the days when the community numbered in the hundreds, not the thousands. You know, when it was mostly guys like me who shared a lot of the same experiences.</p>
<p>That I had not really thought much about how different people experience the listserv differently says a lot about the actual challenge we face in trying to make NICAR-L more useful for everyone (and something about me, too). The easier lesson is that technical solutions may be necessary to achieve the goal of a better listserv, but they are not sufficient. The harder - and more important - lesson is that if we want things to improve, we’ll need to think hard about what factors into individual decisions to post and not post, and what kind of community we want. Otherwise the technical work won’t be addressing the more important problem.</p>
<p>There’s a <a href="https://docs.google.com/document/d/13QdI3J8GQm-ECFsQx6Bllwrz2epZ6BXdtV2bsRAQxeI/edit?usp=sharing">Google doc</a> from our initial discussion that includes some potential goals and ideas we talked about. All of them are possible and many of them could make a real difference, even if only in a small way. I don’t think any of them are outlandish or techno-utopianism run amok. (You can, if you like, comment on them.)</p>
<p>But the idea that we could make fundamental improvements in the listserv experience without addressing the culture that surrounds it is folly. We can’t recommend NICAR-L to students and newcomers and then expect them to magically know how to adjust to whatever tone and culture they find if we don’t define the culture we want and build the processes that encourage it. We also can’t consider the listserv in isolation. The NICAR crowd has other options for sharing knowledge and building community, from Slack to affinity groups, and those are unlikely to disappear. Those competitors might help inform how we consider the listserv, too.</p>
<p>So what’s the current culture of NICAR-L? I’m not sure I have a good answer, because my own perception is influenced by how I experienced it 15-20 years ago. One of the participants at the conference session said he doesn’t post because he’s not sure who is on the listserv. When I was an active participant that wasn’t a concern for me. Now, I get the sense that NICAR-L is not as homogenous as it was (which is a good thing for many reasons) and that there’s also greater uncertainty about what the listserv is for and what people should expect from it. That’s a shame, because I really believe that there is a lot of value not just in the archives but in the current membership. But in my excitement about the possibilities, I looked right past the idea that human problems often require human intervention.</p>
<p>Here’s what I’m going to do: I’d still like to explore some of the ideas that were raised at the conference session, with the goal of trying to understand the culture of the listserv and how we all react to it. And I’d like to do what I can to encourage all of us to talk about what we want from the listserv and what we need to get there. For me, one step is to re-engage more on the listserv. Ultimately, technology will only make a difference if we have clear understanding of the problems we’re trying to solve and if we’re willing to have an open conversation about the kind of culture we want to have.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2019/03/09/the-more-important-problem/</guid>
  <pubDate>Sat, 09 Mar 2019 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The NICAR-L Improvement Project</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2019/02/24/making-the-best-nicar-listserv/</link>
  <description><![CDATA[ 





<p>If you’re coming to the <a href="https://www.ire.org/events-and-training/conferences/nicar-2019">2019 CAR Conference</a> in March, chances are you’re a member of the <a href="https://www.ire.org/resource-center/listservs/subscribe-to-nicar-l">NICAR-L listserv</a>. The only session idea I pitched this year was on <a href="https://www.ire.org/events-and-training/event/3433/4362/">how to make the listserv better</a>, and I’d love your help.</p>
<p>Listservs are fascinating social experiments. People join, ask questions of strangers and then hopefully through discussion become fuller members of a community. When it works, it’s one of the best things about the Internet. When it doesn’t, the whole point of a listserv - the sharing of knowledge - falls apart. NICAR-L is no different from any other listserv, but because IRE is a member-driven organization, we’ve got a chance to make real improvements using the skills we have.</p>
<p>If you’ve been a member of NICAR-L as long as I have – since at least 1997, as near as I can figure – then you know how much it has changed. There are many more people on it now, which is really great. Interest in our little corner of the journalism world has grown and people want to figure out how we do what we do. That growth naturally brings some challenges with it.</p>
<p>Here’s one example: about six years ago I made a new Gmail label: “Best of NICAR”. That was my way of dealing with a listserv that, in my view, suffered from a lot of repeat questions and the loss of shared understanding that can happen when a community experiences rapid growth. I know that I interact less on the listserv, and I’m pretty sure I’m not alone in that.</p>
<p>To be very clear: NICAR-L’s growth is itself a very good thing, particularly in that it has brought different voices into our community with different ideas and problems. When I joined IRE, the CAR conference was attended by 300-400 people, mostly white men with very similar interests and backgrounds. Many of the questions on the listserv were ones that a lot of us had in our minds, which made the conversation “easier” if not better.</p>
<p>We cannot and should not attempt to return to the time when most CAR conference attendees knew of each other (or actually knew each other). We should try to have a listserv that provides the kind of guidance and community that I was fortunate to have as a younger journalist.</p>
<p>The CAR conference session this year is pretty vaguely defined, and there’s a limit to what we can accomplish in an hour. That’s why I’m writing this, to put forth my hopes and (this being the CAR conference) some data we can use. This isn’t a fixed road map, just a starting point.</p>
<p>Some possible goals:</p>
<ul>
<li>Making the most useful posts and threads easier to find.</li>
<li>Creating a categorization scheme of some kind, or adapting an existing one.</li>
<li>Making it possible for users to provide feedback on the usefulness of posts.</li>
<li>A better UI for the listserv archive.</li>
<li>Making it easier to find answers to common questions.</li>
</ul>
<p>Many of these would require a separate web app, and while IRE has been extremely encouraging of this effort, I think it’s difficult to expect the organization to, say, redirect money dedicated to newsroom trainings towards listserv improvement. What might make such improvements more likely is the active involvement of IRE members. That’s where you come in.</p>
<p>IRE has very helpfully provided listserv archives from 2002 to the end of 2018. We’ll make those available to session attendees, although I’m not posting them on the Internet. As a starter, however, I’ve <a href="https://github.com/dwillis/nicarl-archives">posted on GitHub</a> a basic Python parser and metadata from each of the postings.</p>
<p>Some possible questions to explore:</p>
<ul>
<li>Can we identify valuable or interesting threads?</li>
<li>Can we identify common questions repeated often?</li>
<li>Are there categorization schemes we can apply to posts or even post metadata?</li>
</ul>
<p>What else can we do to make NICAR-L better? Feel free to add an issue on the GitHub repository or even post a thread on the listserv!</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2019/02/24/making-the-best-nicar-listserv/</guid>
  <pubDate>Sun, 24 Feb 2019 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Best Training</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2018/04/05/the-best-training/</link>
  <description><![CDATA[ 





<p>I’ve been asked by students what the best training is to be a journalist. My position on this is very clear: waiting tables at a honeymoon resort is the best training.</p>
<p>No, really, that’s it. After you’ve delivered breakfast in bed to people who arrived late the night before, probably hammered, and now in the early morning can’t find the door, much less their pants, you can pretty much deal with any sort of situation that requires human interaction.</p>
<p>Interviewing strangers can be hard. But most of them are at least wearing some clothes, which reduces the awkwardness, you know?</p>
<p>I spent four summers and various holidays at a honeymoon resort in the Pocono Mountains of Pennsylvania, one of the places with those giant fiberglass jacuzzis shaped like champagne glasses. Should you go, please listen carefully: the instructions say you put a CAP-ful of bubble bath into the jacuzzi. Because it’s a jacuzzi, not a bath for an infant. If you pour the whole bottle in, you get that TV commercial where the bubbles grow eyes and fan out across the floor like an invading army. Housekeeping will hate you even more, and that’s an achievement for people who are cleaning up after you and your beloved have tried out the place, if you know what I mean. One cap-ful. I can’t set the breakfast tray down if the table is covered by 3 feet of bubbles.</p>
<p>Here’s how it works: I’d drive a golf cart equipped with a tray-carrying back up to your door, grab the trays and start knocking. You could always tell if a couple was new because you’d hear them crashing into unfamiliarly-placed furniture on their way downstairs. There are windows in some of these rooms, but generally honeymoon resorts aren’t the place where you want an audience. When the man (it’s almost always the man) opens the door, he usually realizes two things: one, that the presence of sunlight has temporarily blinded him, and two, that there is an ACTUAL PERSON standing there with breakfast. He immediately tries to hide his body behind the door.</p>
<p>That’s a pretty smart play, with one flaw: the walls of the place are covered in mirrors. Ain’t no hiding place here, buddy, and I can see that I won’t be getting a tip because YOU HAVE NO PANTS ON.</p>
<p>There are two approaches here: you can do the silent nod, drop off the tray and get out of there as quickly as possible. That’s the route most newbies take, because I mean, it makes sense. Why would you want to hang around and chat? But that’s what the veterans know: the cheerier you are - “GOOOOD MORNING!” - and the longer you linger, the better the chance that you turn the awkward tables on your already uncomfortable hosts. You do this all the time - they don’t. That’s when you gotta do the small talk, asking how their stay has been, whether they’ve used the jacuzzi yet, or just saying how nice it is outside. After a few seconds, you can tell if he’s going to go back upstairs and get some money or not.</p>
<p>The only real risk with lingering is that you get asked to play photographer. Yes. That is a thing. Ok, it’s not a naked thing, but it’s still a thing. Sometimes people want to have their picture taken on the bed, because it’s a round bed and, really, when are you going to be lying in a round bed again? The photo session is high on the discomfort factor, but if you stick it out you almost always get a tip. And you’ve definitely entitled to give the head nod when the couple arrives for dinner that evening. No waving, though. That’s just weird.</p>
<p>Repeat that process 15-20 times a morning for three months and I assure you that approaching complete strangers to talk is nothing, even if you’re asking some pretty personal questions.</p>
<p>That’s the best training. There may be some long-term side effects.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2018/04/05/the-best-training/</guid>
  <pubDate>Thu, 05 Apr 2018 01:20:05 GMT</pubDate>
</item>
<item>
  <title>Academy Fight Song, Part 2</title>
  <dc:creator>Derek Willis</dc:creator>
  <link>https://www.thescoop.org/archives/2017/12/28/academy-fight-song-part-2/</link>
  <description><![CDATA[ 





<p>It begins, as so many things do these days, with a <a href="https://twitter.com/jmart181/status/943316917019955201">tweet</a>.</p>
<p>The tweet references <a href="https://ejobs.umd.edu/postings/55483">an academic job listing</a> from the University of Maryland, where I have taught journalism as an adjunct, and the eye-rolling reactions of professional journalists to it. Like many job listings in the past few years, it has just the right level of “Computer Jesus” in its minimum (!) qualifications:</p>
<blockquote class="blockquote">
<p>The successful candidate will have a passion for journalism and the watchdog role it should play in a democratic society. Research and teaching topics of interest to both schools include data analytics as applied to journalism and/or social media; fairness, accountability and transparency in algorithms; news automation; audience analytics and engagement, including those illuminating trends in politics, society or sports; data visualization; social networks; and/or digital innovation. The successful candidate will be expected to have a Ph.D.&nbsp;at the time of appointment.</p>
</blockquote>
<p>Now, let’s get something out of the way: there are indeed academics who are qualified for this job, and presumably one of them will be hired to do it. My belief that the population of qualified candidates with <em>substantial journalism experience</em> is relatively small may be mistaken; I’d love to see evidence otherwise.</p>
<p>Back to the tweet by <a href="https://communication.depaul.edu/faculty-and-staff/faculty/Pages/martin2.aspx">Jason Martin</a>, who chairs DePaul’s journalism program and previously worked as a reporter. <a href="https://twitter.com/jmart181/status/943316917019955201">Martin’s claim</a> is about how many professionals view their academic counterparts with disdain, to the extent that we think about them at all. That’s a real thing, although I don’t think that’s what motivated my colleagues’ reactions. As a journalist who has taught at the university level for more than 15 years, I think the reason that some of my colleagues who do work in data journalism engaged in the Twitter eye-rolling is pretty clear: the bulk of the most relevant work being done in these areas is being done in newsrooms by professional journalists. Most of them will only ever teach as an adjunct and, despite the efforts of good administrators, are rarely accepted as anything but temporary necessities by traditional faculty.</p>
<p>So, when we hear this: “Professionals fail to recognize the ways our research informs &amp; enhances industry.”</p>
<p>We also hear this: “We need working professionals to teach many of our advanced skills-based classes that we tell students keep us on the cutting edge, but they will never be considered full participants in higher education unless they have credentials we recognize.”</p>
<p>You would roll your eyes, too.</p>
<p>/////</p>
<p>There is no good reason why the study of what used to be called “computer-assisted reporting” and its descendants has languished in relative obscurity at many universities. If you’re looking for academic work on this area, you could start with <a href="http://www.unc.edu/~pmeyer/">Phil Meyer</a>, who practiced journalism using social science methods and then continued his work in academia.</p>
<p>Here’s <a href="http://web.archive.org/web/20070428083511/http://www.asne.org/kiosk/editor/september/meyer.htm">what Meyer wrote in 1996 about journalism education</a>:</p>
<blockquote class="blockquote">
<p>Engineering, medicine, business administration, library science - almost any profession you can name that has research committed professional schools has always generated a continuing demand for new knowledge. Every new graduating class from a school of engineering or medicine is viewed nervously by the practitioners in its field because the kids have knowledge that the old guys don’t. Aging engineers wind up in administrative or sales jobs because the technology has changed faster than their ability to keep up.</p>
</blockquote>
<blockquote class="blockquote">
<p>The sources of that change have been people with research degrees, many of them in universities.</p>
</blockquote>
<blockquote class="blockquote">
<p>Whether you are ready or not, that is happening to us, even on the craft side. New graduates who can create Web pages, digitize photographs and do electronic searching are in demand precisely because they have skills that midcareer professionals haven’t had the time or interest to acquire. There is also demand for newly trained database reporters who have analytical and statistical skills never learned by their seniors.</p>
</blockquote>
<p>The whole thing is worth a read, and then some reflection. It’s not that there aren’t scholars who are examining the use of new technologies or the changes that have overrun journalism in the past 20 years. But Meyer also created and critiqued techniques, like <a href="http://www.academia.edu/860996/The_USA_Today_index_of_ethnic_diversity">The USA TODAY Diversity Index</a> he and Shawn McIntosh, then at the news organization, invented in 1991. His work has been deeply relevant to how we think about journalism but also how we practice it. That’s a big reason why professional journalists doing data-related work hold Meyer in such high esteem.</p>
<p>The sad part is that Meyer could just as easily have published his essay in 2000, 2004, 2008, 2012 or even 2017. Journalism education has not remained exactly the same as it was in 1996 - there are more classes in different areas, including quantitative skills - but these changes have not been broad-based nor have they substantially changed the composition of faculties. Are journalism schools producing the kinds of research now that are guiding newsrooms? Having taught at seven different universities during the past 15 years, my impression is that journalism graduates are more <em>educated</em> and have been exposed to new techniques and technologies, although not in the depth needed. I also believe that the driver of this growth has been the work of industry, not academia. As an aging professional, I worry about graduating kids from other fields more than I do those graduating from most journalism schools.</p>
<p>Advanced degrees, which could be providing the fuel for pushing our field forward, are instead viewed either as necessary credentials just to enter the profession or as a pathway to teaching and research that too often does not address what is happening in the profession, particularly when it comes to the use of quantitative methods.</p>
<p>There are, of course, journalism programs that do a better job of teaching data courses: hiring full-time faculty and even making them eligible for tenure, or offering multiple classes instead of one. But overall the picture is not encouraging. In their 2016 report, <a href="https://journalism.columbia.edu/system/files/content/teaching_data_and_computational_journalism.pdf">“Teaching Data and Computational Journalism”</a>, Charles Berret and Cheryl Phillips surveyed more than 100 journalism programs from the United States and found that “many journalism programs do not have a faculty member skilled in data journalism” and nearly half offer no classes at all. Most are taught by professionals working as adjuncts.</p>
<p>Martin <a href="https://twitter.com/jmart181/status/943327660062724096">suggests</a> that this need not be the case: “And let’s be blunt: good quant PhDs with journalism experience can teach data journalism.” Nobody denies that this is the case, but I’d like to see a list of good quant PhDs with journalism experience currently employed by universities. Is the academy producing enough of them to take over the instruction of data analysis from professionals? If not, is there any expectation of when that might be the case? Are the incentives even in place for this to happen?</p>
<p>Universities that want to serve student needs when it comes to data and digital skills and practices cannot say they are doing it well if they off-load that responsibility to adjuncts teaching upper-level electives or as part of graduate programs that can be prohibitively expensive. Every time I teach, I hear from graduating seniors that they wished they had had <em>any</em> exposure to these types of classes in the past four years - and these are students from R1 research institutions with well-known journalism programs.</p>
<p>The report offers multiple suggestions for changing this situation – all of them useful – but there is a more fundamental issue at play here, the one that Martin’s tweet raises: if there are loads of benefits to journalism that accrue from the work of journalism PhDs, why do many professional journalists think otherwise? What can be done about that? And are universities willing to take those steps?</p>
<p>It’s instructive to look at <a href="https://twitter.com/jmart181/status/943708060643676160">Martin’s response</a> to a question about why a PhD requirement was necessary for that Maryland job:</p>
<blockquote class="blockquote">
<p>Produce research that contributes to development/reputation of dept/college &amp; field. Research lines such as gig in question are expected to create publications thru rigor, peer review. Universities have standards for research productivity &amp; evaluate faculty across disciplines.</p>
</blockquote>
<p>All of these benefit the university, the college/department and the researcher, perhaps in that order. If the research itself has benefits for the industry or teaching, how are those valued? Professionals can rightly look at this situation and think: how does this job benefit the aspect of journalism education most visible to them - the education of future journalists and the study of their craft? These aren’t trolling questions. Professional journalists want to increase the skills of journalism students and the number of them who can do quantitative work. We wouldn’t essentially volunteer our time teaching if we didn’t.</p>
<p>I think there are at least two areas that we need to address. The first is to have academics make their research more accessible (both in terms of relevance and availability) and the second is for professionals to have a way to participate in the conversation about that research in a manner that promotes respect and allows industry concerns to inform academic research.</p>
<p>To do both, we could look to political science, where quantitative methods are blossoming along with an ethos that encourages the sharing of data and research. In early January I’ll be attending the <a href="http://spsa.net/">Southern Political Science Association</a> conference, mostly because it has the academic work that is most relevant to my own professional interests of politics and elections (also, it’s in New Orleans). The work of the people I go to see is very much grounded in academic tradition; it also often speaks directly to current issues and events. I get both story ideas and new ways of thinking about how we are doing (or not doing) our job from this conference, and I can recognize the potential uses for journalism. And increasingly, it’s <a href="https://dataverse.harvard.edu/">easier</a> to get at their data. The potential impacts of quantitative political science research have not been <a href="https://www.nytimes.com/2014/10/29/upshot/professors-research-project-stirs-political-outrage-in-montana.html?_r=0">without controversy</a>, but from a professional perspective these are conversations we need to be having. And political science has done a <a href="https://www.washingtonpost.com/news/monkey-cage/">better job</a> lately of trying to make its research <a href="https://www.vox.com/mischiefs-of-faction">more digestible for general audiences</a>, which communication scholars could use as a basis for experimentation.</p>
<p>In contrast, the <em>theme</em> of the 2017 Association for Education in Journalism and Mass Communication <a href="http://aejmc.org/events/chicago17/about/">conference</a> was “Closing the Gap: Media, Research and the Profession.” <a href="https://guidebook.com/guide/97687/event/16164480/">Here’s the nut</a>: “Professionals no longer need some of the skills taught in our classes, and, too often, research conducted by educators is no longer relevant to a rapidly evolving industry.” Better sharing would help combat this, and it starts small. Journalism academics should insist on publishing their research instead of having faculty bio pages that contain literally no links to their work, <a href="https://communication.depaul.edu/faculty-and-staff/faculty/Pages/martin2.aspx">Dr.&nbsp;Martin</a>. More <a href="https://github.com/mwe400/IJOCNewsOnEarlyWeb">GitHub repositories</a>, more open sharing of work, please. “We’d like to share our research about mass communication but are prevented by publishing agreements” is another classic eye-roller, even if it’s not something within the complete control of academics. Professionals are <a href="https://github.com/datadesk">figuring this out</a>; it’s time academics join us so that they can dispel our weaker (or non-existent) criticism.</p>
<p>The next necessary step to reduce the disconnect that Martin cites is to get more journalists and academics talking about each other’s work. Nikki Usher, a George Washington University professor, graciously (particularly considering <a href="http://thescoop.org/archives/2012/05/13/lost-in-the-weeds/">my reaction</a> to our initial encounter) offered to organize such a session last year when I was <a href="https://github.com/dwillis/systems-for-reporting">teaching</a> at GW’s School of Media and Public Affairs. <a href="https://twitter.com/nikkiusher/status/943479839784423424">Her description of the session</a> is accurate; I’d only add that I don’t look to academics to develop literal tools for use in the newsroom but to <em>evaluate</em> what we’re doing in a way that we often can’t do. Some of the ideas I offered up include things that probably do sound trivial or boring to researchers, but as newsrooms are literally redefining their structures and operations, even measuring the outputs would help advance our understanding of the craft. These conversations will be awkward or even uncomfortable at times; they are all the more necessary for it. Prof.&nbsp;Usher’s has <a href="https://medium.com/@nikkiusher/does-anyone-care-about-journalism-research-no-really-358d789b749a">thoughts on this process that are worth reading</a>, although in some cases I think she answers glib questions with glib answers.</p>
<p>I am not anti-academic. I saw the frustrations my dad dealt with in achieving his PhD and securing a university job that expected published research. My own undergraduate education was more theoretical (<a href="https://theconversation.com/defending-science-how-the-art-of-rhetoric-can-help-68210">rhetoric!</a>) than practical, and the time I have spent teaching has been some of the most rewarding of my career. But I am increasingly concerned that the imbalance between professionals and the academy, in which both of us retreat to our corners and snipe at the other, is not only corrosive to both but poses a larger threat to journalism education. I’m not sure that data journalism is best taught in an academic setting, that the existing incentives and structures offer few rewards for those who try and serve students and industry poorly. I think that segment of journalism education could actually be done better outside the university setting, which would be problematic for schools trying to attract students. Mostly, I’m not sure how much more I want to participate in a system that takes our energy and time but isn’t interested in supporting work that isn’t connected to a PhD, as <a href="https://twitter.com/SStirling/status/943667810567360514">Stephen Stirling puts it so well</a>.</p>
<p>If we want to bridge this gap, maybe what’s necessary is for professionals who teach data-related classes to teach <em>less</em> and to focus more on discussing research and advising both journalism schools and student journalists. I serve on councils for the <a href="https://www.jou.ufl.edu/">University of Florida</a> and <a href="https://mediainnovation.wvu.edu/">West Virginia University</a>, and perhaps that is where I can make more of a difference, along with trying to serve as a mentor for individual students and young professionals. The hard reality is that my teaching experience has increased the disconnect between my own work and the academic institutions that prepare students for it, not helped to narrow it. We all lose when that gap persists, but students lose the most, and in the end we will all pay for it.</p>



 ]]></description>
  <guid>https://www.thescoop.org/archives/2017/12/28/academy-fight-song-part-2/</guid>
  <pubDate>Thu, 28 Dec 2017 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
