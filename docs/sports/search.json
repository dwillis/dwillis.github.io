[
  {
    "objectID": "cowplots.html",
    "href": "cowplots.html",
    "title": "28  Arranging multiple plots together",
    "section": "",
    "text": "Sometimes you have two or three (or more) charts that by themselves aren’t very exciting and are really just one chart that you need to merge together. It would be nice to be able to arrange them programmatically and not have to mess with it in Adobe Illustrator.\nGood news.\nThere is.\nIt’s called cowplot, and it’s pretty easy to use. First install cowplot with install.packages(\"cowplot\"). Then let’s load tidyverse and cowplot.\n\nlibrary(tidyverse)\nlibrary(cowplot)\n\nWe’ll use the college football attendance data we’ve used before.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nattendance &lt;- read_csv(\"data/attendance.csv\")\n\nRows: 146 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (12): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMaking a quick percent change.\n\nattendance &lt;- attendance |&gt; mutate(change = ((`2024`-`2023`)/`2023`)*100)\n\nLet’s chart the top 10 and bottom 10 of college football ticket growth … and shrinkage.\n\ntop10 &lt;- attendance |&gt; top_n(10, wt=change) |&gt; arrange(desc(change))\nbottom10 &lt;- attendance |&gt; top_n(10, wt=-change) |&gt; arrange(change)\n\nOhio State is benefiting from the extended playoffs, but hello, SMU and Indiana!\nOkay, now to do this I need to save my plots to an object. We do this the same way we save things to a dataframe – with the arrow. We’ll make two identical bar charts, one with the top 10 and one with the bottom 10.\n\nbar1 &lt;- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\n\nbar2 &lt;- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\nWith cowplot, we can use a function called plot_grid to arrange the charts:\n\nplot_grid(bar1, bar2) \n\n\n\n\n\n\n\n\nWe can also stack them on top of each other:\n\nplot_grid(bar1, bar2, ncol=1) \n\n\n\n\n\n\n\n\nTo make these publishable, we should add headlines, chatter, decent labels, credit lines, etc. But to do this, we’ll have to figure out which labels go on which charts, so we can make it look decent. For example – both charts don’t need x or y labels. If you don’t have a title and subtitle on both, the spacing is off, so you need to leave one blank or the other blank. You’ll just have to fiddle with it until you get it looking right.\n\nbar1 &lt;- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2024. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 &lt;- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2) \n\n\n\n\n\n\n\n\nWhat’s missing here? Color. Our eyes aren’t drawn to anything (except maybe the top and bottom). So we need to help that. A bar chart without context or color to draw attention to something isn’t much of a bar chart. Same with a line chart – if your line chart has one line, no context, no color, it’s going to fare poorly.\n\nnw &lt;- bottom10 |&gt; filter(Institution == \"Northwestern\")\nsm &lt;- top10 |&gt; filter(Institution == \"SMU\")\n\n\nbar1 &lt;- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=sm, aes(x=reorder(Institution, change), weight=change), fill=\"blue\") + \n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2023 But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 &lt;- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=nw, aes(x=reorder(Institution, change), weight=change), fill=\"purple\") + \n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2)",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Arranging multiple plots together</span>"
    ]
  },
  {
    "objectID": "multipleregression.html",
    "href": "multipleregression.html",
    "title": "10  Multiple regression",
    "section": "",
    "text": "Last chapter, we looked at correlations and linear regression to predict how one element of a game would predict the score. But we know that a single variable, in all but the rarest instances, is not going to be that predictive. We need more than one. Enter multiple regression. Multiple regression lets us add – wait for it – multiple predictors to our equation to help us get a better fit to reality.\nThat presents it’s own problems. So let’s get set up. The dataset we’ll use is all men’s college basketball games between 2015 and 2024.\nFor this walkthrough:\n   Download csv file\n\nWe need the tidyverse.\n\nlibrary(tidyverse)\n\nAnd the data.\n\nlogs &lt;- read_csv(\"data/cbblogs1524.csv\")\n\nRows: 98161 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team,...\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (2): Blank, season\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne way to show how successful a basketball team was for a game is to show the differential between the team’s score and the opponent’s score. Score a lot more than the opponent = good, score a lot less than the opponent = bad. And, relatively speaking, the more the better. So let’s create that differential. Let’s add in net rebounds. And because we’ll need it later, let’s add the turnover margin.\n\nlogs &lt;- logs |&gt; mutate(\n  Differential = TeamScore - OpponentScore, \n  NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,\n  TurnoverMargin = TeamTurnovers - OpponentTurnovers)\n\nThe linear model code we used before is pretty straight forward. Its field is predicted by field. Here’s a simple linear model that looks at predicting a team’s point differential by looking at their net turnovers.\n\nrebounds &lt;- lm(Differential ~ NetRebounds, data=logs)\nsummary(rebounds)\n\n\nCall:\nlm(formula = Differential ~ NetRebounds, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-59.216  -8.579  -0.233   8.203  78.185 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 0.651821   0.041475   15.72   &lt;2e-16 ***\nNetRebounds 1.072698   0.004278  250.72   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 12.97 on 98133 degrees of freedom\n  (26 observations deleted due to missingness)\nMultiple R-squared:  0.3905,    Adjusted R-squared:  0.3904 \nF-statistic: 6.286e+04 on 1 and 98133 DF,  p-value: &lt; 2.2e-16\n\n\nRemember: There’s a lot here, but only some of it we care about. What is the Adjusted R-squared value? What’s the p-value and is it less than .05? In this case, we can predict about 39 percent of the difference in differential with the net rebounds in the game.\nTo add more predictors to this mix, we merely add them. But it’s not that simple, as you’ll see in a moment. So first, let’s look at adding turnover margin to our prediction model:\n\nmodel1 &lt;- lm(Differential ~ NetRebounds + TurnoverMargin, data=logs)\nsummary(model1)\n\n\nCall:\nlm(formula = Differential ~ NetRebounds + TurnoverMargin, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-46.158  -6.899  -0.062   6.845  45.874 \n\nCoefficients:\n                Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept)     0.303968   0.032952    9.225   &lt;2e-16 ***\nNetRebounds     1.200686   0.003438  349.286   &lt;2e-16 ***\nTurnoverMargin -1.557334   0.006487 -240.067   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.3 on 98132 degrees of freedom\n  (26 observations deleted due to missingness)\nMultiple R-squared:  0.616, Adjusted R-squared:  0.616 \nF-statistic: 7.87e+04 on 2 and 98132 DF,  p-value: &lt; 2.2e-16\n\n\nFirst things first: What is the adjusted R-squared? This model predicts about 61 percent of the differential.\nSecond: what is the p-value and is it less than .05?\nThird: Compare the residual standard error. We went from 12.95 to 10.3. The meaning of this is both really opaque and also simple – by adding data, we reduced the amount of error in our model. Residual standard error is the total distance between what our model would predict and what we actually have in the data. So lots of residual error means the distance between reality and our model is wider. So the width of our predictive range in this example shrank while we improved the amount of the difference we could predict. That’s good, and not always going to be the case.\nOne of the more difficult things to understand about multiple regression is the issue of multicollinearity. What that means is that there is significant correlation overlap between two variables – the two are related to each other as well as to the target output – and all you are doing by adding both of them is adding error with no real value to the R-squared. In pure statistics, we don’t want any multicollinearity at all. Violating that assumption limits the applicability of what you are doing. So if we have some multicollinearity, it limits our scope of application to college basketball. We can’t say this will work for every basketball league and level everywhere. What we need to do is see how correlated each value is to each other and throw out ones that are highly co-correlated.\nSo to find those, we have to create a correlation matrix that shows us how each value is correlated to our outcome variable, but also with each other. We can do that in the Hmisc library. We install that in the console with install.packages(\"Hmisc\")\n\nlibrary(Hmisc)\n\nWe can pass in every numeric value to the Hmisc library and get a correlation matrix out of it, but since we have a large number of values – and many of them character values – we should strip that down and reorder them. So that’s what I’m doing here. I’m saying give me all the columns with numeric values, except for Game, and then show me the differential, net yards, turnover margin and then everything else.\n\nsimplelogs &lt;- logs |&gt; select_if(is.numeric) |&gt; select(-Game) |&gt; select(Differential, NetRebounds, TurnoverMargin, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)\n\nBefore we proceed, what we’re looking to do is follow the Differential column down, looking for correlation values near 1 or -1. Correlations go from -1, meaning perfect negative correlation, to 0, meaning no correlation, to 1, meaning perfect positive correlation. So we’re looking for numbers near 1 or -1 for their predictive value. BUT: We then need to see if that value is also highly correlated with something else. If it is, we have a decision to make.\nWe get our correlation matrix like this:\n\ncormatrix &lt;- rcorr(as.matrix(simplelogs))\n\ncormatrix$r\n\n                      Differential NetRebounds TurnoverMargin   TeamFGPCT\nDifferential             1.0000000   0.6248635    -0.37224236  0.60842699\nNetRebounds              0.6248635   1.0000000     0.15509130  0.36726732\nTurnoverMargin          -0.3722424   0.1550913     1.00000000 -0.03109904\nTeamFGPCT                0.6084270   0.3672673    -0.03109904  1.00000000\nTeamTotalRebounds        0.4887337   0.7514775     0.09713362  0.02665011\nOpponentFGPCT           -0.6165787  -0.3776729     0.03438953 -0.11505868\nOpponentTotalRebounds   -0.4292394  -0.7190817    -0.13197214 -0.52680962\n                      TeamTotalRebounds OpponentFGPCT OpponentTotalRebounds\nDifferential                 0.48873374  -0.616578694          -0.429239429\nNetRebounds                  0.75147749  -0.377672886          -0.719081689\nTurnoverMargin               0.09713362   0.034389532          -0.131972135\nTeamFGPCT                    0.02665011  -0.115058678          -0.526809615\nTeamTotalRebounds            1.00000000  -0.546787074          -0.081890501\nOpponentFGPCT               -0.54678707   1.000000000          -0.005413951\nOpponentTotalRebounds       -0.08189050  -0.005413951           1.000000000\n\n\nNotice right away – NetRebounds is highly correlated. But NetRebounds is also highly correlated with TeamTotalRebounds. And that makes sense: TeamTotalRebounds feeds into NetRebounds. Including both of these measures would be pointless – they would add error without adding much in the way of predictive power.\n\nYour turn: What else do you see? What other values have predictive power and aren’t co-correlated? Add or remove some of the columns above and re-run the correlation matrix.\n\nWe can add more just by simply adding them. Let’s add the average FG PCT for both the team and opponent. They’re correlated to Differential, but not as much as you might expect.\n\nmodel2 &lt;- lm(Differential ~ NetRebounds + TurnoverMargin + TeamFGPCT + OpponentFGPCT, data=logs)\nsummary(model2)\n\n\nCall:\nlm(formula = Differential ~ NetRebounds + TurnoverMargin + TeamFGPCT + \n    OpponentFGPCT, data = logs)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-26.171  -3.679  -0.023   3.651  37.368 \n\nCoefficients:\n                 Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept)      0.226590   0.156372    1.449    0.147    \nNetRebounds      0.656535   0.002128  308.520   &lt;2e-16 ***\nTurnoverMargin  -1.311144   0.003484 -376.362   &lt;2e-16 ***\nTeamFGPCT       91.270480   0.254245  358.986   &lt;2e-16 ***\nOpponentFGPCT  -91.510307   0.254204 -359.988   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.474 on 98130 degrees of freedom\n  (26 observations deleted due to missingness)\nMultiple R-squared:  0.8915,    Adjusted R-squared:  0.8915 \nF-statistic: 2.015e+05 on 4 and 98130 DF,  p-value: &lt; 2.2e-16\n\n\nGo down the list:\nWhat is the Adjusted R-squared now? What is the p-value and is it less than .05? What is the Residual standard error?\nThe final thing we can do with this is predict things. Look at our coefficients table. See the Estimates? We can build a formula from that, same as we did with linear regressions.\nHow does this apply in the real world? Let’s pretend for a minute that you are Kevin Willard, and you want to win conference titles. To do that, we need to know what attributes of a team we should emphasize. We can do that by looking at what previous Big Ten conference champions looked like.\nSo if our goal is to predict a conference champion team, we need to know what those teams did. Here’s the regular season conference champions in this dataset.\n\nlogs |&gt; \n  filter(Team == \"Michigan\" & Season == '2020-2021' | Team == \"Wisconsin\" & Season == '2019-2020' | Team == \"Michigan State\" & Season == '2018-2019' | Team == \"Michigan State\" & Season == '2017-2018' | Team == 'Illinois' & Season == '2021-2022' | Team == 'Purdue' & Season == '2022-2023' | Team == 'Purdue' & Season == '2023-2024') |&gt; \n  summarise(\n    meanNetRebounds = mean(NetRebounds),\n    meanTurnoverMargin = mean(TurnoverMargin),\n    meanTeamFGPCT = mean(TeamFGPCT),\n    meanOpponentFGPCT = mean(OpponentFGPCT)\n  )\n\n# A tibble: 1 × 4\n  meanNetRebounds meanTurnoverMargin meanTeamFGPCT meanOpponentFGPCT\n            &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n1            9.61               1.97         0.477             0.399\n\n\nNow it’s just plug and chug.\n\n# (netrebounds estimate * meanNetRebounds) + (turnover margin estimate * meanTurnoverMargin) + (TeamFGPCT estimate * meanTeamFGPCT) + (OpponentFGPCT estimate * meanOpponentFGPCT) + Intercept\n(0.657726*9.645933) + (-1.313064*1.933014) + (91.403110*0.4780766) + (-91.650923*0.3981818) + 0.233954\n\n[1] 11.24412\n\n\nSo a team with those numbers is going to average scoring 11 more points per game than their opponent. Not a ton, but hey, the Big Ten has been a competitive conference lately.\nHow does that compare to Maryland in 2023-24 season?\n\nlogs |&gt; \n  filter(\n    Team == \"Maryland\" & Season == '2023-2024'\n    ) |&gt; \n  summarise(\n    meanNetRebounds = mean(NetRebounds),\n    meanTurnoverMargin = mean(TurnoverMargin),\n    meanTeamFGPCT = mean(TeamFGPCT),\n    meanOpponentFGPCT = mean(OpponentFGPCT)\n  )\n\n# A tibble: 1 × 4\n  meanNetRebounds meanTurnoverMargin meanTeamFGPCT meanOpponentFGPCT\n            &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n1            1.27             -0.394         0.414             0.419\n\n\n\n(0.657726*1.277778) + (-0.3055556*1.933014) + (91.403110*0.4133056) + (-91.650923*0.4171944) + 0.233954\n\n[1] 0.02490395\n\n\nBy this model, it predicted we would, on average, barely outscore our opponents over that season. The reality?\n\nlogs |&gt; \n     filter(\n         Team == \"Maryland\" & Season == '2023-2024'\n     ) |&gt; summarise(avg_score = mean(TeamScore), avg_opp = mean(OpponentScore))\n\n# A tibble: 1 × 2\n  avg_score avg_opp\n      &lt;dbl&gt;   &lt;dbl&gt;\n1      69.0    65.9\n\n\nWe outscored them by about 3 points on average, so maybe this isn’t the best model, or suggests that perhaps Maryland found a way to be successful outside of these parameters. What would you change?",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Multiple regression</span>"
    ]
  },
  {
    "objectID": "wafflecharts.html",
    "href": "wafflecharts.html",
    "title": "18  Waffle charts",
    "section": "",
    "text": "18.1 Making waffles with vectors\nPie charts are the devil. They should be an instant F in any data visualization class. The problem? How carefully can you evaluate angles and area? Unless they are blindingly obvious and only a few categories, not well. If you’ve got 25 categories, how can you tell the difference between 7 and 9 percent? You can’t.\nSo let’s introduce a better way: The Waffle Chart. Some call it a square pie chart. I personally hate that. Waffles it is.\nA waffle chart is designed to show you parts of the whole – proportionality. How many yards on offense come from rushing or passing. How many singles, doubles, triples and home runs make up a teams hits. How many shots a basketball team takes are two pointers versus three pointers.\nFirst, install the library in the console. We want a newer version of the waffle library than is in CRAN – where you normally get libraries from – so copy and paste this into your console:\ninstall.packages(\"waffle\")\nNow load it:\nLet’s look at Maryland’s football game against Michigan State this season. Here’s the box score, which we’ll use for this part of the walkthrough.\nMaybe the easiest way to do waffle charts, at least at first, is to make vectors of your data and plug them in. To make a vector, we use the c or concatenate function.\nSo let’s look at offense. Net rushing vs passing.\nmd &lt;- c(\"Rushing\"=175, \"Passing\"=314)\nms &lt;- c(\"Rushing\"=100, \"Passing\"=221)\nSo what does the breakdown of the night look like?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\nOr, we could make this two teams in the same chart.\npassing &lt;- c(\"Maryland\"=314, \"Michigan State\"=221)\nwaffle(\n        passing, \n        rows = 10, \n        title=\"Maryland vs Michigan State: passing\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"red\", \"green\")\n)\nSo what does it look like if we compare the two teams using the two vectors in the same chart? To do that – and I am not making this up – you have to create a waffle iron. Get it? Waffle charts? Iron?\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"green\")\n        )\n)\nWhat do you notice about this chart? Notice how the squares aren’t the same size? Well, Maryland out-gained Michigan State by a long way. So the squares aren’t the same size because the numbers aren’t the same. We can fix that by adding an unnamed padding number so the number of yards add up to the same thing. Let’s make the total for everyone be 489, Maryland’s total yards of offense. So to do that, we need to add a padding of 168 to Michigan State. REMEMBER: Don’t name it or it’ll show up in the legend.\nmd &lt;- c(\"Rushing\"=175, \"Passing\"=314)\nms &lt;- c(\"Rushing\"=100, \"Passing\"=221, 168)\nNow, in our waffle iron, if we don’t give that padding a color, we’ll get an error. So we need to make it white. Which, given our white background, means it will disappear.\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"black\", \"green\", \"white\")\n        )\n)\nOne last thing we can do is change the 1 square = 1 yard bit – which makes the squares really small in this case – by dividing our vector. Look, it’s math on vectors!\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms/2, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"black\", \"green\", \"white\")\n        )\n)\nNews flash: Michigan State is changing its fight song to “Everybody Hurts” by REM.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Waffle charts</span>"
    ]
  },
  {
    "objectID": "dumbbellcharts.html",
    "href": "dumbbellcharts.html",
    "title": "21  Dumbbell and lollipop charts",
    "section": "",
    "text": "21.1 Dumbbell plots\nSecond to my love of waffle charts because I’m always hungry, dumbbell charts are an excellently named way of showing the difference between two things on a number line – a start and a finish, for instance. Or the difference between two related things. Say, turnovers and assists.\nLollipop charts – another excellent name – are a variation on bar charts. They do a good job of showing magnitude and difference between things.\nTo use both of them, you need to add a new library:\ninstall.packages(\"ggalt\")\nLet’s give it a whirl.\nFor this, let’s use college volleyball game logs from this season.\nAnd load it.\nlogs &lt;- read_csv(\"data/ncaa_womens_volleyball_matchstats_2023.csv\")\n\nRows: 9957 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nFor the first example, let’s look at the difference between a team’s errors versus their opponents’ errors. To get this, we’re going to add up all errors and opponent errors for a team in a season and take a look at where they come out. To make this readable, I’m going to focus on the Big Ten.\nbig10 &lt;- c(\"Nebraska Cornhuskers\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\", \"Wisconsin Badgers\", \"Indiana Hoosiers\", \"Purdue Boilermakers\", \"Ohio State Buckeyes\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Maryland Terrapins, Terps\")\n\nerrors &lt;- logs |&gt;\n  filter(team %in% big10) |&gt; \n  group_by(team) |&gt; \n  summarise(\n    total_errors = sum(errors), \n    opp_errors = sum(defensive_errors))\nNow, the way that the geom_dumbbell works is pretty simple when viewed through what we’ve done before. There’s just some tweaks.\nFirst: We start with the y axis. The reason is we want our dumbbells going left and right, so the label is going to be on the y axis.\nSecond: Our x is actually two things: x and xend. What you put in there will decide where on the line the dot appears.\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=team, x=total_errors, xend=opp_errors)\n  )\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\nWell, that’s a chart alright, but what dot is the team errors and what are the opponent errors? To fix this, we’ll add colors.\nSo our choice of colors here is important. We want team errors to be seen as bad and opponent errors to be seen as good. So lets try red for team errors and green for opponent errors To make this work, we’ll need to do three things: first, use the English spelling of color, so colour. The, uh, colour is the bar between the dots, the x_colour is the color of the x value dot and the xend_colour is the color of the xend dot. So in our setup, defensive errors are x, they’re good, so they’re green.\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=team, x=opp_errors, xend=total_errors),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\")\nBetter. Let’s make two more tweaks. First, let’s make the whole thing bigger with a size element. And let’s add theme_minimal to clean out some cruft.\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=team, x=opp_errors, xend=total_errors),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\nAnd now we have a chart that tells a story – got green on the right? That’s good. A long distance between green and red? Better. But what if we sort it by good errors?\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=reorder(team, opp_errors), x=opp_errors, xend=total_errors),\n    linewidth = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\nWarning in geom_dumbbell(data = errors, aes(y = reorder(team, opp_errors), :\nIgnoring unknown parameters: `linewidth`\nMaryland’s opponents have committed some errors - that’s good news for the Terps - but there’s a clear gap between Maryland and the top teams in the conference when it comes to committing errors.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dumbbell and lollipop charts</span>"
    ]
  },
  {
    "objectID": "dumbbellcharts.html#dumbbell-plots",
    "href": "dumbbellcharts.html#dumbbell-plots",
    "title": "21  Dumbbell and lollipop charts",
    "section": "",
    "text": "For this walkthrough:\n   Download csv file",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dumbbell and lollipop charts</span>"
    ]
  },
  {
    "objectID": "dumbbellcharts.html#lollipop-charts",
    "href": "dumbbellcharts.html#lollipop-charts",
    "title": "21  Dumbbell and lollipop charts",
    "section": "21.2 Lollipop charts",
    "text": "21.2 Lollipop charts\nSticking with takeaways, lollipops are similar to bar charts in that they show magnitude. And like dumbbells, they are similar in that we start with a y – the traditional lollipop chart is on its side – and we only need one x. The only additional thing we need to add is that we need to tell it that it is a horizontal chart.\n\nggplot() + \n  geom_lollipop(\n    data=errors, \n    aes(y=team, x=opp_errors), \n    horizontal = TRUE\n    )\n\n\n\n\n\n\n\n\nWe can do better than this with a simple theme_minimal and some better labels.\n\nggplot() + \n  geom_lollipop(\n    data=errors, \n    aes(y=reorder(team, opp_errors), x=opp_errors), \n    horizontal = TRUE\n    ) + theme_minimal() + \n  labs(title = \"Wisconsin, Purdue force more errors\", y=\"team\")\n\n\n\n\n\n\n\n\nHow about some layering?\n\nmd &lt;- errors |&gt; filter(team == \"Maryland Terrapins, Terps\")\n\n\nggplot() + \n  geom_lollipop(\n    data=errors, \n    aes(y=reorder(team, opp_errors), x=opp_errors), \n    horizontal = TRUE\n    ) + \n  geom_lollipop(\n    data=md,\n    aes(y=team, x=opp_errors),\n    horizontal = TRUE,\n    color = \"red\"\n  ) + \n  theme_minimal() + \n  labs(title = \"Maryland middle of the pack among Big Ten teams\", y=\"team\")\n\n\n\n\n\n\n\n\nThe headline says it all.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dumbbell and lollipop charts</span>"
    ]
  },
  {
    "objectID": "beeswarmplots.html",
    "href": "beeswarmplots.html",
    "title": "24  Beeswarm plots",
    "section": "",
    "text": "24.1 A few other options\nA beeswarm plot is sometimes called a column scatterplot. It’s an effective way to show how individual things – teams, players, etc. – are distributed along a numberline. The column is a grouping – say positions in basketball – and the dots are players, and the dots cluster where the numbers are more common. So think of it like a histogram mixed with a scatterplot crossed with a bar chart.\nAn example will help.\nFirst things first: Install ggbeeswarm with install.packages(\"ggbeeswarm\")\nLike ggalt and ggrepel, ggbeeswarm adds a couple new geoms to ggplot. We’ll need to load it, the tidyverse and, for later, ggrepel.\nAnother bit of setup: we need to set the seed for the random number generator. The library “jitters” the dots in the beeswarm randomly. If we don’t set the seed, we’ll get different results each time. Setting the seed means we get the same look.\nSo let’s look at last year’s women’s basketball team as a group of shooters. Maryland didn’t really have someone like Diamond Miller or Abby Meyers on the team, and some of the better scorers have graduated. Who are the shooters-in-waiting?\nFirst we’ll load our player data.\nWe know this data has a lot of players who didn’t play, so let’s get rid of them.\nIf we include all players, we’ll have too many dots. So let’s narrow it down. A decent tool for cutoffs? Field goal attempts. Let’s get a quick look at them.\nThe median number of shots is 112, but we only really care about prolific ones. So let’s use 222 attempts – the third quartile – as our cutoff.\nNow we’ve got enough for a beeswarm plot. It works very much like you would expect – the group value is the x, the number is the y. We’re going to beeswarm by position, and the dots will be true shooting percentage (ts_percent in the data):\nYou can see that there’s a lot fewer centers who have attempted more than 222 shots than guards, but then there’s a lot more guards in college basketball than anything else. In the guards column, note that fat width of the swarm is between .5 and .6. So that means most guards who shoot more than 222 shots end up in that area. They’re the average shooter at that level. You can see, some are better, some are worse.\nSo where are the Maryland players in that mix?\nWe’ll filter players on Maryland who meet our criteria.\nFive Terps took more than 222 shots. Number not on the roster this season? Three: Sarah Te-Biasu, Shyanne Sellers and Christina Dalce.\nBut how good are they as true shooters?\nWhen you add another beeswarm, we need to pass another element in – we need to tell it if we’re grouping on the x value. Not sure why, but you’ll get a warning if you don’t.\nWho are they?\nThis is where we can use ggrepel. Let’s add a text layer and label the dots.\nSo Sarah Te-Biasu was our best shooter by true shooting percentage, with Shyanne Sellers close behind. The other three were at or above average shooters for that volume of shooting.\nThe ggbeeswarm library has a couple of variations on the geom_beeswarm that may work better for your application. They are geom_quasirandom and geom_jitter.\nThere’s not a lot to change from our example to see what they do.\nggplot() + \n  geom_quasirandom(\n    data=shooters, \n    groupOnX=TRUE, \n    aes(x=pos, y=ts_percent), color=\"grey\") + \n  geom_quasirandom(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=ts_percent), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=pos, y=ts_percent, label=player))\nQuasirandom spreads out the dots you see in beeswarm using – you guessed it – quasirandom spacing.\nFor geom_jitter, we need to remove the groupOnX value. Why? No clue.\nggplot() + \n  geom_jitter(\n    data=shooters, \n    aes(x=pos, y=ts_percent), color=\"grey\") + \n  geom_jitter(\n    data=umd, \n    aes(x=pos, y=ts_percent), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=pos, y=ts_percent, label=player))\ngeom_jitter spreads out the dots evenly across the width of the column, randomly deciding where in the line of the true shooting percentage they appear.\nWhich one is right for you? You’re going to have to experiment and decide. This is the art in the art and a science.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Beeswarm plots</span>"
    ]
  },
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "26  Tables",
    "section": "",
    "text": "But not a table. A table with features.\nSometimes, the best way to show your data is with a table – simple rows and columns. It allows a reader to compare whatever they want to compare a little easier than a graph where you’ve chosen what to highlight. The folks that made R Studio and the tidyverse have a neat package called gt.\nFor this assignment, we’ll need gt so go over to the console and run:\ninstall.packages(\"gt\")\nSo what does all of these libraries do? Let’s gather a few and use data of every men’s basketball game between 2015-2024.\nFor this walkthrough:\n   Download csv file\n\nLoad libraries.\n\nlibrary(tidyverse)\nlibrary(gt)\n\nAnd the data.\n\nlogs &lt;- read_csv(\"data/cbblogs1524.csv\")\n\nRows: 98161 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team,...\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (2): Blank, season\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s ask this question: which college basketball team saw the greatest decrease in three point attempts per game between last season as a percentage of shots? The simplest way to calculate that is by percent change.\nWe’ve got a little work to do, putting together ideas we’ve used before. What we need to end up with is some data that looks like this:\nTeam | 2022-2023 season threes | 2023-2024 season threes | pct change\nTo get that, we’ll need to do some filtering to get the right seasons, some grouping and summarizing to get the right number, some pivoting to get it organized correctly so we can mutate the percent change.\n\nthreechange &lt;- logs |&gt;\n  filter(Season == \"2022-2023\" | Season == \"2023-2024\") |&gt;\n  group_by(Team, Season) |&gt;\n  summarise(Total3PA = sum(Team3PA)) |&gt;\n  pivot_wider(names_from=Season, values_from = Total3PA) |&gt;\n  filter(!is.na(`2023-2024`)) |&gt; \n  mutate(PercentChange = (`2023-2024`-`2022-2023`)/`2022-2023`) |&gt;\n  arrange(PercentChange) |&gt; \n  ungroup() |&gt;\n  slice_head(n=10) # just want a top 10 list, but can't use top_n!\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nWe’ve output tables to the screen a thousand times in this class with head, but gt makes them look decent with very little code.\n\nthreechange |&gt; gt()\n\n\n\n\n\n\n\nTeam\n2022-2023\n2023-2024\nPercentChange\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\n\n\n\n\nSo there you have it. Long Island changed their team so much they took 44 percent fewer threes in 2022-23 from the season before. Where did Maryland come out? We ranked pretty low in college basketball in terms of fewer threes from the season before, because the Terps actually took 61 more.\ngt has a mountain of customization options. The good news is that it works in a very familiar pattern. We’ll start with fixing headers. What we have isn’t bad, but PercentChange isn’t good either. Let’s fix that.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  )\n\n\n\n\n\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\n\n\n\n\nBetter. Note the pattern: Actual header name = “What we want to see”. So if we wanted to change Team to School, we’d do this: Team = \"School\" inside the cols_label bits.\nNow we can start working with styling. The truth is most of your code in tables is going to be dedicated to styling specific things. The first thing we need: A headline and some chatter. They’re required parts of a graphic, so they’re a good place to start. We do that with tab_header\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  )\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\n\n\n\n\nWe have a headline and some chatter, but … gross. Centered? The extra lines? No real difference in font weight? We can do better. We can style individual elements using tab_style. First, let’s make the main headline – the title – bold and left aligned.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  )\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\n\n\n\n\nIt’s hard to see here, but the chatter below is also centered (it doesn’t look like it because it fills the space). We can left align that too, but leave it normal weight (i.e. not bold).\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  )\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\n\n\n\n\nThe next item on the required elements list: Source and credit lines. In gt, those are called tab_source_notes and we can add them like this:\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  )\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\nBy: Derek Willis | Source: Sports Reference\n\n\n\n\n\n\n\n\nWe can do a lot with tab_style. For instance, we can make the headers bold and reduce the size a bit to reduce font congestion in the area.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) \n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\nBy: Derek Willis | Source: Sports Reference\n\n\n\n\n\n\n\n\nNext up: There’s a lot of lines in this that don’t need to be there. gt has some tools to get rid of them easily and add in some other readability improvements.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n-0.3278237\n\n\nJacksonville State\n747\n507\n-0.3212851\n\n\nCoppin State\n793\n540\n-0.3190416\n\n\nToledo\n764\n550\n-0.2801047\n\n\nSoutheast Missouri State\n875\n631\n-0.2788571\n\n\nEastern Kentucky\n927\n678\n-0.2686084\n\n\nSouthern Utah\n887\n649\n-0.2683202\n\n\nTennessee Tech\n829\n608\n-0.2665862\n\n\nUtah Valley\n728\n540\n-0.2582418\n\n\nLouisiana-Monroe\n690\n513\n-0.2565217\n\n\n\nBy: Derek Willis | Source: Sports Reference\n\n\n\n\n\n\n\n\nWe’re in pretty good shape here, but look closer. What else makes this table sub-par? How about the formatting of the percent change? We can fix that with a formatter.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  )\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n−32.8%\n\n\nJacksonville State\n747\n507\n−32.1%\n\n\nCoppin State\n793\n540\n−31.9%\n\n\nToledo\n764\n550\n−28.0%\n\n\nSoutheast Missouri State\n875\n631\n−27.9%\n\n\nEastern Kentucky\n927\n678\n−26.9%\n\n\nSouthern Utah\n887\n649\n−26.8%\n\n\nTennessee Tech\n829\n608\n−26.7%\n\n\nUtah Valley\n728\n540\n−25.8%\n\n\nLouisiana-Monroe\n690\n513\n−25.7%\n\n\n\nBy: Derek Willis | Source: Sports Reference\n\n\n\n\n\n\n\n\nThroughout the semester, we’ve been using color and other signals to highlight things. Let’s pretend we’re doing a project on Syracuse. With a little tab_style magic, we can change individual rows and add color. The last tab_style block here will first pass off the styles we want to use – we’re going to make the rows maroon and the text gold – and then for locations we specify where with a simple filter. What that means is that any rows we can address with logic – all rows with a value greater than X, for example – we can change the styling.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"blue\"),\n      cell_text(color = \"orange\")\n      ),\n    locations = cells_body(\n      rows = Team == \"Syracuse\")\n  )\n\n\n\n\n\n\n\nDid Maryland Shoot Fewer Threes in 2021-22?\n\n\nNo, the Terps shot more. But these 10 teams completely changed their offenses.\n\n\nTeam\n2022-2023\n2023-2024\nPercent Change\n\n\n\n\nHouston Christian\n726\n488\n−32.8%\n\n\nJacksonville State\n747\n507\n−32.1%\n\n\nCoppin State\n793\n540\n−31.9%\n\n\nToledo\n764\n550\n−28.0%\n\n\nSoutheast Missouri State\n875\n631\n−27.9%\n\n\nEastern Kentucky\n927\n678\n−26.9%\n\n\nSouthern Utah\n887\n649\n−26.8%\n\n\nTennessee Tech\n829\n608\n−26.7%\n\n\nUtah Valley\n728\n540\n−25.8%\n\n\nLouisiana-Monroe\n690\n513\n−25.7%\n\n\n\nBy: Derek Willis | Source: Sports Reference\n\n\n\n\n\n\n\n\nTwo things here:\n\nDear God that color scheme is awful, which is fitting for a school that has a non-rhyming mascot.\nWe’ve arrived where we want to be: We’ve created a clear table that allows a reader to compare schools at will while also using color to draw attention to the thing we want to draw attention to. We’ve kept it simple so the color has impact.",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "finishingtouches.html",
    "href": "finishingtouches.html",
    "title": "33  Finishing touches",
    "section": "",
    "text": "33.1 Graphics vs visual stories\nThe output from ggplot is good, but not great. We need to add some pieces to it. The elements of a good graphic are:\nThat looks like:\nWhile the elements above are nearly required in every chart, they aren’t when you are making visual stories.\nAn example from The Upshot. Note how the charts don’t have headlines, source or credit lines.",
    "crumbs": [
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Finishing touches</span>"
    ]
  },
  {
    "objectID": "finishingtouches.html#graphics-vs-visual-stories",
    "href": "finishingtouches.html#graphics-vs-visual-stories",
    "title": "33  Finishing touches",
    "section": "",
    "text": "When you have a visual story, things like credit lines can become a byline.\nIn visual stories, source lines are often a note at the end of the story.\nGraphics don’t always get headlines – sometimes just labels, letting the visual story headline carry the load.",
    "crumbs": [
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Finishing touches</span>"
    ]
  },
  {
    "objectID": "finishingtouches.html#getting-ggplot-closer-to-output",
    "href": "finishingtouches.html#getting-ggplot-closer-to-output",
    "title": "33  Finishing touches",
    "section": "33.2 Getting ggplot closer to output",
    "text": "33.2 Getting ggplot closer to output\nLet’s explore fixing up ggplot’s output before we send it to a finishing program like Adobe Illustrator. We’ll need a graphic to work with first.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nHere’s the data we’ll use: college football team scoring from 2009-2018.\nFor this walkthrough:\n   Download csv file\n\n   Download csv file\n\nLet’s load them and join them together.\n\nscoring &lt;- read_csv(\"data/scoringoffense.csv\")\n\nRows: 1253 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (9): G, TD, FG, 1XP, 2XP, Safety, Points, Points/G, Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntotal &lt;- read_csv(\"data/totaloffense.csv\")\n\nRows: 1253 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (8): G, Rush Yards, Pass Yards, Plays, Total Yards, Yards/Play, Yards/G,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\noffense &lt;- total |&gt; left_join(scoring, by=c(\"Name\", \"Year\"))\n\nWe’re going to need this later, so let’s grab Maryland’s 2018 stats from this dataframe.\n\numd &lt;- offense |&gt; \n  filter(Name == \"Maryland\") |&gt; \n  filter(Year == 2018)\n\nWe’ll start with the basics.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\n\n\n\n\nLet’s take changing things one by one. The first thing we can do is change the figure size. Sometimes you don’t want a square. We can use the knitr output settings in our chunk to do this easily in our notebooks.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\n\n\n\n\nNow let’s add a fit line.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") +\n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE)\n\n\n\n\n\n\n\n\nAnd now some labels.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\"\n    )\n\n\n\n\n\n\n\n\nLet’s get rid of the default plot look and drop the grey background.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\"\n    ) + \n  theme_minimal()\n\n\n\n\n\n\n\n\nOff to a good start, but our text has no real heirarchy. We’d want our headline to stand out more. So let’s change that. When it comes to changing text, the place to do that is in the theme element. There are a lot of ways to modify the theme. We’ll start easy. Let’s make the headline bigger and bold.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\")\n    ) \n\n\n\n\n\n\n\n\nNow let’s fix a few other things – like the axis labels being too big, the subtitle could be bigger and lets drop some grid lines.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) \n\n\n\n\n\n\n\n\nMissing from this graph is the context that the headline promises. Where is Maryland? We haven’t added it yet. So let’s add a point and a label for it.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\n\n\n\n\nIf we’re happy with this output – if it meets all of our needs for publication – then we can simply export it as a png file. We do that by adding + ggsave(\"plot.png\", width=5, height=2) to the end of our code. Note the width and the height are from our knitr parameters at the top – you have to repeat them or the graph will export at the default 7x7.\nIf there’s more work you want to do with this graph that isn’t easy or possible in R but is in Illustrator, simply change the file extension to pdf instead of png. The pdf will open as a vector file in Illustrator with everything being fully editable.",
    "crumbs": [
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Finishing touches</span>"
    ]
  },
  {
    "objectID": "finishingtouches.html#waffle-charts-require-special-attention",
    "href": "finishingtouches.html#waffle-charts-require-special-attention",
    "title": "33  Finishing touches",
    "section": "33.3 Waffle charts require special attention",
    "text": "33.3 Waffle charts require special attention\nFrequently in my classes, students use the waffle charts library quite extensively to make graphics. This is a quick walkthough on how to get a waffle chart into a publication ready state.\n\nlibrary(waffle)\n\nLet’s look at the offensive numbers from the 2021 Maryland v. Illinois football game. Maryland won 20-17, even though the Terps outgained the Illini by 113 yards. You can find the official stats on the NCAA’s website.\nI’m going to make two vectors for each team and record rushing yards and passing yards.\n\nmd &lt;- c(\"Rushing\"=131, \"Passing\"=350, 113)\nil &lt;- c(\"Rushing\"=183, \"Passing\"=185, 0)\n\nSo what does the breakdown of Maryland’s night look like? How balanced was the offense?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\nADDITIONALLY\nWe can add labels and themes, but you have to be careful. The waffle library is applying it’s own theme, but if we override something they are using in their theme, some things that are hidden come back and make it worse. So here is an example of how to use ggplot’s labs and the theme to make a fully publication ready graphic.\n\nwaffle(md/10, rows = 5, xlab=\"1 square = 10 yards\", colors = c(\"black\", \"red\", \"white\")) + \n  labs(\n    title=\"Maryland vs Illinois on offense\", \n    subtitle=\"The Terps couldn't get much of a running game going.\",\n    caption=\"Source: NCAA | Graphic by Derek Willis\") + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  )\n\n\n\n\n\n\n\n\nBut what if we’re using a waffle iron? And what if we want to change the output size? It gets tougher.\nTruth is, I’m not sure what is going on with the sizing. You can try it and you’ll find that the outputs are … unpredictable.\nThings you need to know about waffle irons:\n\nThey’re a convenience method, but all they’re really doing is executing two waffle charts together. If you don’t apply the theme to both waffle charts, it breaks.\nYou will have to get creative about applying headline and subtitle to the top waffle chart and the caption to the bottom.\nUsing ggsave doesn’t work either. So you’ll have to use R’s pdf output.\n\nHere is a full example. I start with my waffle iron code, but note that each waffle is pretty much a self contained thing. That’s because a waffle iron isn’t really a thing. It’s just a way to group waffles together, so you have to make each waffle individually. My first waffle has the title and subtitle but no x axis labels and the bottom one has not title or subtitle but the axis labels and the caption.\n\niron(\n waffle(\n   md/10, \n   rows = 2, \n   xlab=\"Maryland\",\n   colors = c(\"black\", \"red\", \"white\")) + \n   labs(\n     title=\"Maryland vs Illinois: By the numbers\", \n     subtitle=\"The Terps couldn't run, the Illini could.\") + \n   theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  ),\n waffle(\n   il/10, \n   rows = 2, \n   xlab=\"Illinois\\n1 square = 10 yards\", \n   colors = c(\"orange\", \"blue\", \"white\")) + \n   labs(caption=\"Source: NCAA | Graphic by Derek Willis\")\n)",
    "crumbs": [
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Finishing touches</span>"
    ]
  },
  {
    "objectID": "finishingtouches.html#advanced-text-wrangling",
    "href": "finishingtouches.html#advanced-text-wrangling",
    "title": "33  Finishing touches",
    "section": "33.4 Advanced text wrangling",
    "text": "33.4 Advanced text wrangling\nSometimes, you need a little more help with text than what is easily available. Sometimes you want a little more in your finishing touches. Let’s work on some issues common in projects that can be fixed with new new libraries: multi-line chatter, axis labels that need more than just a word, axis labels that don’t fit, and additional text boxes.\nFirst things first, we’ll need to install ggtext with install.packages. Then we’ll load it.\n\nlibrary(ggtext)\n\nLet’s go back to our scatterplot above. As created, it’s very simple, and the chatter doesn’t say much. Let’s write chatter that instead of being super spare is more verbose.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop opponents. If you compare the offense to every other offense and how many points they score vs the number of yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\n\n\n\n\nYou can see the problem right away – it’s too long and gets cut off. One way to fix this is to put \\n where you think the line break should be. That’s a newline character, so it would add a return there. But with ggtext, you can use simple HTML to style the text, which opens up a lot of options. We can use a  to break the line. The other thing we need to do is in the theme element, change the element_text for plot.subtitle to element_markdown.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop&lt;br/&gt;opponents. If you compare the offense to every other offense and how many points they score vs the number of&lt;br/&gt; yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\n\n\n\n\nWith ggtext, there’s a lot more you can do with CSS, like change the color of text, that I don’t recommend. Also, there’s only a few HTML tags that have been implemented. For example, you can’t add links because the a tag hasn’t been added.\nAnother sometimes useful thing you can do is add much more explanation to your axis labels. This is going to be a silly example because “Points per game” is pretty self-explanatory, but roll with it. First, we create an unusually long y axis label, then, in theme, we add some code to axis.title.y.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game is an imperfect metric of offensive efficiency because defenses and special teams score points as well.\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop&lt;br/&gt;opponents. If you compare the offense to every other offense and how many points they score vs the number of&lt;br/&gt; yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank(),\n    axis.title.y = element_textbox_simple(\n      orientation = \"left-rotated\",\n      width = grid::unit(2.5, \"in\")\n    )\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\n\n\n\n\nOne last advanced trick: Adding a text box explainer in the graphic. This should be used in somewhat rare circumstances – you don’t want to pollute your data space with lots of text. If your graphic needs so much explainer text, you should be asking yourself hard questions about if your chart is clearly telling a story.\nTo add a text box explainer, you need to add a geom_textbox to your chart. The code below does that, and also adds a geom_point to anchor the box to a spot.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  geom_textbox(\n    aes(x=225, \n        y=50, \n        label=\"Dots above the blue line indicate offenses that scored more points than their yards per game would suggest they should.\", \n        orientation = \"upright\", \n        hjust=0, \n        vjust=1), width = unit(2.8, \"in\")) +\n  geom_point(aes(x=225, y=50), size=2) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop&lt;br/&gt;opponents. If you compare the offense to every other offense and how many points they score vs the number of&lt;br/&gt; yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))",
    "crumbs": [
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Finishing touches</span>"
    ]
  },
  {
    "objectID": "zscores.html",
    "href": "zscores.html",
    "title": "12  Z-scores",
    "section": "",
    "text": "12.1 Calculating a Z score in R\nZ-scores are a handy way to standardize numbers so you can compare things across groupings or time. In this class, we may want to compare teams by year, or era. We can use z-scores to answer questions like who was the greatest X of all time, because a z-score can put them in context to their era.\nA z-score is a measure of how a particular stat is from the mean. It’s measured in standard deviations from that mean. A standard deviation is a measure of how much variation – how spread out – numbers are in a data set. What it means here, with regards to z-scores, is that zero is perfectly average. If it’s 1, it’s one standard deviation above the mean, and 34 percent of all cases are between 0 and 1.\nIf you think of the normal distribution, it means that 84.3 percent of all case are below that 1. If it were -1, it would mean the number is one standard deviation below the mean, and 84.3 percent of cases would be above that -1. So if you have numbers with z-scores of 3 or even 4, that means that number is waaaaaay above the mean.\nSo let’s use last year’s Maryland women’s basketball team, which if haven’t been paying attention to current events, was talented but had a few struggles.\nFor this we’ll need the logs of all college basketball games last season.\nLoad the tidyverse.\nlibrary(tidyverse)\nAnd load the data.\ngamelogs &lt;- read_csv(\"data/wbblogs24.csv\")\n\nRows: 11425 Columns: 60\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): Season, GameType, TeamFullName, Opponent, HomeAway, W_L, OT, URL,...\ndbl  (49): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nThe first thing we need to do is select some fields we think represent team quality and a few things to help us keep things straight. So I’m going to pick shooting percentage, rebounding and the opponent version of the same two:\nteamquality &lt;- gamelogs |&gt; \n  select(Conference, Team, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)\nAnd since we have individual game data, we need to collapse this into one record for each team. We do that with … group by and summarize.\nteamtotals &lt;- teamquality |&gt; \n  group_by(Conference, Team) |&gt; \n  summarise(\n    FGAvg = mean(TeamFGPCT), \n    ReboundAvg = mean(TeamTotalRebounds), \n    OppFGAvg = mean(OpponentFGPCT),\n    OffRebAvg = mean(OpponentTotalRebounds)\n    ) \n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\nTo calculate a z-score in R, the easiest way is to use the scale function in base R. To use it, you use scale(FieldName, center=TRUE, scale=TRUE). The center and scale indicate if you want to subtract from the mean and if you want to divide by the standard deviation, respectively. We do.\nWhen we have multiple z-scores, it’s pretty standard practice to add them together into a composite score. That’s what we’re doing at the end here with TotalZscore. Note: We have to invert OppZscore and OppRebZScore by multiplying it by a negative 1 because the lower someone’s opponent number is, the better.\nteamzscore &lt;- teamtotals |&gt; \n  mutate(\n    FGzscore = as.numeric(scale(FGAvg, center = TRUE, scale = TRUE)),\n    RebZscore = as.numeric(scale(ReboundAvg, center = TRUE, scale = TRUE)),\n    OppZscore = as.numeric(scale(OppFGAvg, center = TRUE, scale = TRUE)) * -1,\n    OppRebZScore = as.numeric(scale(OffRebAvg, center = TRUE, scale = TRUE)) * -1,\n    TotalZscore = FGzscore + RebZscore + OppZscore + OppRebZScore\n  )\nSo now we have a dataframe called teamzscore that has 360 basketball teams with Z scores. What does it look like?\nhead(teamzscore)\n\n# A tibble: 6 × 11\n# Groups:   Conference [1]\n  Conference Team         FGAvg ReboundAvg OppFGAvg OffRebAvg FGzscore RebZscore\n  &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 A-10 WBB   Davidson     0.436       31.3    0.378      27.1    0.878   -0.0939\n2 A-10 WBB   Dayton       0.400       35.7    0.437      28.7   -0.225    1.29  \n3 A-10 WBB   Duquesne     0.424       33.8    0.390      32.4    0.517    0.687 \n4 A-10 WBB   Fordham      0.403       32.5    0.408      30.5   -0.136    0.286 \n5 A-10 WBB   George Mason 0.397       34.9    0.381      32.7   -0.335    1.03  \n6 A-10 WBB   George Wash… 0.370       33.7    0.390      29.7   -1.17     0.680 \n# ℹ 3 more variables: OppZscore &lt;dbl&gt;, OppRebZScore &lt;dbl&gt;, TotalZscore &lt;dbl&gt;\nA way to read this – a team with a TotalZScore of 0 is precisely average. The larger the positive number, the more exceptional they are. The larger the negative number, the more truly terrible they are.\nSo who are the best teams in the country?\nteamzscore |&gt; arrange(desc(TotalZscore))\n\n# A tibble: 359 × 11\n# Groups:   Conference [33]\n   Conference   Team      FGAvg ReboundAvg OppFGAvg OffRebAvg FGzscore RebZscore\n   &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 SEC WBB      South Ca… 0.495       42.2    0.324      28.3    2.23      1.79 \n 2 MAAC WBB     Fairfield 0.464       33.1    0.361      27.4    2.26      1.26 \n 3 Summit WBB   South Da… 0.476       35.1    0.370      26.5    2.05      0.993\n 4 Sun Belt WBB James Ma… 0.424       42.4    0.363      31.0    1.18      1.60 \n 5 WCC WBB      Gonzaga   0.482       34.2    0.403      25.4    1.82      1.05 \n 6 SWAC WBB     Jackson … 0.397       38.5    0.341      29.9    0.815     1.54 \n 7 Big East WBB Connecti… 0.498       33.5    0.356      27.8    2.26      0.848\n 8 OVC WBB      Southern… 0.452       35.6    0.359      31.1    2.02      1.13 \n 9 MWC WBB      Nevada-L… 0.463       37.6    0.381      28.2    1.69      1.84 \n10 Big 12 WBB   Texas     0.490       36.2    0.384      24.4    1.66      0.793\n# ℹ 349 more rows\n# ℹ 3 more variables: OppZscore &lt;dbl&gt;, OppRebZScore &lt;dbl&gt;, TotalZscore &lt;dbl&gt;\nDon’t sleep on Fairfield! If we look for Power Five schools, UConn and South Carolina are at the top, which checks out.\nBut closer to home, how is Maryland doing?\nteamzscore |&gt; \n  filter(Conference == \"Big Ten WBB\") |&gt; \n  arrange(desc(TotalZscore)) |&gt;\n  select(Team, TotalZscore)\n\nAdding missing grouping variables: `Conference`\n\n\n# A tibble: 14 × 3\n# Groups:   Conference [1]\n   Conference  Team           TotalZscore\n   &lt;chr&gt;       &lt;chr&gt;                &lt;dbl&gt;\n 1 Big Ten WBB Iowa                 4.41 \n 2 Big Ten WBB Indiana              3.84 \n 3 Big Ten WBB Nebraska             3.15 \n 4 Big Ten WBB Penn State           1.88 \n 5 Big Ten WBB Illinois             1.20 \n 6 Big Ten WBB Michigan             0.396\n 7 Big Ten WBB Maryland            -0.651\n 8 Big Ten WBB Ohio State          -0.662\n 9 Big Ten WBB Minnesota           -0.856\n10 Big Ten WBB Wisconsin           -0.905\n11 Big Ten WBB Michigan State      -1.17 \n12 Big Ten WBB Rutgers             -1.91 \n13 Big Ten WBB Purdue              -2.54 \n14 Big Ten WBB Northwestern        -6.20\nSo, as we can see, with our composite Z Score, Maryland is below average; not great. But better than Ohio State. Notice how, by this measure, Indiana and Iowa are far ahead of most of the conference, with Nebraska a somewhat surprising third.\nWe can limit our results to just Power Five conferences plus the Big East:\npowerfive_plus_one &lt;- c(\"SEC WBB\", \"Big Ten WBB\", \"Pac-12 WBB\", \"Big 12 WBB\", \"ACC WBB\", \"Big East WBB\")\nteamzscore |&gt; \n  filter(Conference %in% powerfive_plus_one) |&gt; \n  arrange(desc(TotalZscore)) |&gt;\n  select(Team, TotalZscore)\n\nAdding missing grouping variables: `Conference`\n\n\n# A tibble: 80 × 3\n# Groups:   Conference [6]\n   Conference   Team            TotalZscore\n   &lt;chr&gt;        &lt;chr&gt;                 &lt;dbl&gt;\n 1 SEC WBB      South Carolina         7.55\n 2 Big East WBB Connecticut            5.79\n 3 Big 12 WBB   Texas                  5.55\n 4 Pac-12 WBB   Stanford               5.12\n 5 SEC WBB      Louisiana State        5.09\n 6 Pac-12 WBB   UCLA                   4.73\n 7 ACC WBB      Virginia Tech          4.53\n 8 Big Ten WBB  Iowa                   4.41\n 9 Big Ten WBB  Indiana                3.84\n10 ACC WBB      Duke                   3.65\n# ℹ 70 more rows\nThis makes a certain amount of sense: three of the Final Four teams - South Carolina, UConn and Iowa are in the top 10. N.C. State, the fourth team, ranks 16th. Duke is an interesting #10 here. It doesn’t necessarily mean they were the ninth-best team, but given their competition they shot the ball and rebounded the ball very well.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Z-scores</span>"
    ]
  },
  {
    "objectID": "zscores.html#calculating-a-z-score-in-r",
    "href": "zscores.html#calculating-a-z-score-in-r",
    "title": "12  Z-scores",
    "section": "",
    "text": "For this walkthrough:\n   Download csv file",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Z-scores</span>"
    ]
  },
  {
    "objectID": "zscores.html#writing-about-z-scores",
    "href": "zscores.html#writing-about-z-scores",
    "title": "12  Z-scores",
    "section": "12.2 Writing about z-scores",
    "text": "12.2 Writing about z-scores\nThe great thing about z-scores is that they make it very easy for you, the sports analyst, to create your own measures of who is better than who. The downside: Only a small handful of sports fans know what the hell a z-score is.\nAs such, you should try as hard as you can to avoid writing about them.\nIf the word z-score appears in your story or in a chart, you need to explain what it is. “The ranking uses a statistical measure of the distance from the mean called a z-score” is a good way to go about it. You don’t need a full stats textbook definition, just a quick explanation. And keep it simple.\nNever use z-score in a headline. Write around it. Away from it. Z-score in a headline is attention repellent. You won’t get anyone to look at it. So “Tottenham tops in z-score” bad, “Tottenham tops in the Premiere League” good.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Z-scores</span>"
    ]
  },
  {
    "objectID": "clustering.html",
    "href": "clustering.html",
    "title": "13  Clustering",
    "section": "",
    "text": "13.1 Advanced metrics\nOne common effort in sports is to classify teams and players – who are this players peers? What teams are like this one? Who should we compare a player to? Truth is, most sports commentators use nothing more sophisticated that looking at a couple of stats or use the “eye test” to say a player is like this or that.\nThere are better ways.\nIn this chapter, we’re going to use a method that sounds advanced but it really quite simple called k-means clustering. It’s based on the concept of the k-nearest neighbor algorithm. You’re probably already scared. Don’t be.\nImagine two dots on a scatterplot. If you took a ruler out and measured the distance between those dots, you’d know how far apart they are. In math, that’s called the Euclidean distance. It’s just the space between them in numbers. Where k-nearest neighbor comes in, you have lots of dots and you want measure the distance between all of them. What does k-means clustering do? It lumps them into groups based on the average distance between them. Players who are good on offense but bad on defense are over here, good offense good defense are over here. And using the Euclidean distance between them, we can decide who is in and who is out of those groups.\nFor this exercise, I want to look at Derik Queen, who played one season at Maryland before decamping for the NBA. Had he stayed, he might have been among the all-time Terp greats. So who does Derik Queen compare to?\nTo answer this, we’ll use k-means clustering.\nFirst thing we do is load some libraries and set a seed, so if we run this repeatedly, our random numbers are generated from the same base. If you don’t have the cluster library, just add it on the console with install.packages(\"cluster\")\nI’ve gone and scraped stats for every player last season.\nNow load that data.\nTo cluster this data properly, we have some work to do.\nFirst, it won’t do to have players who haven’t played, so we can use filter to find anyone with greater than 0 minutes played. Next, Derik Queen is listed as a center, so let’s just look at centers. Third, we want to limit the data to things that make sense to look at for Queen – things like shooting, rebounds, blocks, turnovers and points.\nNow, k-means clustering doesn’t work as well with data that can be on different scales. So comparing a percentage to a count metric – shooting percentage to points – would create chaos because shooting percentages are a fraction of 1 and points, depending on when they are in the season, could be quite large. So we have to scale each metric – put them on a similar basis using the distance from the max value as our guide. Also, k-means clustering won’t work with text data, so we need to create a dataframe that’s just the numbers, but scaled. We can do that with another select, and using mutate_all with the scale function. The na.omit() means get rid of any blanks, because they too will cause errors.\nWith k-means clustering, we decide how many clusters we want. Most often, researchers will try a handful of different cluster numbers and see what works. But there are methods for finding the optimal number. One method is called the Elbow method. One implementation of this, borrowed from the University of Cincinnati’s Business Analytics program, does this quite nicely with a graph that will help you decide for yourself.\nAll you need to do in this code is change out the data frame – playersscaled in this case – and run it.\nThe Elbow method – so named because you’re looking for the “elbow” where the line flattens out. In this case, it looks like a K of 8 is ideal. So let’s try that. We’re going to use the kmeans function, saving it to an object called k5. We just need to tell it our dataframe name, how many centers (k) we want, and we’ll use a sensible default for how many different configurations to try.\nLet’s look at what we get.\nInterpreting this output, the very first thing you need to know is that the cluster numbers are meaningless. They aren’t ranks. They aren’t anything. After you have taken that on board, look at the cluster sizes at the top. Clusters 2 and 8 are pretty large compared to others. That’s notable. Then we can look at the cluster means. For reference, 0 is going to be average. So group 5 is above average on minutes played. Groups 2 is slightly below, group 1 is well above.\nSo which group is Derik Queen in? Well, first we have to put our data back together again. In K8, there is a list of cluster assignments in the same order we put them in, but recall we have no names. So we need to re-combine them with our original data. We can do that with the following:\nNow we have a dataframe called playercluster that has our player names and what cluster they are in. The fastest way to find Derik Queen is to double click on the playercluster table in the environment and use the search in the top right of the table. Because this is based on some random selections of points to start the groupings, these may change from person to person, but Smith is in Group 2 in my data.\nWe now have a dataset and can plot it like anything else. Let’s get Derik Queen and then plot him against the rest of college basketball on rebounds versus minutes played.\nSo Derik’s in cluster 1, which if you look at our clusters, puts him in the cluster with nearly all above average metrics. What does that look like? We know Derik was a rebounding machine, so where do group 1 people grade out on rebounds?\nNot bad, not bad. But who are Derik Queen’s peers? If we look at the numbers in Group 1, there’s 8 of them.\nSo there are the 7 centers most like Derik Queen last season. Were they the best centers in the country?\nHow much does this change if we change the metrics? I used pretty standard box score metrics above. What if we did it using Player Efficiency Rating, True Shooting Percentage, Point Production, Assist Percentage, Win Shares Per 40 Minutes and Box Plus Minus (you can get definitions of all of them by hovering over the stats on Maryland’s stats page).\nWe’ll repeat the process. Filter out players who don’t play, players with stats missing, and just focus on those stats listed above.\nplayersadvanced &lt;- players |&gt;\n  filter(MP&gt;0) |&gt;\n  filter(Pos.x == \"C\") |&gt;\n  select(Player, Team, Pos, PER, `TS%`, PProd, `AST%`, `WS/40`, BPM) |&gt;\n  na.omit()\nNow to scale them.\nplayersadvscaled &lt;- playersadvanced |&gt;\n  select(PER, `TS%`, PProd, `AST%`, `WS/40`, BPM) |&gt;\n  mutate_all(scale) |&gt;\n  na.omit()\nLet’s find the optimal number of clusters.\n# function to compute total within-cluster sum of square\nwss &lt;- function(k) {\n  kmeans(playersadvscaled, k, nstart = 10 )$tot.withinss\n}\n\n# Compute and plot wss for k = 1 to k = 15\nk.values &lt;- 1:15\n\n# extract wss for 2-15 clusters\nwss_values &lt;- map_dbl(k.values, wss)\n\nplot(k.values, wss_values,\n       type=\"b\", pch = 19, frame = FALSE,\n       xlab=\"Number of clusters K\",\n       ylab=\"Total within-clusters sum of squares\")\nLooks like 8 again.\nadvk8 &lt;- kmeans(playersadvscaled, centers = 8, nstart = 25)\nWhat do we have here?\nadvk8\n\nK-means clustering with 8 clusters of sizes 10, 54, 2, 25, 56, 63, 31, 17\n\nCluster means:\n          PER         TS%      PProd       AST%        WS/40         BPM\n1 -2.80397873 -3.32576860 -0.9757080 -1.1460236 -2.779002133 -2.44465692\n2  0.58549934  0.46575451  0.9259213 -0.1446943  0.564620860  0.56788941\n3  3.91910490  2.61177952 -0.9430676 -1.3207832  3.141851512  3.45044891\n4  1.03333914  0.26289465  2.0174109  1.7580590  0.882444035  1.09048724\n5 -0.80660282 -0.61517254 -0.7087302 -0.3516492 -0.770575283 -0.81273103\n6 -0.06088192  0.22607412 -0.4488703 -0.5876646 -0.008179258  0.02469389\n7 -0.14080517 -0.02569281 -0.3445817  0.9967488 -0.156052595 -0.28053836\n8  0.94831844  1.01849923 -0.5965913  0.2223432  1.027107675  0.72184555\n\nClustering vector:\n  [1] 2 2 6 1 4 6 6 2 5 6 6 5 2 7 6 5 2 5 5 6 6 2 6 4 5 5 7 6 4 7 2 4 2 5 7 2 6\n [38] 4 6 6 1 6 7 7 2 5 2 6 6 2 6 6 3 8 1 7 5 1 2 6 6 7 3 8 2 6 8 5 6 7 6 2 8 7\n [75] 5 6 4 6 5 6 2 4 2 8 4 6 5 2 6 4 2 2 7 8 8 7 6 2 7 7 5 5 6 6 6 2 4 5 5 1 7\n[112] 7 7 6 6 5 2 6 5 2 6 4 6 5 6 2 5 4 7 6 5 5 1 5 5 7 6 5 5 6 6 2 6 5 5 6 2 6\n[149] 5 4 2 2 7 2 8 2 4 8 1 6 4 5 5 7 5 2 7 4 7 4 2 4 2 2 2 5 5 2 6 8 6 4 2 5 4\n[186] 6 5 5 5 7 8 5 6 2 5 5 7 7 2 6 2 5 2 8 1 7 5 2 6 6 5 5 6 6 2 8 1 6 6 8 4 8\n[223] 6 2 4 2 6 1 2 5 8 7 2 2 2 7 5 2 7 5 6 4 2 5 6 4 6 5 4 8 2 6 5 5 5 2 7 5\n\nWithin cluster sum of squares by cluster:\n[1] 61.68774 54.61697  3.33234 59.95049 83.85300 64.48091 53.46295 43.85311\n (between_SS / total_SS =  72.4 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"\nLooks like this time, cluster 3 is all below average and cluster 8 is all above. Which cluster is Derik Queen in?\nplayeradvcluster &lt;- data.frame(playersadvanced, advk8$cluster)\ndqadv &lt;- playeradvcluster |&gt; filter(Player == \"Derik Queen\")\n\ndqadv\n\n       Player                     Team Pos  PER   TS. PProd AST. WS.40 BPM\n1 Derik Queen Maryland Terrapins Men's   C 24.7 0.591   584 11.6 0.216 9.2\n  advk8.cluster\n1             4\nCluster 8 on my dataset. So in this season, we can say he’s in a group of players who are all above average on these advanced metrics.\nNow who are his peers?\nplayeradvcluster |&gt;\n  filter(advk8.cluster == 8) |&gt;\n  arrange(desc(PProd))\n\n             Player                              Team Pos  PER   TS. PProd AST.\n1       Peter Carey                Siena Saints Men's   C 20.7 0.653   136 12.7\n2   Patrick Ngongba            Duke Blue Devils Men's   C 24.7 0.728   122 12.6\n3      Jorge Moreno   Southern Illinois Salukis Men's   C 21.4 0.622    86 11.6\n4     Fredrick King          Creighton Bluejays Men's   C 21.7 0.659    84  3.9\n5       Even Brauns               Iowa Hawkeyes Men's   C 18.1 0.734    77  9.9\n6   Motiejus Krivas            Arizona Wildcats Men's   C 25.4 0.603    65 13.0\n7  Micah Handlogten              Florida Gators Men's   C 20.6 0.614    62 13.2\n8        Isaac Jack               Dayton Flyers Men's   C 19.2 0.770    60  7.4\n9   Andrew McKeever          Saint Mary's Gaels Men's   C 25.5 0.597    44  1.8\n10    Naheem McLeod             Syracuse Orange Men's   C 22.1 0.788    40  6.6\n11        Will Berg         Purdue Boilermakers Men's   C 14.6 0.752    39  9.2\n12   Ismaila Diagne            Gonzaga Bulldogs Men's   C 24.5 0.821    28  0.0\n13   Hunter Harding  Central Michigan Chippewas Men's   C 19.7 0.736    27 15.1\n14    Braden Pierce          Maryland Terrapins Men's   C 19.6 0.550    14 14.4\n15  Daniel Jacobsen         Purdue Boilermakers Men's   C 28.2 0.697    11  0.0\n16       Tegra Izay Southern Miss Golden Eagles Men's   C 22.0 0.833     9  5.2\n17        Alex Koch                Mercer Bears Men's   C 36.8 0.641     9  0.0\n   WS.40  BPM advk8.cluster\n1  0.157  0.3             8\n2  0.277 11.3             8\n3  0.150  0.7             8\n4  0.162  4.5             8\n5  0.144  5.1             8\n6  0.219  8.6             8\n7  0.210 11.4             8\n8  0.146 -2.0             8\n9  0.208  5.0             8\n10 0.165  6.5             8\n11 0.126  3.0             8\n12 0.226  6.2             8\n13 0.193  2.8             8\n14 0.216  3.4             8\n15 0.215  7.6             8\n16 0.178 -2.5             8\n17 0.273 -9.9             8\nSorting on Points Produced, Derik Queen is second out of the 25 centers who land in Cluster 8. Seems advanced metrics rate Derik Queen pretty highly.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Clustering</span>"
    ]
  }
]