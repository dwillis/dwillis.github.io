[
  {
    "objectID": "wafflecharts.html#making-waffles-with-vectors",
    "href": "wafflecharts.html#making-waffles-with-vectors",
    "title": "18  Waffle charts",
    "section": "18.1 Making waffles with vectors",
    "text": "18.1 Making waffles with vectors\nLet’s look at Maryland’s football game against Michigan State this season. Here’s the box score, which we’ll use for this part of the walkthrough.\nMaybe the easiest way to do waffle charts, at least at first, is to make vectors of your data and plug them in. To make a vector, we use the c or concatenate function.\nSo let’s look at offense. Net rushing vs passing.\n\nmd &lt;- c(\"Rushing\"=175, \"Passing\"=314)\nms &lt;- c(\"Rushing\"=100, \"Passing\"=221)\n\nSo what does the breakdown of the night look like?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\n\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\nOr, we could make this two teams in the same chart.\n\npassing &lt;- c(\"Maryland\"=314, \"Michigan State\"=221)\n\n\nwaffle(\n        passing, \n        rows = 10, \n        title=\"Maryland vs Michigan State: passing\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"red\", \"green\")\n)\n\n\n\n\nSo what does it look like if we compare the two teams using the two vectors in the same chart? To do that – and I am not making this up – you have to create a waffle iron. Get it? Waffle charts? Iron?\n\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"green\")\n        )\n)\n\n\n\n\nWhat do you notice about this chart? Notice how the squares aren’t the same size? Well, Maryland out-gained Michigan State by a long way. So the squares aren’t the same size because the numbers aren’t the same. We can fix that by adding an unnamed padding number so the number of yards add up to the same thing. Let’s make the total for everyone be 489, Maryland’s total yards of offense. So to do that, we need to add a padding of 168 to Michigan State. REMEMBER: Don’t name it or it’ll show up in the legend.\n\nmd &lt;- c(\"Rushing\"=175, \"Passing\"=314)\nms &lt;- c(\"Rushing\"=100, \"Passing\"=221, 168)\n\nNow, in our waffle iron, if we don’t give that padding a color, we’ll get an error. So we need to make it white. Which, given our white background, means it will disappear.\n\niron(\n waffle(md, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"black\", \"green\", \"white\")\n        )\n)\n\n\n\n\nOne last thing we can do is change the 1 square = 1 yard bit – which makes the squares really small in this case – by dividing our vector. Look, it’s math on vectors!\n\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland's offense\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(ms/2, \n        rows = 10, \n        title=\"Michigan State's offense\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"black\", \"green\", \"white\")\n        )\n)\n\n\n\n\nNews flash: Michigan State is changing its fight song to “Everybody Hurts” by REM."
  },
  {
    "objectID": "dumbbellcharts.html#dumbbell-plots",
    "href": "dumbbellcharts.html#dumbbell-plots",
    "title": "21  Dumbbell and lollipop charts",
    "section": "21.1 Dumbbell plots",
    "text": "21.1 Dumbbell plots\nFor this, let’s use college volleyball game logs from this season.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nlogs &lt;- read_csv(\"data/ncaa_womens_volleyball_matchstats_2022.csv\")\n\nRows: 5995 Columns: 36\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): team, opponent, home_away\ndbl  (31): team_score, opponent_score, s, kills, errors, total_attacks, hit_...\nlgl   (1): result\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor the first example, let’s look at the difference between a team’s errors versus their opponents’ errors. To get this, we’re going to add up all errors and opponent errors for a team in a season and take a look at where they come out. To make this readable, I’m going to focus on the Big Ten.\n\nbig10 &lt;- c(\"Nebraska Cornhuskers\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\", \"Wisconsin Badgers\", \"Indiana Hoosiers\", \"Purdue Boilermakers\", \"Ohio State Buckeyes\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Maryland Terrapins, Terps\")\n\nerrors &lt;- logs |&gt;\n  filter(team %in% big10) |&gt; \n  group_by(team) |&gt; \n  summarise(\n    total_errors = sum(errors), \n    opp_errors = sum(defensive_errors))\n\nNow, the way that the geom_dumbbell works is pretty simple when viewed through what we’ve done before. There’s just some tweaks.\nFirst: We start with the y axis. The reason is we want our dumbbells going left and right, so the label is going to be on the y axis.\nSecond: Our x is actually two things: x and xend. What you put in there will decide where on the line the dot appears.\n\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=team, x=total_errors, xend=opp_errors)\n  )\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\nWell, that’s a chart alright, but what dot is the team errors and what are the opponent errors? To fix this, we’ll add colors.\nSo our choice of colors here is important. We want team errors to be seen as bad and opponent errors to be seen as good. So lets try red for team errors and green for opponent errors To make this work, we’ll need to do three things: first, use the English spelling of color, so colour. The, uh, colour is the bar between the dots, the x_colour is the color of the x value dot and the xend_colour is the color of the xend dot. So in our setup, defensive errors are x, they’re good, so they’re green.\n\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=team, x=opp_errors, xend=total_errors),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\")\n\n\n\n\nBetter. Let’s make two more tweaks. First, let’s make the whole thing bigger with a size element. And let’s add theme_minimal to clean out some cruft.\n\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=team, x=opp_errors, xend=total_errors),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\n\n\n\nAnd now we have a chart that tells a story – got green on the right? That’s good. A long distance between green and red? Better. But what if we sort it by good errors?\n\nggplot() + \n  geom_dumbbell(\n    data=errors, \n    aes(y=reorder(team, opp_errors), x=opp_errors, xend=total_errors),\n    linewidth = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal()\n\nWarning in geom_dumbbell(data = errors, aes(y = reorder(team, opp_errors), :\nIgnoring unknown parameters: `linewidth`\n\n\n\n\n\nMaryland’s opponents have committed a lot of errors - that’s good news for the Terps - but there’s a clear gap between Maryland and the top teams in the conference when it comes to committing errors."
  },
  {
    "objectID": "dumbbellcharts.html#lollipop-charts",
    "href": "dumbbellcharts.html#lollipop-charts",
    "title": "21  Dumbbell and lollipop charts",
    "section": "21.2 Lollipop charts",
    "text": "21.2 Lollipop charts\nSticking with takeaways, lollipops are similar to bar charts in that they show magnitude. And like dumbbells, they are similar in that we start with a y – the traditional lollipop chart is on its side – and we only need one x. The only additional thing we need to add is that we need to tell it that it is a horizontal chart.\n\nggplot() + \n  geom_lollipop(\n    data=errors, \n    aes(y=team, x=opp_errors), \n    horizontal = TRUE\n    )\n\n\n\n\nWe can do better than this with a simple theme_minimal and some better labels.\n\nggplot() + \n  geom_lollipop(\n    data=errors, \n    aes(y=reorder(team, opp_errors), x=opp_errors), \n    horizontal = TRUE\n    ) + theme_minimal() + \n  labs(title = \"Maryland, Rutgers force more errors\", y=\"team\")\n\n\n\n\nHow about some layering?\n\nmd &lt;- errors |&gt; filter(team == \"Maryland Terrapins, Terps\")\n\n\nggplot() + \n  geom_lollipop(\n    data=errors, \n    aes(y=reorder(team, opp_errors), x=opp_errors), \n    horizontal = TRUE\n    ) + \n  geom_lollipop(\n    data=md,\n    aes(y=team, x=opp_errors),\n    horizontal = TRUE,\n    color = \"red\"\n  ) + \n  theme_minimal() + \n  labs(title = \"Maryland forced the most errors among Big Ten teams\", y=\"team\")\n\n\n\n\nThe headline says it all."
  },
  {
    "objectID": "beeswarmplots.html#a-few-other-options",
    "href": "beeswarmplots.html#a-few-other-options",
    "title": "24  Beeswarm plots",
    "section": "24.1 A few other options",
    "text": "24.1 A few other options\nThe ggbeeswarm library has a couple of variations on the geom_beeswarm that may work better for your application. They are geom_quasirandom and geom_jitter.\nThere’s not a lot to change from our example to see what they do.\n\nggplot() + \n  geom_quasirandom(\n    data=shooters, \n    groupOnX=TRUE, \n    aes(x=position, y=tspct), color=\"grey\") + \n  geom_quasirandom(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=position, y=tspct), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=position, y=tspct, label=player))\n\n\n\n\nQuasirandom spreads out the dots you see in beeswarm using – you guessed it – quasirandom spacing.\nFor geom_jitter, we need to remove the groupOnX value. Why? No clue.\n\nggplot() + \n  geom_jitter(\n    data=shooters, \n    aes(x=position, y=tspct), color=\"grey\") + \n  geom_jitter(\n    data=umd, \n    aes(x=position, y=tspct), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=position, y=tspct, label=player))\n\n\n\n\ngeom_jitter spreads out the dots evenly across the width of the column, randomly deciding where in the line of the true shooting percentage they appear.\nWhich one is right for you? You’re going to have to experiment and decide. This is the art in the art and a science."
  },
  {
    "objectID": "bumpcharts.html",
    "href": "bumpcharts.html",
    "title": "25  Bump charts",
    "section": "",
    "text": "The point of a bump chart is to show how the ranking of something changed over time – you could do this with the top 25 in football or basketball. I’ve seen it done with European soccer league standings over a season.\nThe requirements are that you have a row of data for a team, in that week, with their rank.\nThis is another extension to ggplot, and you’ll install it the usual way: install.packages(\"ggbump\")\n\nlibrary(tidyverse)\nlibrary(ggbump)\n\nLet’s use the 2020-21 college football playoff rankings:\nFor this walkthrough:\n   Download csv file\n\n\nrankings &lt;- read_csv(\"data/cfbranking22.csv\")\n\nRows: 60 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Team\ndbl (2): Week, Rank\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nGiven our requirements of a row of data for a team, in that week, with their rank, take a look at the data provided. We have 5 weeks of playoff rankings, so we should see a ranking, the week of the ranking and the team at that rank. You can see the basic look of the data by using head()\n\nhead(rankings)\n\n# A tibble: 6 × 3\n   Week  Rank Team      \n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     \n1    15     1 Georgia   \n2    15     2 Michigan  \n3    15     3 TCU       \n4    15     4 Ohio State\n5    15     5 Alabama   \n6    15     6 Tennessee \n\n\nSo Georgia was ranked in the first (yawn), followed by Michigan (double yawn), TCU (hey now!), Ohio State and so on. Our data is in the form we need it to be. Now we can make a bump chart. We’ll start simple.\n\nggplot() + \n  geom_bump(\n    data=rankings, aes(x=Week, y=Rank, color=Team))\n\nWarning in compute_group(...): 'StatBump' needs at least two observations per\ngroup\n\n\n\n\n\nWell, it’s a start.\nThe warning that you’re seeing is that there’s three teams last season who made one appearance on the college football playoff rankings and disappeared. Some fans would bite your arm off for that. Alas. We should eliminate them and thin up our chart a little. Let’s just take teams that finished in the top 10. We’re going to use a neat filter trick for this that you learned earlier using %in%.\n\ntop10 &lt;- rankings |&gt; filter(Week == 15 & Rank &lt;= 10)\n\nnewrankings &lt;- rankings |&gt; filter(Team %in% top10$Team)\n\nNow you have something called newrankings that shows how teams who finished in the top 10 at the end of the season ended up there. And every team who finished in the top 10 in week 17 had been in the rankings more than once in the 5 weeks before.\n\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team))\n\n\n\n\nFirst things first: I’m immediately annoyed by the top teams being at the bottom. I learned a neat trick from ggbump that’s been in ggplot all along – scale_y_reverse()\n\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  scale_y_reverse()\n\n\n\n\nBetter. But, still not great. Let’s add a point at each week.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +\n  scale_y_reverse() \n\n\n\n\nAnother step. That makes it more subway-map like. But the colors are all wrong. To fix this, we’re going to use scale_color_manual and we’re going to Google the hex codes for each team. The legend will tell you what order your scale_color_manual needs to be.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) + \n  scale_color_manual(values = c(\"#9E1B32\",\"#F56600\", \"#BA0C2F\", \"#0021A5\", \"#ffcb05\", \"#BB0000\", \"#4d1979\",\"#FF8200\", \"#990000\", \"#CC0000\")) +\n  scale_y_reverse() \n\n\n\n\nAnother step. But the legend is annoying. And trying to find which red is Alabama vs Ohio State is hard. So what if we labeled each dot at the beginning and end? We can do that with some clever usage of geom_text and a little dplyr filtering inside the data step. We filter out the first and last weeks, then use hjust – horizontal justification – to move them left or right.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings |&gt; filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings |&gt; filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#F56600\", \"#BA0C2F\", \"#0021A5\", \"#ffcb05\", \"#BB0000\", \"#4d1979\",\"#FF8200\", \"#990000\", \"#CC0000\")) +\n  scale_y_reverse() \n\n\n\n\nBetter, but the legend is still there. We can drop it in a theme directive by saying legend.position = \"none\". We’ll also throw a theme_minimal on there to drop the default grey, and we’ll add some better labeling.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings |&gt; filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings |&gt; filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  labs(title=\"Last year's top ten was anything but boring\", subtitle=\"\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#F56600\", \"#BA0C2F\", \"#0021A5\", \"#ffcb05\", \"#BB0000\", \"#4d1979\",\"#FF8200\", \"#990000\", \"#CC0000\")) +\n  scale_y_reverse() \n\n\n\n\nNow let’s fix our text hierarchy.\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings |&gt; filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings |&gt; filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  labs(title=\"Last year's top ten was anything but boring\", subtitle=\"\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#F56600\", \"#BA0C2F\", \"#0021A5\", \"#ffcb05\", \"#BB0000\", \"#4d1979\",\"#FF8200\", \"#990000\", \"#CC0000\")) +\n  scale_y_reverse() \n\n\n\n\nAnd the last thing: anyone else annoyed at 7.5th place on the left? We can fix that too by specifying the breaks in scale_y_reverse. We can do that with the x axis as well, but since we haven’t reversed it, we do that in scale_x_continuous with the same breaks. Also: forgot my source and credit line.\nOne last thing: Let’s change the width of the chart to make the names fit. We can do that by adding fig.width=X in the {r} setup in your block. So something like this:\n\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings |&gt; filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings |&gt; filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  labs(title=\"Last year's top ten was anything but boring\", subtitle=\"\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#F56600\", \"#BA0C2F\", \"#0021A5\", \"#ffcb05\", \"#BB0000\", \"#4d1979\",\"#FF8200\", \"#990000\", \"#CC0000\")) +\n  scale_x_continuous(breaks=c(13,14,15,16,17)) + \n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))"
  },
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "26  Tables",
    "section": "",
    "text": "But not a table. A table with features.\nSometimes, the best way to show your data is with a table – simple rows and columns. It allows a reader to compare whatever they want to compare a little easier than a graph where you’ve chosen what to highlight. The folks that made R Studio and the tidyverse have a neat package called gt.\nFor this assignment, we’ll need gt so go over to the console and run:\ninstall.packages(\"gt\")\nSo what does all of these libraries do? Let’s gather a few and use data of every men’s basketball game between 2015-2023.\nFor this walkthrough:\n   Download csv file\n\nLoad libraries.\n\nlibrary(tidyverse)\nlibrary(gt)\n\nAnd the data.\n\nlogs &lt;- read_csv(\"data/cbblogs1523.csv\")\n\nRows: 87636 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s ask this question: which college basketball team saw the greatest decrease in three point attempts per game between last season as a percentage of shots? The simplest way to calculate that is by percent change.\nWe’ve got a little work to do, putting together ideas we’ve used before. What we need to end up with is some data that looks like this:\nTeam | 2021-2022 season threes | 2022-2023 season threes | pct change\nTo get that, we’ll need to do some filtering to get the right seasons, some grouping and summarizing to get the right number, some pivoting to get it organized correctly so we can mutate the percent change.\n\nthreechange &lt;- logs |&gt;\n  filter(Season == \"2021-2022\" | Season == \"2022-2023\") |&gt;\n  group_by(Team, Season) |&gt;\n  summarise(Total3PA = sum(Team3PA)) |&gt;\n  pivot_wider(names_from=Season, values_from = Total3PA) |&gt;\n  filter(!is.na(`2022-2023`)) |&gt; \n  mutate(PercentChange = (`2022-2023`-`2021-2022`)/`2021-2022`) |&gt;\n  arrange(PercentChange) |&gt; \n  ungroup() |&gt;\n  slice_head(n=10) # just want a top 10 list, but can't use top_n!\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nWe’ve output tables to the screen a thousand times in this class with head, but gt makes them look decent with very little code.\n\nthreechange |&gt; gt()\n\n\n\n\n\n  \n    \n    \n      Team\n      2021-2022\n      2022-2023\n      PercentChange\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n  \n\n\n\n\nSo there you have it. Long Island changed their team so much they took 44 percent fewer threes in 2022-23 from the season before. Where did Maryland come out? We ranked pretty low in college basketball in terms of fewer threes from the season before, because the Terps actually took 61 more.\ngt has a mountain of customization options. The good news is that it works in a very familiar pattern. We’ll start with fixing headers. What we have isn’t bad, but PercentChange isn’t good either. Let’s fix that.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  )\n\n\n\n\n\n  \n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n  \n\n\n\n\nBetter. Note the pattern: Actual header name = “What we want to see”. So if we wanted to change Team to School, we’d do this: Team = \"School\" inside the cols_label bits.\nNow we can start working with styling. The truth is most of your code in tables is going to be dedicated to styling specific things. The first thing we need: A headline and some chatter. They’re required parts of a graphic, so they’re a good place to start. We do that with tab_header\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n  \n\n\n\n\nWe have a headline and some chatter, but … gross. Centered? The extra lines? No real difference in font weight? We can do better. We can style individual elements using tab_style. First, let’s make the main headline – the title – bold and left aligned.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n  \n\n\n\n\nIt’s hard to see here, but the chatter below is also centered (it doesn’t look like it because it fills the space). We can left align that too, but leave it normal weight (i.e. not bold).\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n  \n\n\n\n\nThe next item on the required elements list: Source and credit lines. In gt, those are called tab_source_notes and we can add them like this:\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWe can do a lot with tab_style. For instance, we can make the headers bold and reduce the size a bit to reduce font congestion in the area.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) \n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nNext up: There’s a lot of lines in this that don’t need to be there. gt has some tools to get rid of them easily and add in some other readability improvements.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n-0.4459103\n    Denver\n631\n442\n-0.2995246\n    Mississippi Valley State\n652\n464\n-0.2883436\n    Massachusetts\n770\n555\n-0.2792208\n    Incarnate Word\n772\n557\n-0.2784974\n    Syracuse\n736\n547\n-0.2567935\n    The Citadel\n938\n702\n-0.2515991\n    Mercer\n764\n586\n-0.2329843\n    Monmouth\n597\n466\n-0.2194305\n    Florida International\n852\n671\n-0.2124413\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWe’re in pretty good shape here, but look closer. What else makes this table sub-par? How about the formatting of the percent change? We can fix that with a formatter.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n−44.6%\n    Denver\n631\n442\n−30.0%\n    Mississippi Valley State\n652\n464\n−28.8%\n    Massachusetts\n770\n555\n−27.9%\n    Incarnate Word\n772\n557\n−27.8%\n    Syracuse\n736\n547\n−25.7%\n    The Citadel\n938\n702\n−25.2%\n    Mercer\n764\n586\n−23.3%\n    Monmouth\n597\n466\n−21.9%\n    Florida International\n852\n671\n−21.2%\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nThroughout the semester, we’ve been using color and other signals to highlight things. Let’s pretend we’re doing a project on Syracuse. With a little tab_style magic, we can change individual rows and add color. The last tab_style block here will first pass off the styles we want to use – we’re going to make the rows maroon and the text gold – and then for locations we specify where with a simple filter. What that means is that any rows we can address with logic – all rows with a value greater than X, for example – we can change the styling.\n\nthreechange |&gt; \n  gt() |&gt; \n  cols_label(\n    PercentChange = \"Percent Change\"\n  ) |&gt;\n  tab_header(\n    title = \"Did Maryland Shoot Fewer Threes in 2021-22?\",\n    subtitle = \"No, the Terps shot more. But these 10 teams completely changed their offenses.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Derek Willis  |  **Source:** [Sports Reference](https://www.sports-reference.com/cbb/seasons/)\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(PercentChange),\n    decimals = 1\n  ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"blue\"),\n      cell_text(color = \"orange\")\n      ),\n    locations = cells_body(\n      rows = Team == \"Syracuse\")\n  )\n\n\n\n\n\n  \n    \n      Did Maryland Shoot Fewer Threes in 2021-22?\n    \n    \n      No, the Terps shot more. But these 10 teams completely changed their offenses.\n    \n    \n      Team\n      2021-2022\n      2022-2023\n      Percent Change\n    \n  \n  \n    Long Island University\n758\n420\n−44.6%\n    Denver\n631\n442\n−30.0%\n    Mississippi Valley State\n652\n464\n−28.8%\n    Massachusetts\n770\n555\n−27.9%\n    Incarnate Word\n772\n557\n−27.8%\n    Syracuse\n736\n547\n−25.7%\n    The Citadel\n938\n702\n−25.2%\n    Mercer\n764\n586\n−23.3%\n    Monmouth\n597\n466\n−21.9%\n    Florida International\n852\n671\n−21.2%\n  \n  \n    \n      By: Derek Willis  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nTwo things here:\n\nDear God that color scheme is awful, which is fitting for a school that has a non-rhyming mascot.\nWe’ve arrived where we want to be: We’ve created a clear table that allows a reader to compare schools at will while also using color to draw attention to the thing we want to draw attention to. We’ve kept it simple so the color has impact."
  },
  {
    "objectID": "cowplots.html",
    "href": "cowplots.html",
    "title": "28  Arranging multiple plots together",
    "section": "",
    "text": "Sometimes you have two or three (or more) charts that by themselves aren’t very exciting and are really just one chart that you need to merge together. It would be nice to be able to arrange them programmatically and not have to mess with it in Adobe Illustrator.\nGood news.\nThere is.\nIt’s called cowplot, and it’s pretty easy to use. First install cowplot with install.packages(\"cowplot\"). Then let’s load tidyverse and cowplot.\n\nlibrary(tidyverse)\nlibrary(cowplot)\n\nWe’ll use the college football attendance data we’ve used before.\nFor this walkthrough:\n   Download csv file\n\nAnd load it.\n\nattendance &lt;- read_csv(\"data/attendance.csv\")\n\nRows: 149 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (10): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMaking a quick percent change.\n\nattendance &lt;- attendance |&gt; mutate(change = ((`2022`-`2021`)/`2021`)*100)\n\nLet’s chart the top 10 and bottom 10 of college football ticket growth … and shrinkage.\n\ntop10 &lt;- attendance |&gt; top_n(10, wt=change)\nbottom10 &lt;- attendance |&gt; top_n(10, wt=-change)\n\nTake a look at that top10 dataframe: FIU and Hawaii probably shouldn’t be in here because their attendance figures vary so wildly. Let’s treat them as special cases and remove them for comparison’s sake.\n\nattendance &lt;- attendance |&gt; filter(`2021` &gt; 0, change &lt; 350)\ntop10 &lt;- attendance |&gt; top_n(10, wt=change)\nbottom10 &lt;- attendance |&gt; top_n(10, wt=-change)\n\nOkay, now to do this I need to save my plots to an object. We do this the same way we save things to a dataframe – with the arrow. We’ll make two identical bar charts, one with the top 10 and one with the bottom 10.\n\nbar1 &lt;- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\n\nbar2 &lt;- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip()\n\nWith cowplot, we can use a function called plot_grid to arrange the charts:\n\nplot_grid(bar1, bar2) \n\n\n\n\nWe can also stack them on top of each other:\n\nplot_grid(bar1, bar2, ncol=1) \n\n\n\n\nTo make these publishable, we should add headlines, chatter, decent labels, credit lines, etc. But to do this, we’ll have to figure out which labels go on which charts, so we can make it look decent. For example – both charts don’t need x or y labels. If you don’t have a title and subtitle on both, the spacing is off, so you need to leave one blank or the other blank. You’ll just have to fiddle with it until you get it looking right.\n\nbar1 &lt;- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2022. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 &lt;- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) +\n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2) \n\n\n\n\nWhat’s missing here? Color. Our eyes aren’t drawn to anything (except maybe the top and bottom). So we need to help that. A bar chart without context or color to draw attention to something isn’t much of a bar chart. Same with a line chart – if your line chart has one line, no context, no color, it’s going to fare poorly.\n\nlo &lt;- bottom10 |&gt; filter(Institution == \"Louisiana\")\nsd &lt;- top10 |&gt; filter(Institution == \"San Diego St.\")\n\n\nbar1 &lt;- ggplot() + \n  geom_bar(data=top10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=sd, aes(x=reorder(Institution, change), weight=change), fill=\"#011E41\") + \n  coord_flip() + \n  labs(title=\"College football winners...\", subtitle = \"Not every football program saw attendance shrink in 2018. But some really did.\",  x=\"\", y=\"Percent change\", caption = \"\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nbar2 &lt;- ggplot() + \n  geom_bar(data=bottom10, aes(x=reorder(Institution, change), weight=change)) + \n  geom_bar(data=lo, aes(x=reorder(Institution, change), weight=change), fill=\"#006F71\") + \n  coord_flip() +  \n  labs(title = \"... and losers\", subtitle= \"\", x=\"\", y=\"\",  caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nplot_grid(bar1, bar2)"
  },
  {
    "objectID": "finishingtouches.html#graphics-vs-visual-stories",
    "href": "finishingtouches.html#graphics-vs-visual-stories",
    "title": "33  Finishing touches",
    "section": "33.1 Graphics vs visual stories",
    "text": "33.1 Graphics vs visual stories\nWhile the elements above are nearly required in every chart, they aren’t when you are making visual stories.\n\nWhen you have a visual story, things like credit lines can become a byline.\nIn visual stories, source lines are often a note at the end of the story.\nGraphics don’t always get headlines – sometimes just labels, letting the visual story headline carry the load.\n\nAn example from The Upshot. Note how the charts don’t have headlines, source or credit lines."
  },
  {
    "objectID": "finishingtouches.html#getting-ggplot-closer-to-output",
    "href": "finishingtouches.html#getting-ggplot-closer-to-output",
    "title": "33  Finishing touches",
    "section": "33.2 Getting ggplot closer to output",
    "text": "33.2 Getting ggplot closer to output\nLet’s explore fixing up ggplot’s output before we send it to a finishing program like Adobe Illustrator. We’ll need a graphic to work with first.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nHere’s the data we’ll use: college football team scoring from 2009-2018.\nFor this walkthrough:\n   Download csv file\n\n   Download csv file\n\nLet’s load them and join them together.\n\nscoring &lt;- read_csv(\"data/scoringoffense.csv\")\n\nRows: 1253 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (9): G, TD, FG, 1XP, 2XP, Safety, Points, Points/G, Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntotal &lt;- read_csv(\"data/totaloffense.csv\")\n\nRows: 1253 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Name\ndbl (8): G, Rush Yards, Pass Yards, Plays, Total Yards, Yards/Play, Yards/G,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\noffense &lt;- total |&gt; left_join(scoring, by=c(\"Name\", \"Year\"))\n\nWe’re going to need this later, so let’s grab Maryland’s 2018 stats from this dataframe.\n\numd &lt;- offense |&gt; \n  filter(Name == \"Maryland\") |&gt; \n  filter(Year == 2018)\n\nWe’ll start with the basics.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\nLet’s take changing things one by one. The first thing we can do is change the figure size. Sometimes you don’t want a square. We can use the knitr output settings in our chunk to do this easily in our notebooks.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\")\n\n\n\n\nNow let’s add a fit line.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") +\n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE)\n\n\n\n\nAnd now some labels.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\"\n    )\n\n\n\n\nLet’s get rid of the default plot look and drop the grey background.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\"\n    ) + \n  theme_minimal()\n\n\n\n\nOff to a good start, but our text has no real heirarchy. We’d want our headline to stand out more. So let’s change that. When it comes to changing text, the place to do that is in the theme element. There are a lot of ways to modify the theme. We’ll start easy. Let’s make the headline bigger and bold.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\")\n    ) \n\n\n\n\nNow let’s fix a few other things – like the axis labels being too big, the subtitle could be bigger and lets drop some grid lines.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) \n\n\n\n\nMissing from this graph is the context that the headline promises. Where is Maryland? We haven’t added it yet. So let’s add a point and a label for it.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team. They overperformed.\",\n    caption=\"Source: NCAA | By Derek Willis\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nIf we’re happy with this output – if it meets all of our needs for publication – then we can simply export it as a png file. We do that by adding + ggsave(\"plot.png\", width=5, height=2) to the end of our code. Note the width and the height are from our knitr parameters at the top – you have to repeat them or the graph will export at the default 7x7.\nIf there’s more work you want to do with this graph that isn’t easy or possible in R but is in Illustrator, simply change the file extension to pdf instead of png. The pdf will open as a vector file in Illustrator with everything being fully editable."
  },
  {
    "objectID": "finishingtouches.html#waffle-charts-require-special-attention",
    "href": "finishingtouches.html#waffle-charts-require-special-attention",
    "title": "33  Finishing touches",
    "section": "33.3 Waffle charts require special attention",
    "text": "33.3 Waffle charts require special attention\nFrequently in my classes, students use the waffle charts library quite extensively to make graphics. This is a quick walkthough on how to get a waffle chart into a publication ready state.\n\nlibrary(waffle)\n\nLet’s look at the offensive numbers from the 2021 Maryland v. Illinois football game. Maryland won 20-17, even though the Terps outgained the Illini by 113 yards. You can find the official stats on the NCAA’s website.\nI’m going to make two vectors for each team and record rushing yards and passing yards.\n\nmd &lt;- c(\"Rushing\"=131, \"Passing\"=350, 113)\nil &lt;- c(\"Rushing\"=183, \"Passing\"=185, 0)\n\nSo what does the breakdown of Maryland’s night look like? How balanced was the offense?\nThe waffle library can break this down in a way that’s easier on the eyes than a pie chart. We call the library, add the data, specify the number of rows, give it a title and an x value label, and to clean up a quirk of the library, we’ve got to specify colors.\nADDITIONALLY\nWe can add labels and themes, but you have to be careful. The waffle library is applying it’s own theme, but if we override something they are using in their theme, some things that are hidden come back and make it worse. So here is an example of how to use ggplot’s labs and the theme to make a fully publication ready graphic.\n\nwaffle(md/10, rows = 5, xlab=\"1 square = 10 yards\", colors = c(\"black\", \"red\", \"white\")) + \n  labs(\n    title=\"Maryland vs Illinois on offense\", \n    subtitle=\"The Terps couldn't get much of a running game going.\",\n    caption=\"Source: NCAA | Graphic by Derek Willis\") + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  )\n\n\n\n\nBut what if we’re using a waffle iron? And what if we want to change the output size? It gets tougher.\nTruth is, I’m not sure what is going on with the sizing. You can try it and you’ll find that the outputs are … unpredictable.\nThings you need to know about waffle irons:\n\nThey’re a convenience method, but all they’re really doing is executing two waffle charts together. If you don’t apply the theme to both waffle charts, it breaks.\nYou will have to get creative about applying headline and subtitle to the top waffle chart and the caption to the bottom.\nUsing ggsave doesn’t work either. So you’ll have to use R’s pdf output.\n\nHere is a full example. I start with my waffle iron code, but note that each waffle is pretty much a self contained thing. That’s because a waffle iron isn’t really a thing. It’s just a way to group waffles together, so you have to make each waffle individually. My first waffle has the title and subtitle but no x axis labels and the bottom one has not title or subtitle but the axis labels and the caption.\n\niron(\n waffle(\n   md/10, \n   rows = 2, \n   xlab=\"Maryland\",\n   colors = c(\"black\", \"red\", \"white\")) + \n   labs(\n     title=\"Maryland vs Illinois: By the numbers\", \n     subtitle=\"The Terps couldn't run, the Illini could.\") + \n   theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank()\n  ),\n waffle(\n   il/10, \n   rows = 2, \n   xlab=\"Illinois\\n1 square = 10 yards\", \n   colors = c(\"orange\", \"blue\", \"white\")) + \n   labs(caption=\"Source: NCAA | Graphic by Derek Willis\")\n)"
  },
  {
    "objectID": "finishingtouches.html#advanced-text-wrangling",
    "href": "finishingtouches.html#advanced-text-wrangling",
    "title": "33  Finishing touches",
    "section": "33.4 Advanced text wrangling",
    "text": "33.4 Advanced text wrangling\nSometimes, you need a little more help with text than what is easily available. Sometimes you want a little more in your finishing touches. Let’s work on some issues common in projects that can be fixed with new new libraries: multi-line chatter, axis labels that need more than just a word, axis labels that don’t fit, and additional text boxes.\nFirst things first, we’ll need to install ggtext with install.packages. Then we’ll load it.\n\nlibrary(ggtext)\n\nLet’s go back to our scatterplot above. As created, it’s very simple, and the chatter doesn’t say much. Let’s write chatter that instead of being super spare is more verbose.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop opponents. If you compare the offense to every other offense and how many points they score vs the number of yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nYou can see the problem right away – it’s too long and gets cut off. One way to fix this is to put \\n where you think the line break should be. That’s a newline character, so it would add a return there. But with ggtext, you can use simple HTML to style the text, which opens up a lot of options. We can use a  to break the line. The other thing we need to do is in the theme element, change the element_text for plot.subtitle to element_markdown.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop&lt;br/&gt;opponents. If you compare the offense to every other offense and how many points they score vs the number of&lt;br/&gt; yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nWith ggtext, there’s a lot more you can do with CSS, like change the color of text, that I don’t recommend. Also, there’s only a few HTML tags that have been implemented. For example, you can’t add links because the a tag hasn’t been added.\nAnother sometimes useful thing you can do is add much more explanation to your axis labels. This is going to be a silly example because “Points per game” is pretty self-explanatory, but roll with it. First, we create an unusually long y axis label, then, in theme, we add some code to axis.title.y.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game is an imperfect metric of offensive efficiency because defenses and special teams score points as well.\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop&lt;br/&gt;opponents. If you compare the offense to every other offense and how many points they score vs the number of&lt;br/&gt; yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank(),\n    axis.title.y = element_textbox_simple(\n      orientation = \"left-rotated\",\n      width = grid::unit(2.5, \"in\")\n    )\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))\n\n\n\n\nOne last advanced trick: Adding a text box explainer in the graphic. This should be used in somewhat rare circumstances – you don’t want to pollute your data space with lots of text. If your graphic needs so much explainer text, you should be asking yourself hard questions about if your chart is clearly telling a story.\nTo add a text box explainer, you need to add a geom_textbox to your chart. The code below does that, and also adds a geom_point to anchor the box to a spot.\n\nggplot() + \n  geom_point(data=offense, aes(x=`Yards/G`, y=`Points/G`), color=\"grey\") + \n  geom_smooth(data=offense, aes(x=`Yards/G`, y=`Points/G`), method=lm, se=FALSE) + \n  geom_textbox(\n    aes(x=225, \n        y=50, \n        label=\"Dots above the blue line indicate offenses that scored more points than their yards per game would suggest they should.\", \n        orientation = \"upright\", \n        hjust=0, \n        vjust=1), width = unit(2.8, \"in\")) +\n  geom_point(aes(x=225, y=50), size=2) + \n  labs(\n    x=\"Total yards per game\", \n    y=\"Points per game\", \n    title=\"Maryland's overperforming offense\", \n    subtitle=\"The Terps' offense was the strength of the team, having to overcome a defense that often struggled to stop&lt;br/&gt;opponents. If you compare the offense to every other offense and how many points they score vs the number of&lt;br/&gt; yards they roll up, Maryland actually overperformed.\", \n    caption=\"Source: NCAA | By Derek Willis\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  geom_point(data=umd, aes(x=`Yards/G`, y=`Points/G`), color=\"red\") + \n  geom_text_repel(data=umd, aes(x=`Yards/G`, y=`Points/G`, label=\"Maryland 2018\"))"
  },
  {
    "objectID": "usingpackages.html#using-cfbfastr-as-a-cautionary-tale",
    "href": "usingpackages.html#using-cfbfastr-as-a-cautionary-tale",
    "title": "39  Using packages to get data",
    "section": "39.1 Using cfbfastR as a cautionary tale",
    "text": "39.1 Using cfbfastR as a cautionary tale\ncfbfastR presents us a good view into the promise and peril of libraries like this.\nFirst, to make this work, follow the installation instructions and then follow how to get an API key from College Football Data and how to add that to your environment. But maybe wait to do that until you read the whole section.\nAfter installations, we can load it up.\n\nlibrary(tidyverse)\nlibrary(cfbfastR)\n\nYou might be thinking, “Oh wow, I can get play by play data for college football. Let’s look at what are the five most heartbreaking plays of last year’s Maryland season.” Because what better way to determine doom than by looking at the steepest drop-off in win probability, which is included in the data.\nGreat idea. Let’s do it. You’ll need to make sure that your API key has been added to your environment.\nThe first thing to do is read the documentation. You’ll see that you can request data for each week. For example, here’s week 1 against Buffalo.\n\nmaryland &lt;- cfbd_pbp_data(\n 2022,\n  week=1, \n  season_type = \"regular\",\n  team = \"Maryland\",\n  epa_wpa = TRUE,\n)\n\n• 14:35:41 | Start processing of 1 game...\n\n\nThere’s not an easy way to get all of a single team’s games. A way to do it that’s not very pretty but it works is like this:\n\nwk1 &lt;- cfbd_pbp_data(2022, week=1, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk2 &lt;- cfbd_pbp_data(2022, week=2, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk3 &lt;- cfbd_pbp_data(2022, week=3, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk4 &lt;- cfbd_pbp_data(2022, week=4, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk5 &lt;- cfbd_pbp_data(2022, week=5, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk6 &lt;- cfbd_pbp_data(2022, week=6, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk8 &lt;- cfbd_pbp_data(2022, week=8, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk9 &lt;- cfbd_pbp_data(2022, week=9, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk10 &lt;- cfbd_pbp_data(2022, week=10, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk11 &lt;- cfbd_pbp_data(2022, week=11, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\nSys.sleep(2)\nwk12 &lt;- cfbd_pbp_data(2022, week=12, season_type = \"regular\", team = \"Maryland\", epa_wpa = TRUE)\n\numplays &lt;- bind_rows(wk1, wk2, wk3, wk4, wk5, wk6, wk8, wk9, wk10, wk11, wk12)\n\nThe sys.sleep bits just pauses for two seconds before running the next block. Since we’re requesting data from someone else’s computer, we want to be kind. Week 2 was a bye week for Maryland, so if you request it, you’ll get an empty request and a warning. The bind_rows parts puts all the dataframes into a single dataframe.\nNow you’re ready to look at heartbreak. How do we define heartbreak? How about like this: you first have to lose the game, it comes in the third or fourth quarter, it involves a play (i.e. not a timeout), and it results in the biggest drop in win probability.\n\numplays |&gt; \n  filter(pos_team == \"Maryland\" & wk &gt; 4 & play_type != \"Timeout\") |&gt; \n  filter(period == 3 | period == 4) |&gt; \n  mutate(HeartbreakLevel = wp_before - wp_after) |&gt; \n  arrange(desc(HeartbreakLevel)) |&gt; \n  top_n(5, wt=HeartbreakLevel) |&gt;\n  select(period, clock.minutes, def_pos_team, play_type, play_text)\n\n── play-by-play data from CollegeFootballData.com ──────────── cfbfastR 1.9.0 ──\n\n\nℹ Data updated: 2023-10-23 14:35:44 EDT\n\n\n# A tibble: 5 × 5\n  period clock.minutes def_pos_team play_type      play_text                    \n   &lt;int&gt;         &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;          &lt;chr&gt;                        \n1      3            13 Northwestern Rush           Roman Hemby run for 2 yds to…\n2      3             9 Purdue       Rush           Antwain Littleton II run for…\n3      3            12 Ohio State   Blocked Punt   TEAM punt blocked by Lathan …\n4      3             7 Purdue       Sack           Taulia Tagovailoa sacked by …\n5      4            15 Purdue       Pass Reception Taulia Tagovailoa pass compl…\n\n\nThe most heartbreaking play of the season, according to our data? A third quarter run for two yards against Northwestern. Hmm - Maryland won that game, though. The other top plays - mostly against Purdue and a blocked punt by Ohio State - seem more in line with what we want."
  },
  {
    "objectID": "usingpackages.html#another-example",
    "href": "usingpackages.html#another-example",
    "title": "39  Using packages to get data",
    "section": "39.2 Another example",
    "text": "39.2 Another example\nThe wehoop package is mature enough to have a version on CRAN, so you can install it the usual way with install.packages(\"wehoop\"). Another helpful library to install is progressr with install.packages(\"progressr\")\n\nlibrary(wehoop)\n\nMany of these libraries have more than play-by-play data. For example, wehoop has box scores and player data for both the WNBA and college basketball. From personal experience, WNBA data isn’t hard to get, but women’s college basketball is a giant pain.\nSo, who is Maryland’s single season points champion over the last six seasons?\n\nprogressr::with_progress({\n  wbb_player_box &lt;- wehoop::load_wbb_player_box(2018:2022)\n})\n\nWith progressr, you’ll see a progress bar in the console, which lets you know that your command is still working, since some of these requests take minutes to complete. Player box scores is quicker – five seasons was a matter of seconds.\nIf you look at the wbb_player_box data we now have, we have each player in each game over each season – more than 300,000 records. Finding out who Maryland’s top 10 single-season scoring leaders are is a matter of grouping, summing and filtering.\n\nwbb_player_box |&gt; \n  filter(team_short_display_name == \"Maryland\", !is.na(points)) |&gt; \n  group_by(athlete_display_name, season) |&gt; \n  summarise(totalPoints = sum(as.numeric(points))) |&gt; \n  arrange(desc(totalPoints)) |&gt;\n  ungroup() |&gt;\n  top_n(10, wt=totalPoints)\n\n# A tibble: 11 × 3\n   athlete_display_name season totalPoints\n   &lt;chr&gt;                 &lt;int&gt;       &lt;dbl&gt;\n 1 Kaila Charles          2018         610\n 2 Kaila Charles          2019         579\n 3 Angel Reese            2022         569\n 4 Ashley Owusu           2021         518\n 5 Diamond Miller         2021         501\n 6 Kaila Charles          2020         456\n 7 Taylor Mikesell        2019         456\n 8 Stephanie Jones        2019         435\n 9 Ashley Owusu           2022         385\n10 Ashley Owusu           2020         383\n11 Shakira Austin         2020         383\n\n\nMaryland relied on Diamond Miller’s scoring last year more than they have any player’s in the past six seasons."
  }
]